-- MySQL dump 10.13  Distrib 5.1.41, for debian-linux-gnu (i486)
--
-- Host: localhost    Database: db_isad
-- ------------------------------------------------------
-- Server version	5.1.41-3ubuntu12.10

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `auth_group`
--

DROP TABLE IF EXISTS `auth_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_group` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(80) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_group`
--

LOCK TABLES `auth_group` WRITE;
/*!40000 ALTER TABLE `auth_group` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_group` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_group_permissions`
--

DROP TABLE IF EXISTS `auth_group_permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_group_permissions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `group_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `group_id` (`group_id`,`permission_id`),
  KEY `auth_group_permissions_425ae3c4` (`group_id`),
  KEY `auth_group_permissions_1e014c8f` (`permission_id`),
  CONSTRAINT `group_id_refs_id_3cea63fe` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`),
  CONSTRAINT `permission_id_refs_id_5886d21f` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_group_permissions`
--

LOCK TABLES `auth_group_permissions` WRITE;
/*!40000 ALTER TABLE `auth_group_permissions` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_group_permissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_message`
--

DROP TABLE IF EXISTS `auth_message`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_message` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `message` longtext NOT NULL,
  PRIMARY KEY (`id`),
  KEY `auth_message_403f60f` (`user_id`),
  CONSTRAINT `user_id_refs_id_650f49a6` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_message`
--

LOCK TABLES `auth_message` WRITE;
/*!40000 ALTER TABLE `auth_message` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_message` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_permission`
--

DROP TABLE IF EXISTS `auth_permission`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_permission` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) NOT NULL,
  `content_type_id` int(11) NOT NULL,
  `codename` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `content_type_id` (`content_type_id`,`codename`),
  KEY `auth_permission_1bb8f392` (`content_type_id`),
  CONSTRAINT `content_type_id_refs_id_728de91f` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=80 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_permission`
--

LOCK TABLES `auth_permission` WRITE;
/*!40000 ALTER TABLE `auth_permission` DISABLE KEYS */;
INSERT INTO `auth_permission` VALUES (1,'Can add permission',1,'add_permission'),(2,'Can change permission',1,'change_permission'),(3,'Can delete permission',1,'delete_permission'),(4,'Can add group',2,'add_group'),(5,'Can change group',2,'change_group'),(6,'Can delete group',2,'delete_group'),(7,'Can add user',3,'add_user'),(8,'Can change user',3,'change_user'),(9,'Can delete user',3,'delete_user'),(10,'Can add message',4,'add_message'),(11,'Can change message',4,'change_message'),(12,'Can delete message',4,'delete_message'),(13,'Can add content type',5,'add_contenttype'),(14,'Can change content type',5,'change_contenttype'),(15,'Can delete content type',5,'delete_contenttype'),(16,'Can add session',6,'add_session'),(17,'Can change session',6,'change_session'),(18,'Can delete session',6,'delete_session'),(19,'Can add site',7,'add_site'),(20,'Can change site',7,'change_site'),(21,'Can delete site',7,'delete_site'),(22,'Can add log entry',16,'add_logentry'),(23,'Can change log entry',16,'change_logentry'),(24,'Can delete log entry',16,'delete_logentry'),(25,'Can add theory',8,'add_theory'),(26,'Can change theory',8,'change_theory'),(27,'Can delete theory',8,'delete_theory'),(28,'Can add procedure',28,'add_procedure'),(29,'Can change procedure',28,'change_procedure'),(30,'Can delete procedure',28,'delete_procedure'),(31,'Can add self evaluation',10,'add_selfevaluation'),(32,'Can change self evaluation',10,'change_selfevaluation'),(33,'Can delete self evaluation',10,'delete_selfevaluation'),(34,'Can add simulation',11,'add_simulation'),(35,'Can change simulation',11,'change_simulation'),(36,'Can delete simulation',11,'delete_simulation'),(37,'Can add workspace',12,'add_workspace'),(38,'Can change workspace',12,'change_workspace'),(39,'Can delete workspace',12,'delete_workspace'),(40,'Can add inline workspace',27,'add_inlineworkspace'),(41,'Can change inline workspace',27,'change_inlineworkspace'),(42,'Can delete inline workspace',27,'delete_inlineworkspace'),(43,'Can add exercise',13,'add_exercise'),(44,'Can change exercise',13,'change_exercise'),(45,'Can delete exercise',13,'delete_exercise'),(46,'Can add solution',14,'add_solution'),(47,'Can change solution',14,'change_solution'),(48,'Can delete solution',14,'delete_solution'),(49,'Can add book',17,'add_book'),(50,'Can change book',17,'change_book'),(51,'Can delete book',17,'delete_book'),(52,'Can add reference',15,'add_reference'),(53,'Can change reference',15,'change_reference'),(54,'Can delete reference',15,'delete_reference'),(55,'Can add contact',29,'add_contact'),(56,'Can change contact',29,'change_contact'),(57,'Can delete contact',29,'delete_contact'),(58,'Can add comment',30,'add_comment'),(59,'Can change comment',30,'change_comment'),(60,'Can delete comment',30,'delete_comment'),(61,'Can moderate comments',30,'can_moderate'),(62,'Can add comment flag',31,'add_commentflag'),(63,'Can change comment flag',31,'change_commentflag'),(64,'Can delete comment flag',31,'delete_commentflag'),(65,'Can add post answer',32,'add_postanswer'),(66,'Can change post answer',32,'change_postanswer'),(67,'Can delete post answer',32,'delete_postanswer'),(68,'Can add case study',33,'add_casestudy'),(69,'Can change case study',33,'change_casestudy'),(70,'Can delete case study',33,'delete_casestudy'),(71,'Can add post answer',34,'add_postanswer'),(72,'Can change post answer',34,'change_postanswer'),(73,'Can delete post answer',34,'delete_postanswer'),(74,'Can add place',35,'add_place'),(75,'Can change place',35,'change_place'),(76,'Can delete place',35,'delete_place'),(77,'Can add hotel',36,'add_hotel'),(78,'Can change hotel',36,'change_hotel'),(79,'Can delete hotel',36,'delete_hotel');
/*!40000 ALTER TABLE `auth_permission` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_user`
--

DROP TABLE IF EXISTS `auth_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(30) NOT NULL,
  `first_name` varchar(30) NOT NULL,
  `last_name` varchar(30) NOT NULL,
  `email` varchar(75) NOT NULL,
  `password` varchar(128) NOT NULL,
  `is_staff` tinyint(1) NOT NULL,
  `is_active` tinyint(1) NOT NULL,
  `is_superuser` tinyint(1) NOT NULL,
  `last_login` datetime NOT NULL,
  `date_joined` datetime NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_user`
--

LOCK TABLES `auth_user` WRITE;
/*!40000 ALTER TABLE `auth_user` DISABLE KEYS */;
INSERT INTO `auth_user` VALUES (1,'barun','Barun','Saha','barun.saha04@gmail.com','sha1$36eeb$ed8e91cf119d2b7123b54823118a2919ef2763ca',1,1,1,'2013-03-13 20:14:08','2010-10-27 19:17:11');
/*!40000 ALTER TABLE `auth_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_user_groups`
--

DROP TABLE IF EXISTS `auth_user_groups`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_user_groups` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `group_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `user_id` (`user_id`,`group_id`),
  KEY `auth_user_groups_403f60f` (`user_id`),
  KEY `auth_user_groups_425ae3c4` (`group_id`),
  CONSTRAINT `group_id_refs_id_f116770` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`),
  CONSTRAINT `user_id_refs_id_7ceef80f` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_user_groups`
--

LOCK TABLES `auth_user_groups` WRITE;
/*!40000 ALTER TABLE `auth_user_groups` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_user_groups` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_user_user_permissions`
--

DROP TABLE IF EXISTS `auth_user_user_permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_user_user_permissions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `user_id` (`user_id`,`permission_id`),
  KEY `auth_user_user_permissions_403f60f` (`user_id`),
  KEY `auth_user_user_permissions_1e014c8f` (`permission_id`),
  CONSTRAINT `permission_id_refs_id_67e79cb` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`),
  CONSTRAINT `user_id_refs_id_dfbab7d` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_user_user_permissions`
--

LOCK TABLES `auth_user_user_permissions` WRITE;
/*!40000 ALTER TABLE `auth_user_user_permissions` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_user_user_permissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_content_type`
--

DROP TABLE IF EXISTS `django_content_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_content_type` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `app_label` varchar(100) NOT NULL,
  `model` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `app_label` (`app_label`,`model`)
) ENGINE=InnoDB AUTO_INCREMENT=37 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_content_type`
--

LOCK TABLES `django_content_type` WRITE;
/*!40000 ALTER TABLE `django_content_type` DISABLE KEYS */;
INSERT INTO `django_content_type` VALUES (1,'permission','auth','permission'),(2,'group','auth','group'),(3,'user','auth','user'),(4,'message','auth','message'),(5,'content type','contenttypes','contenttype'),(6,'session','sessions','session'),(7,'site','sites','site'),(8,'theory','isad','theory'),(10,'self evaluation','isad','selfevaluation'),(11,'simulation','isad','simulation'),(12,'workspace','isad','workspace'),(13,'exercise','isad','exercise'),(14,'solution','isad','solution'),(15,'reference','isad','reference'),(16,'log entry','admin','logentry'),(17,'book','isad','book'),(18,'theory','ant','theory'),(19,'note','ant','note'),(20,'self evaluation','ant','selfevaluation'),(21,'simulation','ant','simulation'),(22,'workspace','ant','workspace'),(23,'exercise','ant','exercise'),(24,'solution','ant','solution'),(25,'book','ant','book'),(26,'reference','ant','reference'),(27,'inline workspace','isad','inlineworkspace'),(28,'procedure','isad','procedure'),(29,'contact','isad','contact'),(30,'comment','comments','comment'),(31,'comment flag','comments','commentflag'),(32,'post answer','isad','postanswer'),(33,'case study','isad','casestudy'),(34,'post answer','post2mentor','postanswer'),(35,'place','isad','place'),(36,'hotel','isad','hotel');
/*!40000 ALTER TABLE `django_content_type` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_session`
--

DROP TABLE IF EXISTS `django_session`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_session` (
  `session_key` varchar(40) NOT NULL,
  `session_data` longtext NOT NULL,
  `expire_date` datetime NOT NULL,
  PRIMARY KEY (`session_key`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- NOT Dumping data for table `django_session`
--


--
-- Table structure for table `django_site`
--

DROP TABLE IF EXISTS `django_site`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_site` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `domain` varchar(100) NOT NULL,
  `name` varchar(50) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_site`
--

LOCK TABLES `django_site` WRITE;
/*!40000 ALTER TABLE `django_site` DISABLE KEYS */;
INSERT INTO `django_site` VALUES (1,'example.com','ISAD');
/*!40000 ALTER TABLE `django_site` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `isad_book`
--

DROP TABLE IF EXISTS `isad_book`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `isad_book` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(100) NOT NULL,
  `author` varchar(100) NOT NULL,
  `publisher` varchar(25) DEFAULT NULL,
  `edition` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `isad_book`
--

LOCK TABLES `isad_book` WRITE;
/*!40000 ALTER TABLE `isad_book` DISABLE KEYS */;
INSERT INTO `isad_book` VALUES (1,'Software Engineering: A Practioner\'s Approach','Roger S. Pressman','McGraw Hills','7th Edition, 2009'),(2,'Software Engineering','Ian Sommerville','Addison Wesley Longman','9th Edition, March 2010'),(3,'Fundamentals of Software Engineering','Rajib Mall','Prentice-Hall of India','3rd Edition, 2009'),(4,'Requirements Engineering: A Good Practice Guide','Ian Sommerville, Pete Sawyer','Wiley India Pvt Ltd','2009'),(5,'Object-Oriented Modeling and Design with UML','Michael Blaha, James Rumbaugh','Prentice-Hall of India','2nd Edition'),(6,'Object-Oriented Analysis and Design using UML','Mahesh P. Matha','Prentice-Hall of India',''),(7,'Database System Concepts','Henry F. Korth , Abraham Silberschatz','McGraw Hills','5th Edition'),(8,'UML and C++  A Practical Guide To Object-Oriented Development','Richard C. Lee, William M. Tepfenhart','Prentice-Hall of India','2nd Edition, 2005'),(9,'Just Enough Software Test Automation','Daniel J. Mosley, Bruce A. Posey','Prentice Hall','July 2002'),(10,'THE UNIFIED MODELING LANGUAGE USER GUIDE','GRADY BOOCH, JAMES RUMBAUGH, IVAR JACOBSON','ADDISON-WESLEY','Low Priced Edition, 2000');
/*!40000 ALTER TABLE `isad_book` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `isad_casestudy`
--

DROP TABLE IF EXISTS `isad_casestudy`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `isad_casestudy` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `theory_id` int(11) NOT NULL,
  `title` varchar(125) DEFAULT NULL,
  `case` longtext,
  `analysis` longtext,
  PRIMARY KEY (`id`),
  KEY `isad_casestudy_453a65b7` (`theory_id`),
  CONSTRAINT `theory_id_refs_id_4a79800e` FOREIGN KEY (`theory_id`) REFERENCES `isad_theory` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `isad_casestudy`
--

LOCK TABLES `isad_casestudy` WRITE;
/*!40000 ALTER TABLE `isad_casestudy` DISABLE KEYS */;
INSERT INTO `isad_casestudy` VALUES (1,7,'A Library Information System for SE VLabs Institute','<p> The SE VLabs Institute has been recently setup to provide state-of-the-art research facilities in the field of Software Engineering. Apart from research scholars (students) and professors, it also includes quite a large number of employees who work on different projects undertaken by the institution. </p> <p> As the size and capacity of the institute is increasing with the time, it has been proposed to develop a Library Information System (LIS) for the benefit of students and employees of the institute. LIS will enable the members to borrow a book (or return it) with ease while sitting at his desk/chamber. The system also enables a member to extend the date of his borrowing if no other booking for that particular book has been made. For the library staff, this system aids them to easily handle day-to-day book transactions. The librarian, who has administrative privileges and complete control over the system, can enter a new record into the system when a new book has been purchased, or remove a record in case any book is taken off the shelf. Any non-member is free to use this system to browse/search books online. However, issuing or returning books is restricted to valid users (members) of LIS only. </p> <p> The final deliverable would a web application (using the recent HTML 5), which should run only within the institute LAN. Although this reduces security risk of the software to a large extent, care should be taken no confidential information (eg., passwords) is stored in plain text. </p>','<p>Let us consider the &quot;Issue Book&quot; use case and represent the involved steps in a sequence diagramas shown in figure 1. We assume that the book to be issued is available. An user makes a request to issue a book against his account.This is shown by the &quot;issueBook(bookID)&quot; call from &quot;Member&quot; to &quot;IssueManager&quot;objects. At this point the system checks whether that particular user can issue another book (based on the maximum number of books that he can issue) by invoking the &quot;canIssue()&quot; method on the &quot;Member&quot;. As aresult of this call, a response (&quot;status&quot;) is sent back to the &quot;IssueManager&quot; class. If the&quot;status&quot; is &quot;true&quot; (as indicated in the note), status of the concerned book is set to &quot;issued&quot;.A new transaction is saved corresponding to the current issue of book by the user. Finally, a success message issent back to &quot;Member&quot; indicating that the book was successfully issued.</p><center>    <img src=\"_STATIC_URL_/isad/images/case_study/class_seq_dia/seq_issue_book.png\" alt=\"Issue book sequence diagram\"    class=\"diagram\">    <br>    Figure 1: Sequence diagram for &quot;Issue Book&quot;</center><p>Few points could be noted here. Notes can be used almost anywhere within an UML diagram for whatever purpose.In figure 1 we use a note to specify the condition when status of a book is set to \'issued\'. UML 1.0 had used guard conditions to specify such kind of Boolean logic. UML 2.0 provide components to specify the alternate scenarios within a sequence diagram (not discussed here). One can definitely make use of these components. However, if the number of IF-THEN-ELSE conditions in a sequence diagram becomes high, the diagram gets complicated. In such cases one can draw multiple sequence diagrams for alternate conditions. </p><p>One key component in figure 1 is the &quot;IssueManager&quot; class. This class doesn\'t represent the actual Library Information System (LIS). Rather, this is a part of LIS -- a specific module to handle issuing of books to the members.</p><p>Also, note that the life cycle of the &quot;Transactions&quot; has been shown as self-destroyed. To understand this, consider how a transaction is actually implemented in code. One creates an object from &quot;Transactions&quot;class, fills it up with all necessary information, and then saves the transaction. Thereafter, the transaction object is not required to be in memory.</p><p>Figure 2 shows the order of steps involved in the process of purchasing of a new book. In this case also, &quot;PurchaseManager&quot;is a part of LIS, which manages all books that are being purchased. The activation bars indicate the different instances when a particular object is active in their corresponding life cycles. </p><center>    <img src=\"_STATIC_URL_/isad/images/case_study/class_seq_dia/seq_purchase_books.png\" alt=\"Purchase books sequence diagram\"    class=\"diagram\">    <br>    Figure 2: Sequence diagram for &quot;Purchase Books&quot;</center><p>One may have doubts over the inclusion of &quot;Distributor&quot; class. &quot;Distributor&quot; is not a constituent of the LIS;however, it interacts with LIS. Here &quot;Distributor&quot; is meant to represent the &quot;interface&quot; between LIS and the actual, physical book sellers and distributors. For instance, LIS can store details of distributor XYZ, including it\'s email address, bank account number, into it\'s records. Whenever the librarian places a new order to XYZ, the order is being sent electronically to XYZ, processed (possibly with a delay), a corresponding invoice is generated, and sent back to LIS. &quot;placeOrder(orderID)&quot; has been indicated as asynchronous calls since the calling object can continue with other tasks. The books would be dispatched by XYZ physically, which lies outside the boundary of LIS. Once the ordered books have been received, the librarian opts to make payment for his orders, which, too, could happen electronically through Net Banking. Technology has, indeed,made a huge progress!</p><p>Finally, at his leisure time, the librarian might consider updating the inventory according to the corresponding order.</p><p>&nbsp;</p><p>Classes are the fundamental components of any object oriented design and development. Unless individual class, it\'s attributes and associated operations have been modeled well, a lot of suffering could await during the development phase. However, unlike waterfall model, the life cycle in object oriented development is iterative. One builds a model, analyze it\'s efficiency, and refines it thereafter, if required. Therefore, an analyst, designer, or developer does not have the tight constraints to create a perfect art at one go.</p><p>Based on conceptual modeling and domain knowledge we already had identified a list of classes. We present them here once again:</p><ul>     <li>Member</li>     <li>Book</li>     <li>Transaction (of books)</li>     <li>Librarian</li>     <li>Employee</li>     <li>Book Inventory</li>     <li>Distributor</li>     <li>Order</li>     <li>Order Line Item</li>     <li>Payment</li>     <li>Invoice</li> </ul><p>Let us focus on the &quot;Member&quot;, &quot;Librarian&quot; and &quot;Employee&quot; classes. The &quot;Employee&quot; class could be considered as a parent class, some of whose properties are inherited by the &quot;Member&quot; class. Again, &quot;Librarian&quot;is just a special type of &quot;Member&quot; with certain extra privileges. However, it may be noted here that LIS in no way would be interested to know about employees who are not members of LIS. Moreover, to distinguish between a normal member and a librarian, one could define a set of roles, and assign them appropriately to the members. This approach provides a flexible approach to manage users. For example, if the librarian goes on a leave, another member could be assigned the librarian role temporarily. Therefore, we decide to have a single &quot;Member&quot; class, whose instances could have one or more roles. This is shown in figure 3 with the &quot;association&quot; relationship between &quot;Member&quot; and &quot;Role&quot;classes. The &quot;Role&quot; class could consist of a list of available roles. A list could be maintained in the &quot;Member&quot; class to indicate which roles are associated with a particular instance of it.</p><center><div style=\"width: 850px; overflow: scroll;\"  class=\"diagram\">    <img src=\"_STATIC_URL_/isad/images/case_study/class_seq_dia/class_1.png\" alt=\"Class diagram for LIS\">    <br>    Figure 3: A simplified class diagram for LIS</div></center><p>The &quot;LIS&quot; class consists of several modules: &quot;RegistrationManager&quot;, &quot;IssueManager&quot; &quot;ReturnManager&quot;,and &quot;PurchaseManager&quot;. Their &quot;composition&quot; relationship with &quot;LIS&quot; indicates that any of these individual modules wouldn\'t exist without the existence of &quot;LIS&quot;. The &quot;IssueManager&quot; class is responsible for issue and reissue of books while considering the two-times reissue constraint placed on a book.</p><p>The relation between &quot;IssueManager&quot; class and &quot;Book&quot; class is shown as &quot;weak dependency&quot;. This is due to the reason that the &quot;IssueManager&quot; class do not require a &quot;Book&quot; as it\'s member variable. Rather, when an user has issued a book, the concerned method in &quot;IssueManager&quot; just needs to update the status of the corresponding book. No instance of &quot;Book&quot; needs to be created. The arrow from &quot;IssueManager&quot; to &quot;Book&quot; indicates that only the former knows about the &quot;Book&quot; class.The relationship between &quot;PurchaseManager&quot; and &quot;Distributor&quot; is, however, not a weak dependency. The&quot;PurchaseManager&quot; class has a member variable of type &quot;Distributor&quot;, which keeps track of the distributor selected for the current purchase.</p><p>With the classes so identified, the code for issue book could look as follows:</p><script type=\"text/javascript\" src=\"_STATIC_URL_/isad/lib/SyntaxHighlighter/scripts/shBrushJava.js\"></script><pre class=\"brush: java;\">public ID IssueBook(ID userID, ID bookID) {    Member user = Member.GetMember(userID);    ID transactionID = null;    if ( user.canIssueNow() && Book.IsAvailable(bookID) ) {        Book.SetStatusIssued(bookID);        user.incrementIssueCount(bookID);        BookTransaction transaction = new BookTransaction(userID, bookID);                transaction.save();        transactionID = transaction.getID();    }    return transactionID;}</pre><p>The code for reissuing a book to an user could look like the following.</p><pre class=\"brush: java;\">public ID ReissueBook(ID userID, ID bookID) {    Member user = Member.GetMember(userID);    ID transactionID = null;    if ( user.canIssueNow() && Book.IsAvailable(bookID) ) {                Integer count = user.getReissueCountFor(bookID);    // # of times this books has been reissued after it\'s recent issue by the user        if ( count < REISSUE_LIMIT ) {                    user.incrementReissueCount(bookID);            BookTransaction transaction = new BookTransaction(userID, bookID);                    transaction.save();            transactionID = transaction.getID();        }    }    return transactionID;}</pre>'),(3,6,'A Library Information System for SE VLabs Institute','<p>The SE VLabs Institute has been recently setup to provide state-of-the-art research facilities in the field of Software Engineering. Apart from research scholars (students) and professors, it also includes quite a large number of employees who work on different projects undertaken by the institution.</p><p>As the size and capacity of the institute is increasing with the time, it has been proposed to develop a Library Information System (LIS) for the benefit of students and employees of the institute. LIS will enable the members to borrow a book (or return it) with ease while sitting at his desk/chamber. The system also enables a member to extend the date of his borrowing if no other booking for that particular book has been made. For the library staff, this system aids them to easily handle day-to-day book transactions. The librarian, who has administrative privileges and complete control over the system, can enter a new record into the system when a new book has been purchased, or remove a record in case any book is taken off the shelf. Any non-member is free to use this system to browse/search books online. However, issuing or returning books is restricted to valid users (members) of LIS only.</p>','<p>From the given problem we can identify at least four different functionality offered by the system:<ul>    <li>Register a new member</li>    <li>Issue book</li>    <li>Reissue book</li>    <li>Update inventory</li></ul></p><p>To begin with, let\'s consider the activity diagram for user registration, as shown in figure - 01.</p><center>    <img class=\"diagram\" src=\"_STATIC_URL_/isad/images/case_study/activity/act_registration.png\" alt=\"User Registration\">    Figure-01: Activity diagram for new user registration</center>    <p>A new user fills up the registration form for library membership (either online or in paper), and submits to the librarian.Of course, an already registered user can\'t create another account for himself (or, herself). For users\' who don\'t have an account already and have submitted their registration forms, the librarian verifies the information provided, possibly against the central database used by the institution. If all information have been provided correctly, librarian goes on with creating a new account for the user. Otherwise, the user is asked to provide all and correct information in his (her)registration form. Once a new account has been created for the user, he (she) is being issued an ID card, which is to be provided for any future transaction in the library.</p><p>Note that in the above diagram two swim lanes haven been shown indicated by the labels <i>User</i> and <i>Librarian</i>.The activities have been placed in swim lanes that correspond to the relevant role.</p><p>One of the major events that occur in any library is issue of books to it\'s members. Figure-02 tries to depict the workflow involved while issuing books.</p><center>    <img class=\"diagram\" src=\"_STATIC_URL_isad/images/case_study/activity/act_issue.png\" alt=\"User Registration\">    Figure-02: Activity diagram for issuing books</center>    <p><p></p><p>Now let\'s focus on figure-03, which shows the typical workflow of inventory update by the librarian. Note that since these are the tasks performed only by the librarian (and no one else plays a role), we skip the swim lanes.</p><center>    <img class=\"diagram\" src=\"_STATIC_URL_isad/images/case_study/activity/act_inventory_update.png\" alt=\"User Registration\">    Figure-03: Activity diagram for updating inventory</center>    <p>Addition of new books and removing records of books taken off from the shelves could be done parallely. This means, one doesn\'t have to complete the task of addition of all new books before doing any removal. Merging of these two activities and the subsequent <i>Update inventory</i> activity indicates that it is not required to complete all addition and removals before proceeding to update the database. That is, a few books could be added, then update the database, then again continue with the tasks.</p><p>Finally, the workflow terminates when all addition and removal tasks have been completed.</p>'),(4,1,'A Library Information System for SE VLabs Institute','<p>The SE VLabs Institute has been recently setup to provide state-of-the-art research facilities in the field of Software Engineering. Apart from research scholars (students) and professors, it also includes quite a large number of employees who work on different projects undertaken by the institution.</p><p>As the size and capacity of the institute is increasing with the time, it has been proposed to develop a Library Information System (LIS) for the benefit of students and employees of the institute. LIS will enable the members to borrow a book (or return it) with ease while sitting at his desk/chamber. The system also enables a member to extend the date of his borrowing if no other booking for that particular book has been made. For the library staff, this system aids them to easily handle day-to-day book transactions. The librarian, who has administrative privileges and complete control over the system, can enter a new record into the system when a new book has been purchased, or remove a record in case any book is taken off the shelf. Any non-member is free to use this system to browse/search books online. However, issuing or returning books is restricted to valid users (members) of LIS only.</p><p>The final deliverable would a web application (using the recent HTML 5), which should run only within the institute LAN. Although this reduces security risk of the software to a large extent, care should be taken no confidential information (eg., passwords) is stored in plain text. </p>','<h3>Identification of functional requirements</h3><p>The above problem statement gives a brief description of the proposed system. From the above, even without doing any deep analysis, we might easily identify some of the basic functionality of the system:<ul>  <li><strong>New user registration:</strong> Any member of the institute who wishes to avail the facilities of   the library has to register himself with the Library Information System. On successful registration, a user ID   and password would be provided to the member. He has to use this credentials for any future transaction in LIS.</li>  <li><strong>Search book:</strong> Any member of LIS can avail this facility to check whether any particular book is  present in the institute\'s library. A book could be searched by its:    <ul style=\"font-size: 1em;\">        <li style=\"font-size: 1em;\">Title</li>        <li style=\"font-size: 1em;\">Authors name</li>        <li style=\"font-size: 1em;\">Publisher\'s name</li>    </ul>  </li>  <li><strong>User login:</strong> A registered user of LIS can login to the system by providing his employee ID   and password as set by him while registering. After successful login, &quot;Home&quot; page for the user is shown from  where he can access the different functionalities of LIS: search book, issue book, return book, reissue book.  Any employee ID not registered with LIS cannot access the &quot;Home&quot; page -- a login failure message  would be shown to him, and the login dialog would appear again. This same thing happens when any registered user  types in his password wrong. However, if incorrect password has been provided for three time consecutively, the  security question for the user (specified while registering) with an input box to answer it are also shown. If  the user can answer the security question correctly, a new password would be sent to his email address. In case  the user fails to answer the security question correctly, his LIS account would be blocked. He needs to contact  with the administrator to make it active again.  </li>  <li><strong>Issue book:</strong> Any member of LIS can issue a book against his account provided that:    <ul style=\"font-size: 1em;\">        <li style=\"font-size: 1em;\">The book is available in the library i.e. could be found by searching for it in LIS</li>        <li style=\"font-size: 1em;\">No other member has currently issued the book</li>        <li style=\"font-size: 1em;\">Current user has not issued the maximum number of books that can</li>    </ul>    If the above conditions are met, the book is issued to the member.     <br>    Note that this FR would remain <strong>incomplete</strong> if the \"maximum number of books that can be issued    to a member\" is not defined. We assume that this number has been set to four for students and research scholars, and    to ten for professors.    <br>    Once a book has been successfully issued, the user account is updated to reflect the same.  </li>  <li><strong>Return book:</strong> A book is issued for a finite time, which we assume to be a period of 20 days.   That is, a book once issued should be returned within the next 20 days by the corresponding member of LIS. After   successful return of a book, the user account is updated to reflect the same.  </li>  <li><strong>Reissue book:</strong> Any member who has issued a book might find that his requirement is not over  by 20 days. In that case, he might choose to reissue the book, and get the permission to keep it for another 20  days. However, a member can reissue any book at most twice, after which he has to return it. Once   a book has been successfully reissued, the user account is updated to reflect the information.</li></ul></p><p>In a similar way we can list other functionality offered by the system as well. However, certain features might not be evident directly from the problem system, but which, nevertheless, are required. One such functionality is \"UserVerification\". The LIS should be able to judge between a registered and non-registered member. Most of the functionality would be available to a registered member. The \"New User Registration\" would, however, be available to non-members. Moreover, an already registered user shouldn\'t be allowed to register himself once again.</p><p>Having identified the (major) functional requirements, we assign an identifier to each of them <a href=\"http://www.jiludwig.com/reiber/requirements_trace.html\">[v]</a> for future reference and verification.  Following table shows the list:<center><table class=\"techno\"><caption>Table 01: Identifier and priority for software requirements</caption><thead>    <tr>        <th>#</th>        <th>Requirement</th>        <th>Priority</th>    </tr>  </thead><tbody>    <tr>        <td>R1</td>        <td>New user registration</td>        <td>High</td>    </tr>    <tr>        <td>R2</td>        <td>User Login</td>        <td>High</td>    </tr>    <tr>        <td>R3</td>        <td>Search book</td>        <td>High</td>    </tr>    <tr>        <td>R4</td>        <td>Issue book</td>        <td>High</td>    </tr>    <tr>        <td>R5</td>        <td>Return book</td>        <td>High</td>    </tr>            <tr>        <td>R6</td>        <td>Reissue book</td>        <td>Low</td>    </tr></tbody></table></center></p><h3>Identification of non-functional requirements</h3><p>Having talked about functional requirements, let\'s try to identify a few non-functional requirements.<ul>    <li><strong>Performance Requirements:</strong>        <ul style=\"font-size: 0.9em;\">            <li>This system should remain accessible 24x7</li>            <li>At least 50 users should be able to access the system altogether at any given time</li>        </ul>          </li>     <li><strong>Security Requirements:</strong>        <ul style=\"font-size: 0.9em;\">            <li>This system should be accessible only within the institute LAN</li>            <li>The database of LIS should not store any password in plain text -- a hashed value has to be stored</li>        </ul>    </li>    <li><strong>Software Quality Attributes</strong></li>    <li><strong>Database Requirements</strong></li>    <li><strong>Design Constraints:</strong>        <ul style=\"font-size: 0.9em;\">            <li>The LIS has to be developed as a web application, which should work with Firefox 5, Internet Explorer 8,            Google Chrome 12, Opera 10</li>             <li>The system should be developed using HTML 5</li>        </ul>     </li>        </ul></p><p>Once all the functional and non-functional requirements have been identified, they are documented formally in SRS,which then serves as a legal agreement.</p>'),(5,3,'A Library Information System for SE VLabs Institute','<p>The SE VLabs Institute has been recently setup to provide state-of-the-art research facilities in the field of Software Engineering. Apart from research scholars (students) and professors, it also includes quite a large number of employees who work on different projects undertaken by the institution.</p><p>As the size and capacity of the institute is increasing with the time, it has been proposed to develop a Library Information System (LIS) for the benefit of students and employees of the institute. LIS will enable the members to borrow a book (or return it) with ease while sitting at his desk/chamber. The system also enables a member to extend the date of his borrowing if no other booking for that particular book has been made. For the library staff, this system aids them to easily handle day-to-day book transactions. The librarian, who has administrative privileges and complete control over the system, can enter a new record into the system when a new book has been purchased, or remove a record in case any book is taken off the shelf. Any non-member is free to use this system to browse/search books online. However, issuing or returning books is restricted to valid users (members) of LIS only.</p><p>The final deliverable would a web application (using the recent HTML 5), which should run only within the institute LAN. Although this reduces security risk of the software to a large extent, care should be taken no confidential information (eg., passwords) is stored in plain text. </p>','<p>From the given problem statement we can identify a list of actors and use cases as shown in tables 1 & 2respectively. We assign an identifier to each use case, which we would be using to map from the software requirements identified earlier.</p><center><table class=\"techno\"><caption>Table 1: List of actors</caption><thead>    <tr>                <th>Actor</th>        <th>Description</th>    </tr>  </thead><tbody>    <tr>        <td>Member</td>        <td>Can avail LIS facilities; could be student, professor, researcher</td>    </tr>    <tr>        <td>Non-member</td>        <td>Need to register to avail LIS facilities</td>    </tr>    <tr>        <td>Librarian</td>        <td>Update inventory and other administrative tasks</td>    </tr>    <tr>        <td>Library staff</td>        <td>Handle day-to-day activities with the LIS</td>    </tr>    </tbody></table></center><p>&nbsp;</p><center>  <table class=\"techno\"><caption>Table 2: List of use cases</caption><thead>    <tr>        <th>#</th>        <th>Use Case</th>        <th>Description</th>    </tr>  </thead><tbody>    <tr>        <td>UC1</td>        <td>Register</td>        <td>Allows to register with the LIS and create an account for all transactions</td>    </tr>    <tr>        <td>UC2</td>        <td>User login</td>        <td>LIS authenticates a member to let him avail the facilities</td>    </tr>    <tr>        <td>UC3</td>        <td>Search book</td>        <td>A member can can search for a book</td>    </tr>        <tr>        <td>UC4</td>        <td>Issue book</td>        <td>Allows a member to issue a specified book against his account</td>    </tr>    <tr>        <td>UC5</td>        <td>Return book</td>        <td>To return a book, which has been issued earlier by a member</td>    </tr>    <tr>        <td>UC6</td>        <td>Reissue book</td>        <td>To reissue a book</td>    </tr>        <tr>        <td>UC7</td>        <td>User logout</td>        <td>User logs out from the system</td>    </tr></tbody></table></center><p>Before presenting the details of individual use cases, let us do a mapping from requirements specifications to use cases. A list of functional requirements can be found in the <a href=\"/isad/1/case_study/\">table 1</a>.For each such requirements, we identify the use case(s) that helps to achieve the requirement. This mapping is shown in table 3. Please note that we would be mapping only <em>functional requirements</em> into use cases. A method to deal with non-functional requirements could be found in <a href="/3/references/">[vi]</a>.</p><center><table class=\"techno\"><caption>Table 3: Mapping functional requirements to use cases</caption><thead>    <tr>        <th>FR #</th>        <th>FR Description</th>        <th>Use Case(s)</th>    </tr>  </thead><tbody>    <tr>        <td>R1</td>        <td>New user registration</td>        <td>UC1</td>            </tr>    <tr>        <td>R2</td>        <td>User login</td>        <td>UC2</td>            </tr>    <tr>        <td>R3</td>        <td>Search book</td>        <td>UC3</td>            </tr>    <tr>        <td>R4</td>        <td>Issue book</td>        <td>UC4</td>            </tr>    <tr>        <td>R5</td>        <td>Return book</td>        <td>UC5</td>            </tr>    <tr>        <td>R6</td>        <td>Reissue book</td>        <td>UC6</td>            </tr></tbody>    </table></center><p>Now let us deal with the inner details of a few use cases and the actors with whom they are associated.Table 4 shows the details of the &quot;User login&quot; use case using a template presented in table 1 in <a href="/3/references/">[v]</a>.</p><center><table class=\"techno\"><caption>Table 4: UC2 -- User login</caption><tbody>    <tr>        <td style=\"font-weight: bold;\">Use Case</td>        <td>UC2. User login</td>                 </tr>    <tr>        <td style=\"font-weight: bold;\">Description</td>        <td>Allows a member to login to the system using his user ID and password</td>                 </tr>    <tr>        <td style=\"font-weight: bold;\">Assumptions</td>        <td></td>                 </tr>    <tr>        <td style=\"font-weight: bold;\">Actors</td>        <td>            <ul>                <li>Member</li>            </ul>        </td>                 </tr>    <tr>        <td style=\"font-weight: bold;\">Steps</td>        <td>            <ol>                <li>User types in user ID</li>                <li>User types in password</li>                <li>User clicks on the \'Login\' button</li>                <li>IF successful THEN show home page                <br>ELSE display error                </li>            </ol>        </td>                 </tr>    <tr>        <td style=\"font-weight: bold;\">Variations</td>        <td></td>                 </tr>    <tr>        <td style=\"font-weight: bold;\">Non-functional</td>        <td></td>                 </tr>    <tr>        <td style=\"font-weight: bold;\">Issues</td>        <td></td>                 </tr></tbody></table></center>    <p>The above use case lets an already registered member of the LIS to login to the system and possible use it\'s various features.If the user provides a correct pair of (&lt;user_id&gt;, &lt;password&gt;) then he can access his home page. However, if login credentials are incorrect, an error message is displayed to him. Figure 1 shows its pictorial representation.<center>    <img src=\"_STATIC_URL_isad/images/case_study/use_case/user_login.png\" class=\"diagram\">    <br>    Figure 1: Use case diagram showing &quot;New user registration&quot; use case</center></p><p>The above figure also depicts extension of a use case. &quot;Answer security question&quot; is not a use case by itself, and is not invoked in a &quot;normal&quot; flow. However, when a member is trying to login, and provides incorrect (&lt;user_id&gt;, &lt;password&gt;)for three consecutive times, he is asked the security question that was set during registration. If user can answer the question correctly,the password is send to his email address. However, if the user fails to answer the security question correctly, his account is temporarily blocked. Details of the concerned use case extension is shown in table 5.</p><center><table class=\"techno\"><caption>Table 5: Extension for use case New user registration</caption><tbody>        <tr>        <td style=\"font-style: bold;\">Use Case Extension</td>        <td style=\"text-align: left;\">Answer security question <strong>extends</strong> UC2. User login</td>                 </tr>    <tr>        <td style=\"font-style: bold;\">Description</td>        <td style=\"text-align: left;\">Deals with the condition when a user has three consecutive login failures, and he attempts to login again</td>                 </tr>    <tr>        <td style=\"font-style: bold;\">Steps</td>        <td style=\"text-align: left;\">            <strong>3a.</strong> IF consecutive failure count is 3 THEN invoke &quot;Answer security question&quot;                    </td>                 </tr></tbody></table></center><p>The details of the &quot;Issue book&quot; use case is shown in table 6. </p><center><table class=\"techno\"><caption>Table 6: UC5 -- Issue book</caption><tbody>    <tr>        <td style=\"font-style: bold;\">Use Case</td>        <td>UC5. Issue book</td>                 </tr>    <tr>        <td style=\"font-style: bold;\">Description</td>        <td>Allows a member to issue a specified book against his account</td>                 </tr>    <tr>        <td style=\"font-style: bold;\">Assumptions</td>        <td>            <ol>                <li>User is logged in</li>                <li>The book is available</li>                                <li>User\'s account has not exceeded the limit of maximum books that can be issued</li>            </ol>        </td>                 </tr>    <tr>        <td style=\"font-style: bold;\">Actors</td>        <td>            <ul>                <li>Member (primary)</li>                <li>Library staff</li>            </ul>        </td>                 </tr>    <tr>        <td style=\"font-style: bold;\">Steps</td>        <td>            <ol>                <li>User logs in</li>                <li>User searches for a book</li>                <li>User clicks on &quot;Issue&quot; button to issue the book</li>                <li>User\'s account is updated</li>                <li>Library staff delivers the book</li>            </ol>                    </td>                 </tr>    <tr>        <td style=\"font-style: bold;\">Variations</td>        <td></td>                 </tr>    <tr>        <td style=\"font-style: bold;\">Non-functional</td>        <td></td>                 </tr>    <tr>        <td style=\"font-style: bold;\">Issues</td>        <td></td>                 </tr></tbody></table></center>    <p>In order to issue a book, the availability of the book has to be checked.Also, the system needs to verify whether another book could be issued to the current user.These are shown in figure 2 by the &laquo;include&raquo; relationship among the use cases. The maximum # of books that can be issued to a user depends on whether he is a student or a professor. So, &quot;Verify issue count&quot; is a general use case, which has been specialized by &quot;Verify student issue count&quot; and &quot;Verify professor issue count&quot;use cases. These have been represented by the &quot;generalization&quot; relationship in figure 2.</p><center>    <img src=\"_STATIC_URL_isad/images/case_study/use_case/issue_book.png\" class=\"diagram\">    <br>    Figure 2: Use case diagram showing &quot;Issue book&quot; use case</center><p>In the above scenario &quot;Member&quot; is the primary actor who triggers the &quot;Issue book&quot;use case. &quot;Library staff&quot; is a secondary actor here.</p>'),(6,2,'A Library Information System for SE VLabs Institute','<p>The SE VLabs Institute has been recently setup to provide state-of-the-art research facilities in the field of Software Engineering. Apart from research scholars (students) and professors, it also includes quite a large number of employees who work on different projects undertaken by the institution.</p><p>As the size and capacity of the institute is increasing with the time, it has been proposed to develop a Library Information System (LIS) for the benefit of students and employees of the institute. LIS will enable the members to borrow a book (or return it) with ease while sitting at his desk/chamber. The system also enables a member to extend the date of his borrowing if no other booking for that particular book has been made. For the library staff, this system aids them to easily handle day-to-day book transactions. The librarian, who has administrative privileges and complete control over the system, can enter a new record into the system when a new book has been purchased, or remove a record in case any book is taken off the shelf. Any non-member is free to use this system to browse/search books online. However, issuing or returning books is restricted to valid users (members) of LIS only.</p><p>The final deliverable would a web application (using the recent HTML 5), which should run only within the institute LAN. Although this reduces security risk of the software to a large extent, care should be taken no confidential information (eg., passwords) is stored in plain text. </p>','<p>The SE VLabs Institute has a IT management team of it\'s own. This team has been given the task to execute the Library Information System project.The team consists of a few experts from industry, and a batch of highly qualified engineers experienced with design and implementation of information systems. It is planned that the current project will be undertaken by a small team consisting of one expert and few engineers.Actual team composition would be determined in a later stage.</p><p>Using COCOMO and based on the team size (small) and experience (high), the concerned project could be categorized as &quot;organic&quot;. The experts, based on their prior experience, suggested that the project size could roughly be around 10 KLOC. This would serve as the basis for estimation of different project parameters using basic COCOMO, as shown below:</p><pre>    Effort = a * (KLOC)<sup>b</sup> PM    Tdev = 2.5 * (Effort)<sup>c</sup> Months</pre><p>For organic category of project the values of a, b, c are 2.4, 1.05, 0.38 respectively. So, the projected effort required for this project becomes</p><pre>    Effort = 2.4 * (10)<sup>1.05</sup> PM           = 27 PM (approx)</pre><p>So, around 27 person-months are required to complete this project. With this calculated value for effort we can also approximate the development time required:</p><pre>    Tdev = 2.5 * (27)<sup>0.38</sup> Months         = 8.7 Months (approx)</pre><p>So, the project is supposed to be complete by nine months. However, estimations using basic COCOMO are largely idealistic. Let us refine them using intermediate COCOMO. Before doing so we determine the Effort Adjustment Factor (EAF) by assigning appropriate weight to each of the following attributes.</p><table cellspacing=\"0\" cellpadding=\"0\" class=\"data\" style=\"background-color: white;\"><thead><tr><th valign=\"bottom\" rowspan=\"2\">Cost&nbsp;Drivers</th><th colspan=\"6\">Ratings</th></tr><tr><th align=\"center\" width=\"10%\" valign=\"bottom\">Very Low</th><th align=\"center\" width=\"10%\" valign=\"bottom\">Low</th><th align=\"center\" width=\"10%\" valign=\"bottom\">Nominal</th><th align=\"center\" width=\"10%\" valign=\"bottom\">High</th><th align=\"center\" width=\"10%\" valign=\"bottom\">Very High</th><th align=\"center\" width=\"10%\" valign=\"bottom\">Extra High</th></tr></thead><tbody><tr><th align=\"left\" style=\"background-color: #dddddd;\">Product&nbsp;attributes</th></tr><tr><td style=\"text-align: left;\">Required&nbsp;software&nbsp;reliability</td><td align=\"center\">0.75</td><td align=\"center\">0.88</td><td align=\"center\" style=\"background-color: yellow;\">1.00</td><td align=\"center\">1.15</td><td align=\"center\">1.40</td><td align=\"center\">&nbsp;</td></tr><tr><td style=\"text-align: left;\">Size&nbsp;of&nbsp;application&nbsp;database</td><td align=\"center\">&nbsp;</td><td align=\"center\">0.94</td><td align=\"center\" style=\"background-color: yellow;\">1.00</td><td align=\"center\">1.08</td><td align=\"center\">1.16</td><td align=\"center\">&nbsp;</td></tr><tr><td style=\"text-align: left;\">Complexity&nbsp;of&nbsp;the&nbsp;product</td><td align=\"center\">0.70</td><td align=\"center\">0.85</td><td align=\"center\" style=\"background-color: yellow;\">1.00</td><td align=\"center\">1.15</td><td align=\"center\">1.30</td><td align=\"center\">1.65</td></tr><tr><th align=\"left\" style=\"background-color: #dddddd;\">Hardware&nbsp;attributes</th></tr><tr><td style=\"text-align: left;\">Run-time&nbsp;performance&nbsp;constraints</td><td align=\"center\">&nbsp;</td><td align=\"center\">&nbsp;</td><td align=\"center\" style=\"background-color: yellow;\">1.00</td><td align=\"center\">1.11</td><td align=\"center\">1.30</td><td align=\"center\">1.66</td></tr><tr><td style=\"text-align: left;\">Memory&nbsp;constraints</td><td align=\"center\">&nbsp;</td><td align=\"center\">&nbsp;</td><td align=\"center\" style=\"background-color: yellow;\">1.00</td><td align=\"center\">1.06</td><td align=\"center\">1.21</td><td align=\"center\">1.56</td></tr><tr><td style=\"text-align: left;\">Volatility&nbsp;of&nbsp;the&nbsp;virtual&nbsp;machine&nbsp;environment</td><td align=\"center\">&nbsp;</td><td align=\"center\">0.87</td><td align=\"center\" style=\"background-color: yellow;\">1.00</td><td align=\"center\">1.15</td><td align=\"center\">1.30</td><td align=\"center\">&nbsp;</td></tr><tr><td style=\"text-align: left;\">Required&nbsp;turnabout&nbsp;time</td><td align=\"center\">&nbsp;</td><td align=\"center\">0.87</td><td align=\"center\" style=\"background-color: yellow;\">1.00</td><td align=\"center\">1.07</td><td align=\"center\">1.15</td><td align=\"center\">&nbsp;</td></tr><tr><th align=\"left\" style=\"background-color: #dddddd;\">Personnel&nbsp;attributes</th></tr><tr><td style=\"text-align: left;\">Analyst capability</td><td align=\"center\">1.46</td><td align=\"center\">1.19</td><td align=\"center\">1.00</td><td align=\"center\" style=\"background-color: yellow;\">0.86</td><td align=\"center\">0.71</td><td align=\"center\">&nbsp;</td></tr><tr><td style=\"text-align: left;\">Applications&nbsp;experience</td><td align=\"center\">1.29</td><td align=\"center\">1.13</td><td align=\"center\">1.00</td><td align=\"center\" style=\"background-color: yellow;\">0.91</td><td align=\"center\">0.82</td><td align=\"center\">&nbsp;</td></tr><tr><td style=\"text-align: left;\">Software&nbsp;engineer&nbsp;capability</td><td align=\"center\">1.42</td><td align=\"center\">1.17</td><td align=\"center\">1.00</td><td align=\"center\" style=\"background-color: yellow;\">0.86</td><td align=\"center\">0.70</td><td align=\"center\">&nbsp;</td></tr><tr><td style=\"text-align: left;\">Virtual&nbsp;machine&nbsp;experience</td><td align=\"center\">1.21</td><td align=\"center\">1.10</td><td align=\"center\" style=\"background-color: yellow;\">1.00</td><td align=\"center\">0.90</td><td align=\"center\">&nbsp;</td><td align=\"center\">&nbsp;</td></tr><tr><td style=\"text-align: left;\">Programming&nbsp;language&nbsp;experience</td><td align=\"center\">1.14</td><td align=\"center\">1.07</td><td align=\"center\">1.00</td><td align=\"center\" style=\"background-color: yellow;\">0.95</td><td align=\"center\">&nbsp;</td><td align=\"center\">&nbsp;</td></tr><tr><th align=\"left\" style=\"background-color: #dddddd;\">Project&nbsp;attributes</th></tr><tr><td style=\"text-align: left;\">Application&nbsp;of&nbsp;software&nbsp;engineering&nbsp;methods</td><td align=\"center\">1.24</td><td align=\"center\">1.10</td><td align=\"center\">1.00</td><td align=\"center\" style=\"background-color: yellow;\">0.91</td><td align=\"center\">0.82</td><td align=\"center\">&nbsp;</td></tr><tr><td style=\"text-align: left;\">Use&nbsp;of&nbsp;software&nbsp;tools</td><td align=\"center\">1.24</td><td align=\"center\">1.10</td><td align=\"center\">1.00</td><td align=\"center\" style=\"background-color: yellow;\">0.91</td><td align=\"center\">0.83</td><td align=\"center\">&nbsp;</td></tr><tr><td style=\"text-align: left;\">Required&nbsp;development&nbsp;schedule</td><td align=\"center\">1.23</td><td align=\"center\">1.08</td><td align=\"center\" style=\"background-color: yellow;\">1.00</td><td align=\"center\">1.04</td><td align=\"center\">1.10</td></tr></tbody></table><p>The cells with yellow backgrounds highlight our choice of weight for each of the cost drivers. EAF is determined by multiply ingall the chosen weights. So, we get</p><pre>    EAF = 0.53 (approx)</pre><p>Using this EAF value we refine our estimates from basic COCOMO as shown below</p>    <pre>    Effort|<sub>corrected</sub> = Effort * EAF                     = 27 * 0.53                    = 15 PM (approx)    Tdev|<sub>corrected</sub> = 2.5 * (Effort|<sub>corrected</sub>)<sup>c</sup>                  = 2.5 * (15)<sup>0.38</sup>                  = 7 months (approx)</pre><p>After refining our estimates it seems that seven months would likely be sufficient for completion of this project. This is stilla rough estimate since we have not taken the underlying components of the software into consideration. Complete COCOMO model considers such parameters to give a more realistic estimate.</p>'),(7,4,'A Library Information System for SE VLabs Institute','<p>The SE VLabs Institute has been recently setup to provide state-of-the-art research facilities in the field of Software Engineering. Apart from research scholars (students) and professors, it also includes quite a large number of employees who work on different projects undertaken by the institution.</p><p>As the size and capacity of the institute is increasing with the time, it has been proposed to develop a Library Information System (LIS) for the benefit of students and employees of the institute. LIS will enable the members to borrow a book (or return it) with ease while sitting at his desk/chamber. The system also enables a member to extend the date of his borrowing if no other booking for that particular book has been made. For the library staff, this system aids them to easily handle day-to-day book transactions. The librarian, who has administrative privileges and complete control over the system, can enter a new record into the system when a new book has been purchased, or remove a record in case any book is taken off the shelf. Any non-member is free to use this system to browse/search books online. However, issuing or returning books is restricted to valid users (members) of LIS only.</p><p>The final deliverable would a web application (using the recent HTML 5), which should run only within the institute LAN. Although this reduces security risk of the software to a large extent, care should be taken no confidential information (eg., passwords) is stored in plain text. </p>','<p>A robust database backend is essential for a high-quality information system. Database schema should be efficiently modeled, refined, and normalized. In this section we would develop a simple ER model for the Library Information System.</p><p>The first step towards ER modeling is to identify the set of relevant entities from the given problem statement. The two primary, and obvious, entity sets in this context are &quot;Member&quot; and &quot;Book&quot;. The entity set &quot;Member&quot; represents all students, professors, or employees who have registered themselves with the LIS. While registering with the LIS one has to furnish a lot of personal and professional information. This typically includes name (well, that is trivial), employee ID (roll # for students), email address,phone #, age, date of joining in this institute. The system may store some not-so-important information as well like, blood group, marital status, and so on. All these pieces of information that an user has to provide are sufficient to describe a particular member. These characteristics are the attributes of the entities belonging to the entity set &quot;Member&quot;.</p><p>It is essential for an entity to have one or more attributes that help us to distinguish it from another entity. \'Name\' can\'t help that -- two persons could have exactly the same name. However, (\'Name\', \'Phone #\')combination seems to be okay. No two persons can have the same phone number. \'Employee ID\', \'Email address\' are other potential candidates. Here, \'Employee ID\', \'Email address\' and (\'Name\', \'Phone #\') are super keys.We choose \'Employee ID\' to uniquely identify an user in our implementation. So, \'Employee ID\' becomes our primary key (PK) for the &quot;Member&quot; entity set. Figure 1 represents this set along with it\'s attributes and the primary key.</p><center>    <img src=\"_STATIC_URL_isad/images/case_study/erd/member.png\" alt=\"Member entity set\" class=\"diagram\">    <br>    Figure 1: &quot;Member&quot; entity set</center><p>Let us now focus on the &quot;Book&quot; entity set. Typical attributes of a book are it\'s title, name of author(s), publisher, date of publication, edition, language, ISBN-10, ISBN-13, price (of course!), date of purchase. The set of listed attributes for a book doesn\'t give a straight forward choice of primary key.For instance, several books could have the same title. Again, ISBN numbers for a book are specific to it\'sedition -- it can\'t distinguish between two books of the same edition. One might be tempted to use a combination of (\'Title\', \'Authors\') as a primary key. This has some shortcomings. It is advisable not to use texts as a PK. Moreover, the number of authors that a book could have is not fixed, although it is a small, finite number. The rules of normalization (not covered here) would dictate to have a separate field for each author like \'Author1\', \'Author2\', and so on. Therefore, we assign an extra attribute, \'ID\', to each book as it\'s PK. Different databases available in the market provide mechanisms to generate such an uniqueID, and automatically increment it whenever a new new entity is added. In fact, we could assign such an ID to the &quot;Member&quot; entity set as well. However, because of availability of the unique \'Employee ID\' field,we skipped that. A graphical representation of the &quot;Book&quot; entity set is shown in figure 2.</p><center>    <img src=\"_STATIC_URL_isad/images/case_study/erd/book.png\" alt=\"Book entity set\" class=\"diagram\">    <br>    Figure 2: &quot;Book&quot; entity set</center><p>One point to note here is that a book is likely to have multiple copies in the library. Therefore, one might wish to have a \'# of copies\' attribute for the &quot;Book&quot; entity set. However, that won\'t allow us to differentiate among the different copies of book bearing same title by same author(s), edition, and publisher. The approach that we have taken is to uniquely identify each book even though they are copies of the same title.</p><p>To buy any new book an order is to be placed to the distributor. This task is done by the librarian. Therefore,&quot;Librarian&quot; and &quot;Distributor&quot; are two other entities playing roles in this system.</p><p>Having identified the key entities, we could now relate them with each other. Let us consider the entity sets &quot;Member&quot;and &quot;Book&quot;. A member can issue books. In fact, he can issue multiple books up to a finite number say, N. A particular book, however, could be issued by a single member only. Therefore, we have a one-to-many mapping from &quot;Member&quot; to &quot;Book&quot; entity sets. This relationship between &quot;Member&quot;and &quot;Book&quot; entity sets is pictorially depicted in figure 3.</p><center>    <img src=\"_STATIC_URL_isad/images/case_study/erd/relationships.png\" alt=\"Relationships among entity set\" class=\"diagram\">    <br>    Figure 3: Relationships among different entity sets</center><p>Figure 3 also shows that the librarian can &quot;place order&quot;for books to the distributor. This is a many-to-many mapping since a librarian can purchase books from multiple distributors. Also, if the institute has more than one librarians (or any other staff having such authority), then each of them could place order to the same distributor. An order is termed as complete when distributor supplies the book(s) and invoice.</p><p>The design in figure 3 has a flaw. Librarian himself could be a member of the LIS. However, he is a &quot;special&quot;kind of member since he can place order for books. Our ER diagram doesn\'t reflect this scenario. Such special roles of an entity set could be represented using &quot;ISA&quot; relationship, which is not discussed here.</p><p>Any kind of designing couldn\'t be possibly done at one go. Therefore, the baseline ER model so prepared should be revised by considering the business model yet again to ensure that all necessary information could be captured.Once this has been finalized, the next logical step would be to create table structures for each identified entity set (and relationships in some cases) and normalize the relations.</p>'),(8,10,'A Library Information System for SE VLabs Institute','<p>The SE VLabs Institute has been recently setup to provide state-of-the-art research facilities in the field of Software Engineering. Apart from research scholars (students) and professors, it also includes quite a large number of employees who work on different projects undertaken by the institution.</p><p>As the size and capacity of the institute is increasing with the time, it has been proposed to develop a Library Information System (LIS) for the benefit of students and employees of the institute. LIS will enable the members to borrow a book (or return it) with ease while sitting at his desk/chamber. The system also enables a member to extend the date of his borrowing if no other booking for that particular book has been made. For the library staff, this system aids them to easily handle day-to-day book transactions. The librarian, who has administrative privileges and complete control over the system, can enter a new record into the system when a new book has been purchased, or remove a record in case any book is taken off the shelf. Any non-member is free to use this system to browse/search books online. However, issuing or returning books is restricted to valid users (members) of LIS only.</p><p>The final deliverable would a web application (using the recent HTML 5), which should run only within the institute LAN. Although this reduces security risk of the software to a large extent, care should be taken no confidential information (eg., passwords) is stored in plain text. </p>','<style type=\"text/css\">    table.techno tbody td {        text-align: left;    }    table.techno tbody td li {        font-size: 0.9em;    }</style><p>As already discussed under the theory section,test case preparation could begin right after requirements identification stage. It is desirable (and advisable) to create a Requirements Traceability Matrix (RTM)showing a mapping from individual requirement to test case(s). A simplified form of the RTM is shown in table 1 (the numbers shown in this table are arbitrary; not specific to LIS). </p><center><table class=\"techno\">    <caption>Table 1: A simplified mapping from requirements to test cases</caption>    <thead>        <tr>            <th>Requirement #</th>            <th>Test Case #</th>        </tr>    </thead>    <tbody>        <tr>            <td>R1</td>            <td>TC1</td>        </tr>        <tr>            <td>R2</td>            <td>TC2, TC3, TC4</td>        </tr>        <tr>            <td>R3</td>            <td>TC5</td>        </tr>        <tr>            <td>R4</td>            <td>TC6</td>        </tr>            </tbody></table></center><p>Table 1 states which test case should help us to verify that a specified feature has been implemented and working correctly. For instance, if test case # TC6 fails, that would indicate requirement # R4 has not fully realized yet. Note that it is possible that a particular requirement might need multiple test cases to verify whether it has been implemented correctly.</p><p>To be specific to our problem, let us see how we can design test cases to verify the &quot;UserLogin&quot; feature. The simplest scenario is when both user name and password have been typed in correctly. The outcome will be that the user could then avail all features of LIS.However, there could be multiple unsuccessful conditions:<ul>    <li>User ID is wrong</li>    <li>Password is wrong</li>    <li>User ID & password are wrong</li>    <li>Wrong password given twice consecutively</li>    <li>Wrong password given thrice consecutively</li>    <li>Wrong password given thrice consecutively, and security question answered correctly</li>    <li>Wrong password given thrice consecutively, and security question answered incorrectly</li></ul></p><p>We would create test case for the above stated login scenarios. These test cases together would constitute a test suite to verify the concerned requirement. Table 2shows the details of this test suite.</p><center><table class=\"techno\" style=\"width: 810px;\">    <caption>Table 2: A test suite to verify the &quot;User Login&quot; feature</caption>    <thead>        <tr style=\"border: 1px solid #95BCE2;\">            <th colspan=\"2\">#</th>            <th colspan=\"5\" style=\"background-color: white; color: #454545; font-size: 12.5px; text-align: left;\">TS1</th>                    </tr>        <tr style=\"border: 1px solid #95BCE2;\">            <th colspan=\"2\">Title</th>            <th colspan=\"5\" style=\"background-color: white; color: #454545; font-size: 12.5px; text-align: left;\">Verify &quot;User Login&quot; functionality</th>                    </tr>        <tr style=\"border: 1px solid #95BCE2;\">            <th colspan=\"2\">Description</th>            <th colspan=\"5\" style=\"background-color: white; color: #454545; font-size: 12.5px; text-align: left;\">To test the different scenarios that might arise while an user is trying to login</th>                    </tr>           <tr style=\"border: 1px solid #95BCE2;\">             <th colspan=\"7\" style=\"background-color: white;\"></th>        </tr>        <tr>            <th>#</th>            <th>Summary</th>            <th>Dependency</th>            <th>Pre-condition</th>            <th>Post-condition</th>            <th>Execution Steps</th>            <th>Expected Output</th>        </tr>    </thead>    <tbody>        <tr>            <td>TC1</td>            <td>Verify that user already registered with the LIS is able to login with correct user ID and password</td>            <td></td>            <td>Employee ID <em>149405</em> is a registered user of LIS; user\'s password is <em>this_is_password</em></td>            <td>User is logged in</td>            <td>                <ol>                    <li>Type in employee ID as <em>149405</em></li>                                        <li>Type in password <em>this_is_password</em></li>                        <li>Click on the \'Login\' button</li>                </ol>            </td>            <td>&quot;Home&quot; page for the user is displayed</td>        </tr>        <tr class=\"alt\">            <td>TC2</td>            <td>Verify that an unregistered user of LIS is unable to login</td>            <td></td>            <td>Employee ID <em>149405xx</em> is not a registered user of LIS</td>            <td>User is not logged in</td>            <td>                <ol>                    <li>Type in employee ID as <em>149405xx</em></li>                                        <li>Type in password <em>whatever</em></li>                        <li>Click on the \'Login\' button</li>                                </ol>            </td>            <td>The &quot;Login&quot; dialog is shown with a <em>&quot;Login failed! Check your user ID and password&quot;</em> message</td>        </tr>        <tr>            <td>TC3</td>            <td>Verify that user already registered with the LIS is unable to login with incorrect password</td>            <td></td>            <td>Employee ID <em>149405</em> is a registered user of LIS; user\'s password is <em>this_is_password</em></td>            <td>User is not logged in</td>            <td>                <ol>                    <li>Type in employee ID as <em>149405</em></li>                                        <li>Type in password <em>whatever</em></li>                    <li>Click on the \'Login\' button</li>                       </ol>            </td>            <td>The &quot;Login&quot; dialog is shown with a <em>&quot;Login failed! Check your user ID and password&quot;</em> message</td>        </tr>        <tr class=\"alt\">            <td>TC4</td>            <td>Verify that user already registered with the LIS is unable to login with incorrect password given twice consecutively</td>            <td style=\"text-align: center;\">TC3</td>            <td>This test case is executed after execution of TC3 before executing any other test case</td>            <td>User is not logged in</td>            <td>                <ol>                    <li>Type in employee ID as <em>149405</em></li>                                        <li>Type in password <em>whatever2</em></li>                                 <li>Click on the \'Login\' button</li>                                           </ol>            </td>            <td>The &quot;Login&quot; dialog is shown with a <em>&quot;Login failed! Check your user ID and password&quot;</em> message</td>        </tr>        <tr>            <td>TC5</td>            <td>Verify that user already registered with the LIS is unable to login with incorrect password given thrice consecutively</td>            <td style=\"text-align: center;\">TC4</td>            <td>This test case is executed after execution of TC4 before executing any other test case</td>            <td>User is not logged in</td>            <td>                <ol>                    <li>Type in employee ID as <em>149405</em></li>                                        <li>Type in password <em>whatever3</em></li>                                 <li>Click on the \'Login\' button</li>                                                      </ol>            </td>            <td>The &quot;Login&quot; dialog is shown with a <em>&quot;Login failed! Check your user ID and password&quot;</em> message; the security question and input box for the answer are displayed</td>        </tr>                <tr class=\"alt\">            <td>TC6</td>            <td>Verify that a registered user can login after three consecutive failures by correctly answering the security question</td>            <td style=\"text-align: center;\">TC5</td>            <td>This test case is executed after execution of TC6 before executing any other test case. Answer to the security question is <em>my_answer</em>.</td>            <td>Email sent containing new password. The email is expected to be received within 2 minute.</td>            <td>                <ol>                                        <li>Type in the answer as <em>my_answer</em></li>                    <li>Click on the \'Email Password\' button</li>                                    </ol>            </td>            <td>Login dialog is displayed; an email containing the new password is received</td>        </tr>        <tr>            <td>TC7</td>            <td>Verify that a registered user\'s account is blocked after three consecutive failures and answering the security question incorrectly</td>            <td></td>            <td>Execute the test cases TC3, TC4, and TC5 once again (in order) before executing this test case</td>            <td>User account has been blocked</td>            <td>                <ol>                                        <li>Type in the answer as <em>not_my_answer</em></li>                    <li>Click on the \'Email Password\' button</li>                                    </ol>            </td>            <td>The message <em>&quot;Your account has been blocked! Please contact the administrator.&quot;</em> appears</td>        </tr>         </tbody></table></center><p>In a similar way, test suites corresponding to other user requirements could be created as well. A good test plan can reduce the burden of testing team by specifying what exactly they should focus on. </p>'),(9,5,'A Library Information System for SE VLabs Institute','<p> The SE VLabs Institute has been recently setup to provide state-of-the-art research facilities in the field of Software Engineering. Apart from research scholars (students) and professors, it also includes quite a large number of employees who work on different projects undertaken by the institution. </p> <p> As the size and capacity of the institute is increasing with the time, it has been proposed to develop a Library Information System (LIS) for the benefit of students and employees of the institute. LIS will enable the members to borrow a book (or return it) with ease while sitting at his desk/chamber. The system also enables a member to extend the date of his borrowing if no other booking for that particular book has been made. For the library staff, this system aids them to easily handle day-to-day book transactions. The librarian, who has administrative privileges and complete control over the system, can enter a new record into the system when a new book has been purchased, or remove a record in case any book is taken off the shelf. Any non-member is free to use this system to browse/search books online. However, issuing or returning books is restricted to valid users (members) of LIS only. </p> <p> The final deliverable would a web application (using the recent HTML 5), which should run only within the institute LAN. Although this reduces security risk of the software to a large extent, care should be taken no confidential information (eg., passwords) is stored in plain text. </p>','<style type=\"text/css\">    .category {        width: 260px; padding: 5px; float: left;    }    .category div {        font-weight: bold;        font-size: 1.1em;    }</style><p>From the given problem statement we can identify the following nouns and noun phrases:</p><ul><li>The SE VLabs Institute</li><li>Software Engineering</li><li>Research scholars</li><li>Students</li><li>Professors</li><li>Employees</li><li>Projects</li><li>Institution</li><li>Library Information System</li><li>Members</li><li>Book</li><li>Desk</li><li>Chamber</li><li>System</li><li>Library staff</li><li>Librarian</li><li>Transactions</li><li>Record</li><li>Shelf</li><li>Non-member</li><li>Web application</li><li>LAN</li><li>Software</li><li>Information</li><li>Passwords</li></ul><p>Let us put the above into different categories.</p><div style=\"display: inline\">    <div class=\"category\">        <div>People</div>        <ul>            <li>Research scholars</li>            <li>Students</li>            <li>Professors</li>            <li>Employees</li>            <li>Members</li>            <li>Library staff</li>            <li>Librarian</li>            <li>Non-member</li>        </ul>    </div>    <div class=\"category\">        <div>Places</div>        <ul>            <li>Chamber</li>            </ul>    </div>    <div class=\"category\">        <div>Things</div>        <ul>                <li>Projects</li>            <li>Book</li>            <li>Desk</li>                <li>System</li>            <li>Shelf</li>            <li>LAN</li>        </ul>    </div></div><div class=\"clear\"></div><div style=\"display: inline\">    <div class=\"category\">        <div>Organizations</div>        <ul>            <li>The SE VLabs Institute</li>            <li>Institution</li>        </ul>    </div>    <div class=\"category\">        <div>Concepts</div>        <ul>            <li>Software Engineering</li>            <li>Library Information System</li>            <li>Record</li>            <li>Web application</li>            <li>Software</li>            <li>Information</li>            <li>Password</li>        </ul>    </div>    <div class=\"category\">        <div>Events</div>        <ul>            <li>Transactions</li>        </ul>    </div></div>    <div class=\"clear\"></div>   <p>The nouns and noun phrases in the problem statement gives us a list of 25 potential classes. However, all of them may not be relevant. For example, \'Chamber\' is not something related to the Library Information System. And so are \'Projects\', \'Desk\', \'Shelf\'. In a similar way, \'Software Engineering\', \'Web application\', \'Software\' doesn\'t seem to be potential classes in this context. If we filter these entries,we might find that the following set of classes directly relate to the business activities of LIS:</p><ul>    <li>Member</li>        <li>Book</li>    <li>Transaction (of books)</li>    <li>Librarian</li>    <li>Employee</li>    </ul><p>Although not explicitly mentioned in the problem statement, based on knowledge in related area one may point out few other potential classes:</p><ul>    <li>Book Inventory</li>    <li>Distributor</li>    <li>Order</li>    <li>Order Line Item</li>    <li>Payment</li>    <li>Invoice</li></ul><p>Among the classes listed above, \'Member\', \'Librarian\', \'Employee\' share some common characteristics. For instance, everyone has a name, each has got an unique ID in the institution. In fact, \'Librarian\' and \'Member\' are some specialized category of the class \'Employee\'. (This considers a student is also an &quot;employee&quot;.) The above identified conceptual classes pave the way for modeling of design and implementation classes.</p>'),(10,9,'A Library Information System for SE VLabs Institute','<p> The SE VLabs Institute has been recently setup to provide state-of-the-art research facilities in the field of Software Engineering. Apart from research scholars (students) and professors, it also includes quite a large number of employees who work on different projects undertaken by the institution. </p> <p> As the size and capacity of the institute is increasing with the time, it has been proposed to develop a Library Information System (LIS) for the benefit of students and employees of the institute. LIS will enable the members to borrow a book (or return it) with ease while sitting at his desk/chamber. The system also enables a member to extend the date of his borrowing if no other booking for that particular book has been made. For the library staff, this system aids them to easily handle day-to-day book transactions. The librarian, who has administrative privileges and complete control over the system, can enter a new record into the system when a new book has been purchased, or remove a record in case any book is taken off the shelf. Any non-member is free to use this system to browse/search books online. However, issuing or returning books is restricted to valid users (members) of LIS only. </p> <p> The final deliverable would a web application (using the recent HTML 5), which should run only within the institute LAN. Although this reduces security risk of the software to a large extent, care should be taken no confidential information (eg., passwords) is stored in plain text. </p>','<p>Let us determine the Cyclomatic complexity for the &quot;ReissueBook&quot; method as shown below:</p><script type=\"text/javascript\" src=\"_STATIC_URL_isad/lib/SyntaxHighlighter/scripts/shBrushJava.js\"></script><pre class=\"brush: java;\">public ID ReissueBook(ID userID, ID bookID) {    Member user = Member.GetMember(userID);    ID transactionID = null;    if ( user.canIssueNow() && Book.IsAvailable(bookID) ) {                Integer count = user.getReissueCountFor(bookID);    // # of times this books has been reissued after it\'s recent issue by the user        if ( count < REISSUE_LIMIT ) {                    user.incrementReissueCount(bookID);            BookTransaction transaction = new BookTransaction(userID, bookID);                    transaction.save();            transactionID = transaction.getID();        }    }    return transactionID;}</pre><p>The Control Flow Graph for the above module is shown in figure 1. The CFG has six nodes and seven edges. So, the Cyclomatic complexity is V(G) = 7 - 6 + 2 = 3.It can be verified with the other two formulae as well: # of regions + 1 = 2 + 1 = 3. Also, # of decision points = 2. So, V(G) = 2 + 1 = 3. However, as mentioned in the theory section, for methods of classes we add an extra 1 to the V(G). So, the Cyclomatic complexity of this method becomes 4, which is good.</p><center>    <img src=\"_STATIC_URL_isad/images/case_study/cfg/reissue_book.png\" alt=\"Reissue book\" class=\"diagram\">    Figure 1. CFG for &quot;ReissueBook&quot; method</center><p>Note that in line # 3 two decisions have been short-circuited. Taking this into account, V(G) for the module would become 5, which is OK. This implies that the method could have upto five linearly independent paths. By looking at figure 1 we can easily identify three such paths. However, as mentioned that line # 3 consists of two decision points, that results in another &quot;implicit&quot; path. Based on these, we can design four test cases that would result in Boolean values for this sequence { user.canIssueNow, Book.IsAvailable, count < REISSUE_LIMIT }. The four such cases are shown below:</p><ul>    <li>{ true, true, true } : Output should be a valid ID</li>    <li>{ false, true, true } : Output would be null</li>    <li>{ true, false, true } : Output would be null</li>    <li>{ true, true, false } : Output would be null</li></ul><p>Now let us focus on the &quot;IssueManager&quot; class. For simplicity, let\'s assume it has only two methods: IssueBook and ReissueBook, as shown below.</p><pre class=\"brush: java;\">public Class IssueManager {    public ID IssueBook(ID userID, ID bookID) {        Member user = Member.GetMember(userID);        ID transactionID = null;        if ( user.canIssueNow() && Book.IsAvailable(bookID) ) {            Book.SetStatusIssued(bookID);            user.incrementIssueCount(bookID);            BookTransaction transaction = new BookTransaction(userID, bookID);                    transaction.save();            transactionID = transaction.getID();        }        return transactionID;    }    public ID ReissueBook(ID userID, ID bookID) {        Member user = Member.GetMember(userID);        ID transactionID = null;        if ( user.canIssueNow() && Book.IsAvailable(bookID) ) {                    Integer count = user.getReissueCountFor(bookID);    // # of times this books has been reissued after it\'s recent issue by the user            if ( count < REISSUE_LIMIT ) {                        user.incrementReissueCount(bookID);                BookTransaction transaction = new BookTransaction(userID, bookID);                        transaction.save();                transactionID = transaction.getID();            }        }        return transactionID;    }}</pre><p>&quot;IssueBook&quot; has two decision points (<em>if</em> and <em>&&</em>). So, V(G<sub>IssueBook</sub>) = (2 + 1) + 1 = 4. We have already determined V(G<sub>ReissueBook</sub>) to be 5. So, the total Cyclomatic complexity of this class (having two methods) becomes<span class=\"contentEquation\">V(G) = (4 + 5) - 2 + 1 = 8</span></p>'),(11,8,'A Library Information System for SE VLabs Institute','<p>The SE VLabs Institute has been recently setup to provide state-of-the-art research facilities in the field of Software Engineering. Apart from research scholars (students) and professors, it also includes quite a large number of employees who work on different projects undertaken by the institution.</p><p>As the size and capacity of the institute is increasing with the time, it has been proposed to develop a Library Information System (LIS) for the benefit of students and employees of the institute. LIS will enable the members to borrow a book (or return it) with ease while sitting at his desk/chamber. The system also enables a member to extend the date of his borrowing if no other booking for that particular book has been made. For the library staff, this system aids them to easily handle day-to-day book transactions. The librarian, who has administrative privileges and complete control over the system, can enter a new record into the system when a new book has been purchased, or remove a record in case any book is taken off the shelf. Any non-member is free to use this system to browse/search books online. However, issuing or returning books is restricted to valid users (members) of LIS only.</p><p>The final deliverable would a web application, which should run only within the institute LAN. Although this reduces security risk of the software to a large extent, care should be taken no confidential information (eg., passwords) is stored in plain text. </p>','<p>Figure 1 shows the context-level DFD for LIS. The entire system is represented with a single circle (process). The external entities interacting with this system are members of LIS, library staff, librarian, and non-members of LIS. Two database are used to keep track of member information and details of books in the library.</p><p>Let us focus on the external entity, Member. In order to issue or return books a member has to login to the system. The data flow labeled with &quot;Login credentials&quot; indicate the step when a member authenticates himself by providing required information (user ID, password). The system in turn verifies the user credentials using information stored in the members database. If all information are not provided correctly, the user is shown a login failure message. Otherwise, the user can continue with his operation. Note that a DFD does not show conditional flows. It can only summarize the information flowing in and out of the system.</p><p>The data flow with the label &quot;Requested book details&quot; identify the information that the user has to provide in order to issue a book. LIS checks with the books database whether the given book is available. After a book has been issued, the transaction details is provided to the member.</p><div style=\"width: 900px; height: auto; overflow: scroll;\">    <img src=\"_STATIC_URL_isad/images/case_study/dfd/dfd_level0.png\" class=\"diagram\"></div><p>Figure 1: Context-level DFD for Library Information System</p><p>The level-1 DFD is shown in figure 2. Here, we split the top-level view of the system into multiple logical components. Each process has a name, and a dotted-decimal number in the form 1.x. For example, the process &quot;Issue book&quot; has the number 1.2, which indicates that in the level 1 DFD the concerned process is numbered 2. Other processes are numbered in a similar way.</p><div style=\"width: 900px; height: auto; overflow: scroll;\">    <img src=\"_STATIC_URL_isad/images/case_study/dfd/dfd_level1.png\" class=\"diagram\"></div><p>Figure 2: Level 1 DFD for Library Information System</p><p>Comparing figures 1 and 2 one might observe that the information flow in and out of LIS has been preserved. We observe in figure 2 that the sub-processes themselves exchange information among themselves. These information flows would be, in turn, preserved if we decompose the system into a level 2 DFD.</p><p>Finally, in order to eliminate intersecting lines and make the DFD complex, the Member external entity has been duplicated in figure 2. This is indicated by a * mark near the right-bottom corner of the entity box.</p>');
/*!40000 ALTER TABLE `isad_casestudy` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `isad_contact`
--

DROP TABLE IF EXISTS `isad_contact`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `isad_contact` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(25) NOT NULL,
  `email` varchar(75) NOT NULL,
  `website` varchar(200) DEFAULT NULL,
  `organization` varchar(25) DEFAULT NULL,
  `subject` varchar(35) NOT NULL,
  `comment` longtext NOT NULL,
  `post_date` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- NOT Dumping data for table `isad_contact`
--


--
-- Table structure for table `isad_exercise`
--

DROP TABLE IF EXISTS `isad_exercise`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `isad_exercise` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `theory_id` int(11) NOT NULL,
  `workspace_id` int(11) NOT NULL,
  `problem_id` int(11) NOT NULL,
  `problem` longtext NOT NULL,
  PRIMARY KEY (`id`),
  KEY `isad_exercise_453a65b7` (`theory_id`),
  KEY `isad_exercise_7f0f0272` (`workspace_id`),
  CONSTRAINT `theory_id_refs_id_5e9d355c` FOREIGN KEY (`theory_id`) REFERENCES `isad_theory` (`id`),
  CONSTRAINT `workspace_id_refs_id_a854d03` FOREIGN KEY (`workspace_id`) REFERENCES `isad_workspace` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=25 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `isad_exercise`
--

LOCK TABLES `isad_exercise` WRITE;
/*!40000 ALTER TABLE `isad_exercise` DISABLE KEYS */;
INSERT INTO `isad_exercise` VALUES (1,9,4,1,'<h3>Identification of basic blocks from a program and determining it\'s cyclomatic complexity</h3><p>Consider the following simple C program.</p><pre style=\"text-align: left;\" class=\"brush: c;\">// Sum of first n natural numbers (not in the best possible way though)#include &lt;stdio.h&gt;intmain(int argc, char **argv){    int i;    int sum;    int n = 10;        sum = 0;    for (i = 1; i &lt;= n; i++)        sum += i;            printf(\"Sum of first %d natural numbers is: %d\\n\", n, sum);        return 0;}</pre><p>Any sequence of instructions in a program could be represented in terms of basic blocks, and a CFG could be drawn using those basic blocks. For the given C program:</p><ol>    <li>Identify the basic blocks and verify whether your representation        matches with the output produced after compiling your program</li>    <li>Draw a Control Flow Graph (CFG) using these basic blocks. Again,        verify how the CFG generated after compilation relates to the basic        blocks identified by the compiler</li>    <li>Calculate McCabe\'s complexity from the CFG so obtained</li></ol><p>Note that <span class=\"syntax\">gcc</span> translates the high-level program into an intermediate representation using <a href=\"http://gcc.gnu.org/wiki/GIMPLE\">GIMPLE</a>. So, the CFG generated from your code would not show the actual instructions.</p><p class=\"learning-objectives\"><strong>Learning Objectives:</strong></p><ul>  <li>Identify the basic basic blocks for a given program</li>  <li>Draw a CFG using the basic blocks</li>  <li>Determination of McCabe\'s complexity from a CFG</li></ul><p class=\"limitations\"><strong>Limitations:</strong> The current workspace can generate CFGs only for the <span class=\"syntax\">main</span> function. In other words, this would not work with user-defined functions. However, in real life a program would contain several modules. All such modules have to be taken into account while determining the complexity.</p>'),(2,9,4,2,'<h3>Finding linearly independent paths from a given program</h3><p>Consider the following simple C program.</p><pre style=\"text-align: left;\" class=\"brush: c;\">// Initialize elements of a 2D array to 0#include &lt;stdio.h&gt;intmain(int argc, char **argv){    int a[5][10];    int i;    int j;    int nr;    int nc;    nr = 5;    nc = 10;        for (i = 0; i &lt;= nr; i++) {        for (j = 0; j &lt;= nc; j++) {            a[i][j] = 0;        }    }    return 0;}</pre><p><strong>Tasks:</strong></p><ol>    <li>Compile the above program to generate it\'s CFG. Verify whether        the CFG corresponds to the basic blocks</li>    <li>Identify the linearly independent paths from the CFG. The paths would        be indicated by the basic block numbers (instead of line numbers of the        actual program)</li></ol><p class=\'learning-objectives\'><strong>Learning Objectives:</strong></p><ul>  <li>Identify the linearly independent paths from a CFG</li></ul><p class=\"limitations\"><strong>Limitations:</strong> The current workspace can generate CFGs only for the <span class=\"syntax\">main</span> function. In other words, this would not work with user-defined functions. However, in real life a program would contain several modules. All such modules have to be taken into account while determining the complexity.</p>'),(3,9,4,3,'<h3>Cyclomatic complexity of binary search</h3><p>The following C program implements the binary search technique performed over an array of integers. This is an example of a non-trivial program that we often encounter in our lives.</p><pre style=\"text-align: left;\" class=\"brush: c;\">#include &lt;stdio.h&gt;intmain(int argc, char **argv){    int a[] = {2, 4, 6, 8, 10, 12, 14, 16};    int key = atoi(argv[1]);    int n = 8;    int low = 0;    int high = n - 1;    int middle;    int flag = 0;    while (low &lt;= high) {        middle = (low + high) / 2;        if (key == a[middle]) {            printf(\"Found key %d at position %d\\n\", key, middle);            flag = 1;        }        else if (key &lt; a[middle]) {            high = middle - 1;        }        else {            low = middle + 1;        }        if (flag)            break;    }    if (! flag)        printf(\"Key %d was not found!\\n\", key);    return 0;    }</pre><p>Determine the cyclomatic complexity of this program. How would you classify this program in terms of its complexity (simple, complex, unstable)?</p><p class=\"limitations\"><strong>Limitations:</strong> The current workspace can generate CFGs only for the <span class=\"syntax\">main</span> function. In other words, this would not work with user-defined functions. However, in real life a program would contain several modules. All such modules have to be taken into account while determining the complexity.</p>'),(4,3,4,1,'<h3>Draw a use case diagram for the following problem</h3><p>Consider a library, where a member can perform two operations: issue book and return it. A book is issued to a member only after verifying his credentials. Draw a use case diagram for the problem.</p><p class=\'learning-objectives\'><strong>Learning Objectives:</strong><ol><li>Identify the actors and use cases</li><li>Associate the use cases with the actors by drawing a simple use case diagram</li></ol></p><p class=\'limitations\'><strong>Limitations:</strong> While extending a use case, extension points could not be defined through this interface.</p>'),(5,3,4,2,'<h3>Draw a use case diagram for the following problem</h3><p>Consider your neighbouring travel agent from whom you can purchase flight tickets. To book a ticket you need to provide details about your journey i.e. on which date and at what time you would like to travel. You also need to provide your address. The agency has recently been modernized. So you can pay either by cash or by card. You can also cancel a booked ticket later if you decide to change your plan. In that case you need to book a new ticket again. Your agent also allows you to book a hotel along with flight ticket. While canceling a flight ticket you can also cancel hotel booking. Appropriate refund as per policy is made in case of cancellation.</p><p class=\'learning-objectives\'><strong>Learning Objectives:</strong><ol><li>Identify the use cases from a given non-trivial problem statement</li><li>Identify the primary and secondary actors for a system</li><li>Use to generalization of use cases and &laquo;include&raquo; stereotypes to prevent redundancy in the coding phase</li></ol></p><p class=\'limitations\'><strong>Limitations:</strong> While extending a use case, extension points could not be defined through this interface.</p>'),(6,2,4,1,'<p>Considering your immense expertise in software development, The Absolute Beginners Inc. has recently allotted you a mega project. The goal of the project is to create a database of all Hindi films released since 2000. The software would allow one to generate a list of top ten hit films, top ten flop films, best comedy films, and so on. Using your prior experience you have decided the approximate sizes of each module of the software as follows:</p><ul>    <li>Data entry (0.9 KDSI)</li>    <li>Data update (0.7 KDSI)</li>     <li>Query (0.9 KDSI)</li>     <li>Report generation and display (2 KDSI)</li></ul><p>Also take into consideration the following cost drivers with their ratings:</p><ul>  <li>Storage constraints (Low)</li>  <li>Experience in developing similar software (High)</li>  <li>Programming capabilities of the developers (High)</li>  <li>Application of software engineering methods (High)</li>  <li>Use of software tools (High)</li></ul><p>(All other cost drivers have nominal rating).<p><strong>Now answer the following:</strong><ul>  <li>Applying intermediate COCOMO estimate the minimum size of the team you   would require to develop this system</li>  <li>Assuming that your client would pay Rs. 50,000 per month of development,   how much would be the likely billing?</li></ul></p><p class=\'learning-objectives\'><strong>Learning Objectives:</strong><ol><li>Identify type of a project as per COCOMO</li><li>Prepare an estimate of required effort and cost</li></ol></p><p class=\'limitations\'><strong>Limitations:</strong> Values presented here are arbitrary and doesn\'t relate to real life</p><p>&nbsp;</p><p><strong>Note:</strong> The above example has been adapted from <a href=\"http://www.ifi.uzh.ch/req/courses/seminar_ws02/reports/Seminar_4.pdf\">COCOMO (Constructive Cost Model), Seminar on Software Cost Estimation WS 2002 /2003, presented by Nancy Merlo – Schett</a>.</p>'),(7,2,4,2,'<h3>Identify the unique operators and operands from the following snippet of code:</h3><p><pre style=\"text-align: left;\" class=\"brush: c;\">int main(int argc, char **argv){    int x = 10;    int y = 20;    int sum;    sum = x + y;    printf(\"Sum of %d and %d is: %d\\n\", x, y, sum);    return 0;}</pre></p>'),(8,2,4,3,'<p>The Absolute Beginners Inc. is again at your door! This time their demand is, however, simple. They have a C program, which computes the area of a circle (code shown below). They want it to be rewritten in Java.<p><pre style=\"text-align: left;\" class=\"brush: c;\">int main(int argc, char **argv){    int radius = 12.34;    printf(\"Area of the circle with radius %f is: %f\\n\", radius, area(radius));    return 0;}floatarea(float r) {    return 22 * r * r / 7;}</pre><p>Using Halstead\'s metrics estimate the effort required to recreate this program.</p><p class=\'learning-objectives\'><strong>Learning Objectives:</strong><ol>  <li>Determining estimated effort using Halstead\'s metrics</li></ol></p>'),(9,1,4,1,'<h3>Consider the problem statement for an \"Online Auction System\" to be developed:</h3><p>New users can register to the system through an online process. By registering a user agrees to abide by different pre-defined terms and conditions as specified by the system. Any registered user can access the different features of the system authorized to him / her, after he authenticates himself through the login screen. An authenticated user can put items in the system for auction. Authenticated users users can place bid for an item. Once the auction is over, the item will be sold to the user placing the maximum bid. Payments are to be made by third party payment services,which, of course, is guaranteed to be secure. The user selling the item will be responsible for it\'s shipping. If the seller thinks he\'s getting a good price, he can, however, sell the item at any point of time to the maximum bidder available. </p><p>&nbsp;</p><p class=\'learning-objectives\'><strong>Learning Objectives:</strong><ol><li>Learn about the three different aspects that have to be taken care of while writing requirements specification</li></ol></p><p class=\'limitations\'><strong>Limitations:</strong></p>'),(10,1,4,2,'<h3>Consider the problem statement for an \"Online Auction System\" to be developed:</h3><p>New users can register to the system through an online process. By registering a user agrees to abide by different pre-defined terms and conditions as specified by the system. Any registered user can access the different features of the system authorized to him / her, after he authenticates himself through the login screen. An authenticated user can put items in the system for auction. Authenticated users users can place bid for an item. Once the auction is over, the item will be sold to the user placing the maximum bid. Payments are to be made by third party payment services,which, of course, is guaranteed to be secure. The user selling the item will be responsible for it\'s shipping. If the seller thinks he\'s getting a good price, he can, however, sell the item at any point of time to the maximum bidder available. </p><p>&nbsp;</p><p class=\'learning-objectives\'><strong>Learning Objectives:</strong><ol><li>Identifying different functionaries to be obtained from a system</li></ol></p><p class=\'limitations\'><strong>Limitations:</strong> This list is in no way complete; exercise #4 would address this again</p>'),(11,1,4,3,'<h3>Consider the problem statement for an \"Online Auction System\" to be developed:</h3><p>New users can register to the system through an online process. By registering a user agrees to abide by different predefined terms and conditions as specified by the system. Any registered user can access the different features of the system authorized to him / her, after he authenticates himself through the login screen. An authenticated user can put items in the system for auction. Authenticated users users can place bid for an item. Once the auction is over, the item will be sold to the user placing the maximum bid. Payments are to be made by third party payment services,which, of course, is guaranteed to be secure. The user selling the item will be responsible for it\'s shipping. If the seller thinks he\'s getting a good price, he can, however, sell the item at any point of time to the maximum bidder available. </p><p>&nbsp;</p><p class=\'learning-objectives\'><strong>Learning Objectives:</strong><ol><li>Identifying characteristics that a system should have, but not done by the system itself</li></ol></p><p class=\'limitations\'><strong>Limitations:</strong> </p>'),(12,4,4,1,'<h3>From the following problem statement identify the possible entity sets, their attributes, and relationships. </h3><p>SE VLabs Inc. is a young company with a few departments spread across the country. As of now, the company has a strength of 200+ employees.</p><p>Each employee works in a department. While joining, a person has to provide a lot of personal and professional details including name, address, phone #, mail address, date of birth, and so on. Once all these information are furnished, a unique ID is generated for each employee. He is then assigned a department in which he will work.</p><p>There are around ten departments in the company. Unfortunately, two departments were given same names. However, departments too have ID\'s, which are unique.</p><p><strong>Note: Try to use the features of the interface provided to capture as much details as possible.</strong></p>'),(13,4,4,2,'<h3>Draw an ER diagram for the following problem:</h3><p>The latest cab services agency in the city has approached you to develop a Cab Management System for them. They would be using this software to efficiently manage and track different cabs that are operated by them.</p><p>Cabs are solely owned by the agency. They hire people in contracts to drive the cabs. A cab can be uniquely identified by,like any other vehicle in the country, its license plate. A few different categories of cars are available from different manufacturers. And a few of them are AC cars.</p><p>Cab drivers are given a identification card while joining. The ID card contains his name, permanent address, phone number,date of joining, duration of contract. Also, an unique alphanumeric code is assigned to each number. </p><p>The agency provides service from 8 AM to 8 PM. Whenever any passenger books a cab, an available cab is allocated for him.The booking receipt given to the passenger contains the car #, source and destination places. Once he reaches the destination, he signs on a duplicate copy of the receipt and gives back to the driver. Driver must submit this duplicate copy signed by the passenger at the agency for confirmation.</p><p>To evaluate their quality of service, the agency also wants a (optional) customer satisfaction survey, where passengers can provide feedback about their journey through the agency\'s website.</p><p>&nbsp;</p><p><strong>Note:</strong> This exercise is adapted from <a href="/4/references/">[ii]</a></p>'),(14,1,5,4,'<h3>Consider an \"Online Auction System\" is to be developed, which has the following characteristics:</h3><p>New users can register to the system through an online process. By registering a user agrees to abide by different pre-defined terms and conditions as specified by the system. Any registered user can access the different features of the system authorized to him / her, after he authenticates himself through the login screen. An authenticated user can put items in the system for auction. Authenticated users users can place bid for an item. Once the auction is over, the item will be sold to the user placing the maximum bid. Payments are to be made by third party payment services, which, of course, is guaranteed to be secure. The user selling the item will be responsible for it\'s shipping. If the seller thinks he\'s getting a good price, he can, however, sell the item at any point of time to the maximum bidder available. </p><p><strong>From the above specified problem statement, try to identify a list of all possible functional requirements (FRs), write them in the space below, and submit it. Describe in details about each individual FR.</strong></p><p>Note: A few of the FRs have been already listed in the previous exercise. Try to expand them, and add what new features you could find.</p>'),(15,5,4,1,'<h3>Identify the domain classes from the following problem statement</h3><p><strong>The latest cab services agency in the city has approached you to develop a Cab Management System for them. Following is the information they have given to implement the system.</strong></p><p>Mr. Bose is the boss of this agency. Cabs are solely owned by the agency. They hire drivers to drive the cabs. Most of the cabs are without AC. However, a few comes with AC.</p><p>The agency provides service from 8 AM to 8 PM. Presently the service is limited only within Kolkata. Whenever any passenger books a cab, an available cab is allocated for him. A booking receipt is given to the passenger. He is then dropped to his home, office, or wherever he wants to go. In case the place is in too interior, the passenger is dropped at the nearest landmark.</p><p>Payments are made to the drivers by cheque drawn at the local branch of At Your Risk Bank. All kind of finances required for the business are dealt with this bank. </p><p>Recently Mr. Roy, neighbour of Mr. Bose, has given a proposal to book one of the cab in the morning everyday to drop his son to school, and drop him back to home later. Few other persons in the locality have also found the plan a good one. Hence, Mr. Bose is planning to introduce this \"Drop to school\" plan also very soon.</p><p>&nbsp;</p><p class=\'learning-objectives\'><strong>Learning Objectives:</strong><ol>    <li>Identifying potential classes (and their attributes) from a given problem statement</li>    <li>Use expert knowledge on the subject matter to identify other relevant classes</li></ol></p><p class=\'limitations\'><strong>Limitations:</strong> The workspace provided is constrained to solve the current problem only. This is not a general user interface to solve <em>any</em> problem. Moreover, the classes generated at the end are some rudimentary classes and not necessarily <em>the</em> only classes possible. UML works in an iterative approach -- propose and refine. In fact, one may model the problem from a different perspective.The objective here is to provide an idea on how one should begin identifying potential candidate classes.</p>'),(16,6,4,1,'<h3>Draw a state chart diagram to graphically represent the following system</h3><p>Consider a bulb with a push down switch. The bulb initially remains off. When the switch is pushed down, the bulb is on. Again when the switch is pushed up, the bulb turns off. The life-cycle of the bulb continues in this way until it gets damaged.</p><p><strong>Think about these points:</strong><ul><li>What are the different states of the bulb?</li><li>What activities are performed in each state?</li><li>What action does make the bulb move from one state to another?</li></ul></p><p class=\'learning-objectives\'><strong>Learning Objectives:</strong><ol><li>Identifying different states of a system</li><li>Identifying activities performed in each state</li></ol></p><p class=\'limitations\'><strong>Limitations:</strong> A complex system often has sub-states, which is not covered as a part of this lab. The following interface only let you represent simple states.  Please check out the references section to know more about them.</p>'),(17,7,4,1,'<p>A web browser is a software that helps us access a resource (web page) available on the World Wide Web and identified by a URL. A web browser consists of different sub-components, which can be primarily categorized into <strong>browser rendering engine</strong>, and <strong>browser control</strong>.</p><p>The rendering engine is responsible for displaying a requested page in the web browser. The rendering engine itself is quite a complex piece of software, which knows how to display a web page based on the HTML elements present in the page, and CSS rules defined (if any). Today browsers are not only limited to displaying text and images, but can provide access to audio and video components also.</p><p>The web browser control, too, consists of several sub-components including <strong>navigation</strong>, <strong>window control</strong>, <strong>event handlers</strong>, <strong>page display</strong>. The navigation control aids users to request for web pages (resources) by specifying a URL, navigate to other resources through internal and external hyperlinks, move across pages visited earlier. Event handlers are responsible to identify the kind of activity that user is trying to do, and perform it. For example, when a user clicks on a hyperlink, event handlers identify the URL of the target resource, and delegates loading of the resource to other components. A resource that has been retrieved by the web browser is then displayed in its page display area. Window control, in association with the rendering engine, helps in controlling various aspects of page display like changing font-size, resolution, and so on, apart from resizing or closing the window.</p><p>Represent the above problem with a <strong>class diagram</strong>. In particular<ul>  <li>Represent the individual classes</li>  <li>Represent how browser rendering engine, and browser control are related to web browser class</li>  <li>Add methods that let a web browser retrieve a resource from the web server, and convince yourself</li></ul></p><p class=\'learning-objectives\'><strong>Learning Objectives:</strong><ol>  <li>Problem formulation in an object-oriented manner by identifying relevant classes</li>  <li>Modeling behaviour of classes</li>  <li>Associating different classes in the system to get meaningful work done</li></ol></p><p class=\'limitations\'><strong>Limitations:</strong> All possible features of a class diagram could not be implemented here. Also, auto-generation of code from the class diagram is not possible here.</p>'),(18,6,4,2,'<h3>Draw an activity diagram to graphically represent the following workflow</h3><p>Let us consider the development activities of SE Virtual Labs. The process begins by checking out the code from Subversion repository. Necessary modifications are then made to the checked out code (local copy). Once the developer is done with his changes, the application has to be tested to verify whether the new functionality are working fine. This test has to be performed with two of the more popular web browsers: Firefox and Internet Explorer,  to support cross-browser accessibility. If testing fails in at least one of the two browser, developer goes back to his code, and fixes it. Only when all the browsers pass the test, a patch is generated from the local copy, and applied to the production code. The local copy is then committed resulting in update of the SVN repository. Note that, if the local copy is committed before generating a patch file, then local changes would get registered, and one won\'t be further able to generate the patch file.</p><p>Note: For further clarification, at any point of time there exists three versions of the source code: Production copy, local copy, and copy in SVN repository.</p><p><strong>Think over the following questions:</strong></p><ul>  <li>How would you represent testing of the application with multiple browsers?</li>  <li>Can generation of the patch file and update the Subversion repository be done concurrently?</li>  <li>Can patching the production code and updating the Subversion repository be done in parallel?</li></ul><p class=\'learning-objectives\'><strong>Learning Objectives:</strong></p><ul>  <li>Identify the basic units of work, and visualize the work flow</li>  <li>Identify activities that could be done in parallel</li>  <li>Identify stages from where progress could be made only after a list of criteria is satisfied</li></ul><p class=\'limitations\'><strong>Limitations:</strong> The objective of this system is to provide knowledge on the fundamental aspects of activity diagrams. As such, it lacks certain features as listed below, which a dedicated UML Diagram editor should have. </p><ul>    <li>This system lets you represent at most five parallel activities</li>    <li>Nested decisions could not be taken here, which might be quite essential in complex workflows</li>    <li>A decision could not be taken immediately after a merge point</li>    <li>Nested activity diagrams have not been implemented</li></ul>'),(20,10,4,1,'<h3>Design a test suite for the following problem</h3><p>The Absolute Beginners Inc. seems to have been fascinated by your work. Recently they have entrusted you with a task of writing a web-based mathematical software (using JavaScript). As part of this software, your team mate has written a small module, which computes area of simple geometric shapes. A portion of the module is shown below.</p><pre class=\"brush: js;\">function square(side) { return side * side }function rectangle(side1, side2) { return side1 * side1; }function circle(radius) { return Math.PI * radius * radius; }function right_triangle(base, height) { return 1 / 2 * base * height; }</pre><p>Prepare a test suite that will<ul>    <li>Verify each of the above mentioned individual function is working correctly</li></ul></p><p>Your task essentially is to verify whether each of the above function is returning correct values for given inputs. For example, a rectangle with length 10 unit and breadth 5 unit will have an area of 50 sq. unit. This can be verified from the output of the function call</p><pre class=\"brush: js;\">rectangle(10, 5);</pre><p>However, testing also attempts to point out possible bugs in the software. How would the above code behave for a call</p><pre class=\"brush: js;\">rectangle(10, -5);</pre><p>Modify the code to address this defect.<ul>    <li>In each function, return -1 if any given dimension is negative</li>    <li>Modify the test suite such that it reflects desired performance for both correct and incorrect input(s)</li>    <li>The code has another bug -- how would you identify it <b>from testing results</b>? Fix the bug and test it again.</li></ul></p><p class=\'learning-objectives\'><strong>Learning Objectives:</strong><ol>    <li>Get familiarized with unit testing</li>    <li>Verify implementation of functional requirements by writing test cases</li>    <li>Analyze results of testing to ascertain the current state of a project</li></ol></p><p class=\'limitations\'><strong>Limitations:</strong> This workspace attempts to provide a very simple version of a testing framework.Real life testing frameworks are much more extensive and provide a lot of options like creating test cases from user requirements, automatic reporting of bug when a test case fails, and so on. Nevertheless, this workspace is expected to make a student familiar to testing and some of it\'s templates and reports.</p>'),(21,7,4,2,'<p>How would you represent the three-way handshaking mechanism of TCP with a sequence diagram?</p><p class=\'learning-objectives\'><strong>Learning Objectives:</strong><ul>  <li>Identify objects playing a role in the concerned events</li>  <li>Arrange events in tme sequence of their execution</li>  <li>Use of synchronous message and response</li></ul></p><p class=\'limitations\'><strong>Limitations:</strong> Only simple sequence diagrams could be represented in this experiment. One can\'t depict alternate flows or loops. Lifeline activation / deactivation / destroy couldn\'t be represented here.</p>'),(22,7,4,3,'<p>The Web traditionally worked in a client-server model, where a web browser would send a HTTP request to the web server, and the server would send back a HTTP response to the browser. The HTTP request actually encapsulates the contents of the requested resource in some format. In cases where access to a resource isrestricted or say, it requires a user authentication, the HTTP request encapsulates the login credentials and sends to the server. The server then checks with the database server if the credentials are correct.The status of verification is then send back to the browser.</p><p>In the recent years there has been a shift from the traditional way of how HTTP works. A new technique has been proposed, popularly know as <a href=\"http://adaptivepath.com/ideas/ajax-new-approach-web-applications\">AJAX</a>, that lets asynchronous communication between a browser and web server. In traditional model, the browser used to send a HTTP request, and then wait for a HTTP response. The next HTTP request was usually sent after getting response from the server. </p><p>AJAX, however, lets a web browser to send multiple HTTP requests one after another, without waiting until a response is received. This approach is found to be very helpful in cases when contents of only a portion of the web page has to be updated, rather than refreshing the entire page. Web 2.0 uses AJAX in many different cases for better user experience.</p><p>From the above problem statement<ol>  <li>How would you represent the traditional Web with a sequence diagram (in both cases when user verification   is required or not)</li>  <li>What changes would appear in your sequence diagram if you are trying model a scenario where AJAX   is being used?</li></ol></p><p class=\'learning-objectives\'><strong>Learning Objectives:</strong><ul>  <li>Arranging activities in a logical sequence of their execution</li>  <li>Use of asynchronous messages</li></ul></p><p class=\'limitations\'><strong>Limitations:</strong> Only simple sequence diagrams could be represented in this experiment. One can\'t depict alternate flows or loops. Lifeline activation / deactivation / destroy couldn\'t be represented here.</p>'),(23,8,4,1,'<p>Draw a context-level DFD to depict the typical user authentication process used by any system. An user gives two inputs -- user name and password.</p>'),(24,8,4,2,'<h3>DFD for a Social Networking site</h3><p>The Absolute Beginners Inc. is planning to launch a revolutionary social networking site, EyeCopy. You have been entrusted with designing a DFD for the proposed application. In particular, you have been asked to show the following scenarios:<ul>  <li>User registration</li>  <li>User login</li>  <li>Profile update</li></ul></p><p>Draw a Level 1 DFD to depict the above data flow and the corresponding processes. Should there be any data store in the DFD?</p>');
/*!40000 ALTER TABLE `isad_exercise` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `isad_inlineworkspace`
--

DROP TABLE IF EXISTS `isad_inlineworkspace`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `isad_inlineworkspace` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `theory_id` int(11) NOT NULL,
  `problem_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `isad_inlineworkspace_453a65b7` (`theory_id`),
  CONSTRAINT `theory_id_refs_id_216b9515` FOREIGN KEY (`theory_id`) REFERENCES `isad_theory` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `isad_inlineworkspace`
--

LOCK TABLES `isad_inlineworkspace` WRITE;
/*!40000 ALTER TABLE `isad_inlineworkspace` DISABLE KEYS */;
/*!40000 ALTER TABLE `isad_inlineworkspace` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `isad_note`
--

DROP TABLE IF EXISTS `isad_note`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `isad_note` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `theory_id` int(11) NOT NULL,
  `content` longtext,
  PRIMARY KEY (`id`),
  KEY `isad_note_453a65b7` (`theory_id`),
  CONSTRAINT `theory_id_refs_id_22a6ecfa` FOREIGN KEY (`theory_id`) REFERENCES `isad_theory` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `isad_note`
--

LOCK TABLES `isad_note` WRITE;
/*!40000 ALTER TABLE `isad_note` DISABLE KEYS */;
/*!40000 ALTER TABLE `isad_note` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `isad_postanswer`
--

DROP TABLE IF EXISTS `isad_postanswer`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `isad_postanswer` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `exercise_id` int(11) NOT NULL,
  `answer` longtext NOT NULL,
  `email` varchar(75) NOT NULL,
  `comment` longtext,
  `post_date` datetime NOT NULL,
  `has_replied` tinyint(1) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `isad_postanswer_2799bae2` (`exercise_id`),
  CONSTRAINT `exercise_id_refs_id_32bb3eeb` FOREIGN KEY (`exercise_id`) REFERENCES `isad_exercise` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=211 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `isad_postanswer`
--

LOCK TABLES `isad_postanswer` WRITE;
/*!40000 ALTER TABLE `isad_postanswer` DISABLE KEYS */;
INSERT INTO `isad_postanswer` VALUES (1,14,'http://en.wikipedia.org/wiki/File:Explosion.svg','barun.saha04@gmail.com','','2011-03-04 00:06:45',1),(209,14,'New users can register to the system through an online process','barun.saha04@gmail.com','','2011-03-16 00:21:09',0),(210,14,'fsdfsdfsdfsfsfsfsfsdfsfsdf','barun.saha04@gmail.com','','2011-05-05 23:41:49',0);
/*!40000 ALTER TABLE `isad_postanswer` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `isad_procedure`
--

DROP TABLE IF EXISTS `isad_procedure`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `isad_procedure` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `theory_id` int(11) NOT NULL,
  `content` longtext,
  PRIMARY KEY (`id`),
  KEY `isad_procedure_453a65b7` (`theory_id`),
  CONSTRAINT `theory_id_refs_id_68de089e` FOREIGN KEY (`theory_id`) REFERENCES `isad_theory` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `isad_procedure`
--

LOCK TABLES `isad_procedure` WRITE;
/*!40000 ALTER TABLE `isad_procedure` DISABLE KEYS */;
INSERT INTO `isad_procedure` VALUES (1,1,'<ol><li>From the given problem statement, try to figure out if there\'s any inconsistency with the requirement specification</li><li>Also, try to determine what are the functional and non-functional requirements are</li><li>Select the check boxes accordingly, and then click on the \'Submit\' button</li></ol>'),(2,2,'<ol><li>The left hand side of the \'Exercises\' page will present the problem</li><li>The right hand side of the page asks to evaluate certain parameters</li><li>The values of the parameters are to be typed in in the adjoining text boxes</li><li>If all the values entered are correct, then the solution is correct. Otherwise user will be indicated where the error has occurred.</li></ol>'),(3,3,'<ol><li>Identify an actor, and write its name in the left textbox of <strong>\'Table #1\'</strong>. Click the adjacent <strong>\'Add\'</strong> button to add this actor. Repeat this for all the possible actors.</li><li>Identify a use case, and write its name in the left textbox of <strong>\'Table #2\'</strong>. Click the adjacent <strong>\'Add\'</strong> button to add this use case. Repeat this for all the possible use cases.</li><li>If you want to delete any actor or use case, go to the <strong>\'Table #4\'</strong>, remove the actor or use case.</li><li><strong>\'Table #3\'</strong> lets you define relationships between any two components. Select the first actor/use case from the first dropdown list, the second from the third drop down list. Select one relationship from the second dropdown list. If you want to put any label to the relation, write the text for the label to the adjacent textbox. Click on the <strong>\'Add\'</strong> button at the right side to add this relation. Repeat this for all the possible relations.</li><li>Relationships so defined will be displayed in the <strong>\'Table #5\'</strong>. Here, you have the option to remove a wrongly defined relationship.</li><li>Click on the <strong>\'Draw\'</strong> button to draw the Use Case diagram. You can click on this button at any time to reflect the changes that you have made to the actors, use cases, or relationships. The Use Case diagram will be displayed at the bottom of the page.</li><li>To view a sample solution for the exercise, click on the <strong>\'Submit\'</strong> button, and then on the <strong>\'View Solution\'</strong> button.</li><li>Also, when your solution is not exactly right, you will get a <strong>\'View Solution\'</strong> button to view the solution.</li></ol><p>&nbsp;</p><p><div id=\"note\" class=\"note\"><ol><li>Give the name of actors and use cases in <strong>\'Table #1\'</strong> and <strong> \'Table #2\'</strong> respectively by using alphabets, numerics and white-space only.</li><li>Write the text of the label for relationships in <strong>\'Table #3\'</strong> using  alphabets, numerics and white-space only.</li><li>After updating your inputs click <strong>\'Draw\'</strong> button to see your last updated diagram.</li></ol></div>'),(7,4,'<ol><li>Identify an entity, and write its name in the left textbox of <strong>\'Table #1\'</strong>. <strong>\'Tick\'</strong> the adjacent checkbox in case it is a weak entity. Click the adjacent <strong>\'Add\'</strong> button to add this entity. Repeat this for all the possible entities.</li><li>From <strong>\'Table #2\'</strong>, select one entity and add its possible attributes. If the attribute is a primary key or a member of composite primary key for the entity, select the check box under <strong>\'Primary key\'</strong> heading.</li><li>If you want to delete/modify any attribute for an entity, go to <strong>Table #4</strong>, remove the attribute, and then add the correct one for the selected entity. You can even remove an entity also from this table.</li><li><strong>Table #3</strong> lets you define relationships between any two entities along with the relationship cardinality. Select the first entity from the first dropdown list, the second from the second dropdown list, write in the relationship name in the text box, select the cardinality from the third drop down list, and click on the <strong>\'Add\'</strong> button at the right side.</li><li> Relationships so defined will be displayed in <strong>Table #5</strong>. Here, you have the option to remove a wrongly defined relationship.</li><li>Click on the <strong>\'Draw\'</strong> button to draw the ER diagram. You can click on this button at any time to reflect the changes that you have made to the entities, attributes, or relationships. The ER diagram will be displayed at the bottom of the page.</li><li>To view a sample solution  for the exercise, click on the <strong>\'Submit\'</strong> button, and then on the <strong>\'View Solution\'</strong> button.</ol><p>&nbsp;</p><p><div id=\"note\" class=\"note\"><ol><li>Give the name of entities, attributes and relationships by using alphabets numerics and underscore only .</li><li>After updating your inputs click <strong>\'Draw\'</strong> button to see your last updated diagram.</li></ol></div>'),(8,5,'<ol><li>Identify a noun or noun phrase, and write it in the left textbox of <strong>Table #1</strong>. Click the adjacent <strong>\'Add\'</strong> button to add this noun or noun phrase. Repeat this until all the nouns and noun phrases are taken from the problem statement.</li><li>If you want to delete any noun phrase, you can do it from the left list of <strong>Table #2</strong>.</li><li> In <strong>Table #2</strong>, we will categorize the nouns which are taken as Potential objects in our solution.</li><li><strong>\'Tick\' </strong> the adjacent checkbox of a potential object in the left-list of <strong>Table #2</strong>. Select a category from the middle drop down list. Click the adjacent <strong>\'Add\'</strong> button to group the object under the selected category. Repeat this until all the potential objects are properly categorized.</li><li>All the potential objects under their selected category are shown in <strong>Table #3</strong>. </li><li><strong>Table #4</strong> lets you assign attributes to the objects. Select one object from the left drop down list. <strong> \'Tick\'</strong> adjacent check boxes you want to assign to the selected object from the given attribute list. Click the adjacent <strong>\'Add\'</strong> button to assign those attributes to the selected object .</li><li>You may add your own attribute from <strong>Table #5</strong> to the attribute list of <strong>Table #4</strong> if it is required.</li><li>If you want to remove/modify an attribute what you have added, you can do it from the attribute list of <strong>Table #4</strong>.</li><li><strong>Table #6</strong> shows all the objects with its related attributes.</li><li>If you want to remove/modify any attribute/object shown in <strong>Table #6</strong>, you can do it easily from the same table and can re-insert the elements accordingly.</li><li><strong>Table #7</strong> is to define the classes based on common attributes it may have. Tick adjacent check boxes you want to have in a class from the left attribute list of <strong>Table #7</strong>. Give a class name in the middle textbox. Click the adjacent <strong> \'Add\'</strong> button.</li><li><strong>Table #8</strong> shows all the classes based on some common attributes which are taken from <strong>Table #7</strong>.</li><li>If you want to remove/modify any attribute/class shown in <strong>Table #8</strong>, you can do it easily from the same table and can re-insert the elements accordingly.</li><li>You are allowed to decide some classes on basis of your knowledge gaining through your work with the related problem domain. In left textbox of <strong>Table #9</strong> you just write the class name. Click <strong> \'Add\'</strong> to take that class in our solution.</li><li>Click <strong> \'Top Level Classes\'</strong> button to get all the top level classes to be generated for our problem statement. </li><li><strong>Table #10</strong> shown you all the domain classes for the given problem statement.</li></ol><p>&nbsp;</p><p><div id=\"note\" class=\"note\"><ol><li>Give the name of attributes and classes by using alphabets numeric and whitespace only .</li><li>After updating your inputs click <strong> \'Top Level Classes\'</strong> button to get solution shown in <strong>Table#10</strong>.</li></ol></div>'),(9,6,'    <h3>Steps for Drawing Statechart Diagrams</h3><p></p><ol>    <li><strong>Add states:</strong> Identify the possible states of the system and add them through <strong>table #1</strong>. Type in the state name in the text box, and then press the <strong>\'Add\'</strong> button. The new state will be shown in a new row in <strong>table #4</strong>. The new state will also get added to all the drop down lists in the workspace that indicates state.</li>    <li><strong>Internal activities of a state</strong> can be added through <strong>table #2</strong>. Select the desired state from the first drop down list, select an action label from the second drop down list, type in the action expression, and then click on the <strong>\'Add\'</strong> button. The <strong>\'Activities\'</strong> column in <strong>table #4</strong> for the selected state would get updated accordingly.</li>    <li><strong>Add state transitions:</strong> Go to <strong>table #5</strong> to specify state transitions. Select the current state from the first drop down list and next state from the second drop down list. In the text box under the <strong>\'Event\'</strong> column type in the which event is causing the state transition. Similarly, type in the <strong>\'Guard Condition\'</strong> and <strong>\'Action\'</strong> in the text boxes under the respective columns. <strong>Table #6</strong> will display the newly added state transition.</li>    <li><strong>[Optional]</strong> A note could be attached to any state through <strong>table #3</strong>. Please select the state from the first drop down list in the table, type in the text of the note, select a position of the note (to be displayed in the UML diagram), and click on the <strong>\'Add\'</strong> button.</li>    <li>Finally, click on the <strong>\'Draw\'</strong> button to generate the UML diagram as per your specifications.</li>    </ol>    <p></p><div class=\"note\" id=\"note\">The UML diagram could be generated at any point of time provided the constraints imposed by the workspace are met. Thus, you can add more states, details of a state, state transitions, and then click on the <strong>\'Draw\'</strong> button to reflect the changes. Also, any state or transition that has been wrongly specified could be removed from tables #4 and #6.</div><h3>Steps for Drawing Activity Diagrams</h3><p></p><ol>  <li>In <strong>table #1</strong>, type in name of the activity in the text box, and click on the <strong>\'Add\'</strong> button. The new activity would get added into all the drop down lists (that indicate an activity) appearing in the subsequent tables.</li>  <li>To define a flow from one activity to another, go to <strong>table #2</strong>, select the current and next activities from the first two drop down lists in the table, specify a (optional) guard condition, and click on the <strong>\'Add\'</strong> button. The transition would appear as a new row in <strong>table #3</strong>.</li>  <li><strong>Parallel Activities</strong> (either forking or joining) could be specified through <strong>table #4</strong>. The <strong>first</strong> row of this table allows creation of parallel activities, while the <strong>second</strong> row enables merging.   <ul>    <li style=\"font-size: 1em;\">The <strong>third</strong> column indicates the <strong>\'Synchronization Bar\'</strong>, and the drop down list under this column shows all synchronization points. A new point could be added by clicking on the <strong>green coloured add button</strong> beside this drop down list.</li>    <li style=\"font-size: 1em;\">To create a set of parallel activities, select the current activity from the first drop down list in the first row. Now select a synchronization point from the drop down list in the third column. Next, from the five drop down lists under the <strong>\'Following Activity(ies)\'</strong> column, select <strong>at least two</strong> unique activities. Then click on the <strong>\'Add\'</strong> button to create the parallel activities. They would appear in a new row in <strong>table #5</strong>.</li>    <li style=\"font-size: 1em;\">To join a set of parallel activities, select <strong>at least two</strong> unique activities from the five drop down lists in the second row of the table. Select a join point from the <strong>\'Synchronization Bar\'</strong> drop down list. Select the activity which should be performed after merging from the single drop down list under the <strong>\'Following Activity(ies)\'</strong> column, and then click on the <strong>\'Add\'</strong> button. A new row would get inserted in <strong>table #5</strong> showing these inputs.</li>  </ul>  </li>  <li><strong>Activities performed conditionally:</strong> Select the current activity in <strong>table #6</strong> after which a decision is to be taken. The condition to check is to be typed in the first text box under the second column of the table. The three radio buttons just below this text box are for identifying what should be done if the condition is <strong>True</strong>. A similar set of three radio buttons appear at the bottom under the <strong>ELSE</strong> block to specify whether an activity should be performed, or should fork to multiple activities, or should join, if the condition is <strong>False</strong>. Click on the <strong>\'Add\'</strong> button to add this conditional flow. A new row would be added in <strong>table #7</strong> reflecting the new entries.</li></ol><p></p><div class=\"note\" id=\"note\"><ul>  <li style=\"font-size: 1em;\">Names are used for different synchronization bars only to uniquely identify (and work with) them to generate the UML diagram. They are not required as per standard UML specifications.</li>  <li style=\"font-size: 1em;\">Please select different synchronization points for fork and join.</li>  <li style=\"font-size: 1em;\">The UML diagram could be generated at any point of time provided the constraints imposed by the workspace are met by clicking on the <strong>\'Draw\'</strong> button</li></ul></div>'),(11,7,'<h3>Steps for Drawing Class Diagram</h3><p><ol> <li>Read the problem statement carefully and choose the work space specified for class diagram. </li><li>Identify a class, and write its name in the left textbox of <strong> \'Table #1\'</strong>. Click the adjacent <strong> \'Add\'</strong> button to add this class. Repeat this for all the possible classes. </li><li>You may add attributes to a class from <strong> \'Table #2\'</strong>. Select a class from the left drop down list of <strong> \'Table  #2\'</strong>. Identify an attribute, and write its name in the next textbox of <strong> \'Table #2\'</strong> and select the attribute type from the next drop down list. Click the adjacent <strong> \'Add\'</strong> button to add this attribute. Repeat this for all attributes of all classes. </li><li>You may add operations to a class from <strong> \'Table #3\'</strong>. Select a class from the left drop down list of <strong> \'Table #3\'</strong>. Identify an operation, and write its name in the next textbox of <strong> \'Table #3\'</strong> and select its return type from the next drop down list. Click the adjacent <strong> \'Add\'</strong> button to add this operation. Repeat this for all operations of all classes. </li><li>The list of attributes and operations along with their respective classes are shown in <strong> \'Table #6\'</strong>.If you want to delete any class, attribute or operation, you may delete it from here. </li><li> <strong> \'Table #4\'</strong> lets you define inheritance relationship between any two classes. Select one sub-class from the left drop down list, select its super-class from the next dropdown list. Click the adjacent <strong> \'Add\'</strong> button to add this inheritance relation. Repeat this for all inheritance relationships that you find for the system. </li><li>If you want to delete any inheritance relation, go to the <strong> \'Table #7\'</strong>, remove the sub-class or super-class. </li><li> <strong> \'Table #5\'</strong> lets you define association relationships between any two classes. Select the first class name from the first dropdown list, the second from the fifth (right most) drop down list. Select one association type from the second dropdown list. If you want to put any name to the association, write the text for the name to the second textbox. If you wish to give role name to any one or both end of association then you write the name in first or third or in both text boxes. Click on the <strong>\'Add\' </strong> button at the right side to add this association. Repeat this for all the possible associations. </li><li>Associations so defined will be displayed in the <strong> \'Table #8\'</strong>. Here, you have the option to remove a wrongly defined associations. </li><li>Click on the <strong> ‘Draw’</strong> button to draw the class diagram. You can click on this button at any time to reflect the changes that you have made to the classes or relationships. The class diagram will be displayed at the bottom of the page. </li><li>To view a sample solution for the exercise, click on the <strong>\'Submit\'</strong> button, and then on the <strong>\'View Solution\'</strong> button.</li> </ol></p><h3>Steps for Drawing Sequence Diagram</h3><p><ol><li>Read the problem statement carefully and choose the work space specified for Sequence diagram. </li><li>Identify an object that will appear on top portion of the diagram, and write its name in the left textbox of <strong> \'Table #1\'</strong>. Click the adjacent <strong> \'Add\'</strong> button to add this object. Repeat this for all the possible objects. </li><li> <strong> \'Table #2\'</strong> lets you define messages between any two objects. Select the sender object from the first dropdown list, the receiver from the third drop down list. Select one message type  from the second dropdown list. Write the text for the message name to the adjacent textbox. Click on the <strong>\'Add\' </strong> button at the right side to add this message passing. Repeat this for all the possible messages passed from one object to another. </li></ol></p><p>&nbsp;</p><p><div id=\"note\" class=\"note\"><ol><li> For the exercise of  class diagram, give the name of classes in <strong>\'Table #1\'</strong> by using alphabets only.</li><li>For the exercise of class diagram, give the name of any attributes in <strong>\'Table #2\'</strong> by using alphabets only. </li><li>For the exercise of class diagram, give the name of any operations in <strong>\'Table #3\'</strong> by using alphabets only. </li><li>After updating your inputs click <strong>\'Draw\'</strong> button to see your last updated diagram. </li></ol></div></p>'),(12,10,'<p>    <ol>        <li>Type in the code (in JavaScript) to be tested in the text area below the header <strong>&quot;Code&quot;</strong></li>        <li>Once the code is ready, click on the <strong>&quot;Create test suite&quot;</strong> just below the code area. A small dialog box will appear just below            the button.</li>        <li>Add a title and summary for the test suite to be created. (Both are optional.) When done, click on the <strong>&quot;Add</strong>&quot; button. If this            test suite is not supposed to be added, click on the <strong>&quot;Cancel</strong>&quot; link.</li>        <li>After clicking on the <strong>&quot;Add</strong>&quot; button from the previous step, a dialog will display the new test suite. Every test suite is             identified with a unique ID: an (auto-incrementing) integer prefixed with &quot;TS&quot;. The first test suite will have the ID <strong>&quot;TS0            </strong>&quot;, and so on.</li>        <li>An already added test suite could be removed by clicking on the <strong>&quot;Remove</strong>&quot; link</li>        <li>Once a test suite has been created, click on the <strong>&quot;Add test cases</strong>&quot; button to add the test cases individually</li>        <li>After clicking on the <strong>&quot;Add test cases</strong>&quot; button a spreadsheet-type dialog will appear just below the button. The spreadsheet has            six columns:            <ol style=\"font-size: 1em;\">                <li style=\"font-size: 1em;\"><strong>Summary:</strong> A brief description of the test case (mandatory)</li>                <li style=\"font-size: 1em;\"><strong>Script:</strong> A (JavaScript) function to be called for execution (mandatory) </li>                <li style=\"font-size: 1em;\"><strong>Expected Output:</strong> The value the above function call is expected to return (mandatory) </li>                <li style=\"font-size: 1em;\"><strong>Actual Output:</strong> The value actually obtained after making the function call. This column would be populated automatically after the                     test suite is executed.</li>                <li style=\"font-size: 1em;\"><strong>Manual Testing:</strong> Certain test cases could not be checked automatically. For example, a testing framework may not verify that an HTML                     element <i>X</i> is not overlapping with another HTML element <i>Y</i>. In such cases, manual intervention is required. To specify that a test case                    would  be executed manually, select the <strong>&quot;Yes&quot;</strong> check box under this column.</li>                <li style=\"font-size: 1em;\"><strong>Status:</strong> Indicates the status of a test case after it is executed. Possible values are:                     <ul>                        <li style=\"font-size: 1em;\"><strong>No Run:</strong> The test suite has not been executed yet or the test case has been set for <strong>Manual Testing</strong>)</li>                        <li style=\"font-size: 1em;\"><strong>Pass:</strong> The concerned test case\'s expected and actual values are same</li>                        <li style=\"font-size: 1em;\"><strong>Fail:</strong> The concerned test case\'s expected and actual values are NOT same</li>                    </ul>                </li>                        </ol>         </li>         <li>The number of columns in the spreadsheet are fixed (six). The number of initial rows are 10. New rows could, however, be added by pressing <strong><i>Enter             </i></strong> while the last column of the last row is being selected.</li>         <li><strong>NOTE:</strong> Summary of a test case IS mandatory for every test case in the test suite. If a particular test case has no summary, the concerned            test case, and all other subsequent test cases, would be ignored!</li>         <li>Once test cases have been written, click on the <strong>&quot;Execute test suite&quot;</strong> button to execute the test cases for the concerned test            suite. Please note that this may not execute <i>all</i> the test cases in the test suite if the constraints as mentioned in the previous step are not met.            Also, any test case set for <strong>Manual testing</strong> would be skipped.</li>         <li>Results of execution of the test suite would appear just below the <strong>&quot;Execute test suite&quot;</strong> button. If all the test cases of the test            suite have passed (i.e. values under <strong>Expected Output</strong> column is same as under <strong>Actual Output</strong> column for each row), the             background colour of the results dialog would be green. Otherwise, it would be red.</li>    </ol></p><p>    <div class=\"note\" id=\"note\">    <ul>      <li style=\"font-size: 1em;\">This interface allows testing of only JavaScript based code; other languages are not supported</li>      <li style=\"font-size: 1em;\">Real-life testing frameworks provide a lot of other options, which could not be accommodated here. The basic objective is       to present a student with the look and feel of a simple testing framework.</li>          </div></p>'),(13,8,'<ol><li>Identify an external entity, and write it in the left textbox of <strong>‘Table #1’</strong>. Click the adjacent <strong>\'Add\'</strong> button to add this external entity. Repeat this for all the possible external entity.</li><li>Identify a process, and write its name in the left textbox of <strong>\'Table #2\'</strong> and put the level of that process in the next textbox of <strong>\'Table #2\'</strong>. Click the adjacent <strong>\'Add\'</strong> button to add this process. Repeat this for all the possible processes.</li><li>Identify a data store, and write its name in the left textbox of <strong>\'Table #3\'</strong>. Click the adjacent <strong>\'Add\'</strong> button to add this data store. Repeat this for all the possible data stores.</li><li>If the respective table flashes with green, then it means your entry is taken to the system and you can check it in <strong>\'Table #5\'</strong>. If it flashes with red, then it means your entry is not taken to the system and you are requested to follow the messages generated by the system in each time. <li>If you want to delete any external entity, process or data store, remove it from <strong>\'Table #5\'</strong>.</li><li><strong>\'Table #4\'</strong> lets you define the data-flows in between the components in a data flow diagram. Select the type of components from the first dropdown list, the second type from the third drop down list (4th column in the table). Select one component from the second and the other from the fourth (5th column in the table) dropdown lists which are participating in a data-flow. You need to put the label of the data-flow and write the text for the label to the adjacent textbox. Click on the <strong>\'Add\'</strong> button at the right side to add this data flow. Repeat this for all the possible entries.</li><li>Data-flows so defined will be displayed in the <strong>\'Table #6\'</strong>. Here, you have the option to remove a wrongly defined flow.</li><li>Click on the <strong>\'Draw\'</strong> button to draw the Data Flow diagram. You can click on this button at any time to reflect the changes that you have made to the external entities, processes, data stores or data-flows. The Data Flow diagram will be displayed at the bottom of the page.</li><li>To view a sample solution for the exercise, click on the <strong>\'Submit\'</strong> button, and then on the <strong>\'View Solution\'</strong> button.</li></ol><p>&nbsp;</p><p><div id=\"note\" class=\"note\"><ol><li>Follow all the messages generated by the system if it appears.</li><li>After updating your inputs click <strong>\'Draw\'</strong> button to see your last updated diagram.</li></ol></div>'),(14,9,'<p><strong>Generating Control Flow Graph with gcc</strong></p><p>This experiment uses <span class=\"syntax\">gcc</span> to compile C programs. The<span class=\"syntax\">gcc</span> compiler provides numerous switches to control the operation. We make use of two such switches, <span class=\"syntax\">-fdump-tree-vcg</span> and<span class=\"syntax\">-fdump-tree-cfg</span> for our purpose.</p><p>As an example, consider the following simple C program:</p><pre style=\"text-align: left;\" class=\"brush: c;\">#include &lt;stdio.h&gt;intmain(int argc, char **argv){		int n = 10;	printf(\"Value of n: %d\\n\", n);	return 0;}</pre><p>If we compile the above program (stored in a file with name say, test.c) in the following way:<span class=\"syntax\">gcc -c -fdump-tree-vcg -fdump-tree-cfg test.c</span>it generates three files: test.o, test.c.013t.cfg and test.c.006t.vcg. The first file contains the object code. The second file, test.c.013t.cfg, containsthe basic blocks as identified by the compiler:</p><pre>;; Function main (main)Merging blocks 2 and 3main (int argc, char * * argv){  int n;  int D.1705;  const char * restrict D.1704;&lt;bb 2&gt;:  n = 10;  D.1704 = (const char * restrict) \"Value of n: %d\\n\";  printf (D.1704, n);  D.1705 = 0;  return D.1705;}</pre><p>Contents of the third file, test.c.006t.vcg, gives graph representation of the corresponding CFG:</p><pre>graph: { title: \"main\"node: { title: \"ENTRY\" label: \"ENTRY\" }node: { title: \"EXIT\" label: \"EXIT\" }edge: { sourcename: \"ENTRY\" targetname: \"2\" linestyle: solid priority: 100 }node: { title: \"2\" label: \"#2\\ngimple_assign (-1)\\ngimple_assign (-1)\"}edge: { sourcename: \"2\" targetname: \"3\" priority: 100 linestyle: solid }node: { title: \"3\" label: \"#3\\ngimple_return (0)\\ngimple_return (0)\"}edge: { sourcename: \"3\" targetname: \"EXIT\" priority: 100 linestyle: solid }}</pre><p>The following image shows a graphical representation of the above:<img src=\"_STATIC_URL_isad/images/procedure/simple_cfg.png\"    alt=\"CFG of the above program\" class=\"diagram\"></p><p>Note that the graph string does not contain our original variables from the program. Instead <span class=\"syntax\">gcc</span> translates the high-level program into an intermediate representation using <a href=\"http://gcc.gnu.org/wiki/GIMPLE\">GIMPLE</a>. However, the CFG drawn isas per the basic blocks identified by <span class=\"syntax\">gcc</span>.</p><p>Following are the steps to work on the exercises for this experiment:</p><ul>    <li>Write the C program in the given code area. This program should be a        valid C program. Otherwise, the compilation would fail.</li>    <li>Click on the &quot;Compile program&quot; button to invoke gcc with the        above discussed switches.</li>    <li>If the code is not syntactically correct, any error thrown during        compilation would appear in the area below the button</li>    <li>If compilation is successful, the basic blocks and the CFG corresponding        to the program would be shown near the bottom of the page</li>    <li>To verify your solution, click on the &quot;Submit&quot; button        below the problem statement. This would move you to the bottom of the        page. Next click on the View Solution&quot; button to display the        solution.</li></ul><div id=\"note\" class=\"note\">In case a given C program contains one or more user-defined functions, a graph for each such function would be generated. However, here we would restrict to the <span class=\"syntax\">main</span> function only. While we note that in real life one has to consider all the sub modules, our objective here is to make the students familiar with the concept of basic blocks and cyclomatic complexity.</div>');
/*!40000 ALTER TABLE `isad_procedure` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `isad_reference`
--

DROP TABLE IF EXISTS `isad_reference`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `isad_reference` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `theory_id` int(11) NOT NULL,
  `url` varchar(200) DEFAULT NULL,
  `url_desc` longtext,
  `book_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `isad_reference_453a65b7` (`theory_id`),
  KEY `isad_reference_752eb95b` (`book_id`),
  CONSTRAINT `book_id_refs_id_18398064` FOREIGN KEY (`book_id`) REFERENCES `isad_book` (`id`),
  CONSTRAINT `theory_id_refs_id_42b9256` FOREIGN KEY (`theory_id`) REFERENCES `isad_theory` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=85 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `isad_reference`
--

LOCK TABLES `isad_reference` WRITE;
/*!40000 ALTER TABLE `isad_reference` DISABLE KEYS */;
INSERT INTO `isad_reference` VALUES (1,9,'','',1),(2,9,'','',2),(3,9,'','',3),(4,9,'http://hissa.nist.gov/HHRFdata/Artifacts/ITLdoc/235/chapter2.htm','Structured Testing: A Testing Methodology Using the Cyclomatic Complexity Metric',NULL),(6,2,'','',3),(8,2,'http://en.wikipedia.org/wiki/COCOMO','COCOMO',NULL),(9,2,'http://en.wikipedia.org/wiki/Halstead_complexity_measures','Halstead complexity measures',NULL),(10,2,'http://www.ifi.uzh.ch/req/courses/seminar_ws02/reports/Seminar_4.pdf','COCOMO (Constructive Cost Model), Seminar on Software Cost Estimation WS 2002 / 2003,    presented by Nancy Merlo – Schett',NULL),(12,1,'http://nptel.iitm.ac.in/courses/Webcourse-contents/IISc-BANG/System%20Analysis%20and%20Design/New_index1.html','Lecture on \"System Analysis and Design\", NPTEL',NULL),(13,1,'','',4),(14,1,'','',3),(15,1,'http://www.processimpact.com/articles/telepathy.html','When Telepathy Won’t Do: Requirements Engineering Key Practices',NULL),(16,1,'http://www.outsource2india.com/software/RequirementAnalysis.asp','Requirements Analysis: Process of requirements gathering and requirement definition',NULL),(17,3,'','',5),(18,3,'','',6),(19,3,'http://www.uml-diagrams.org/use-case-diagrams.html','Use Case Diagrams',NULL),(20,3,'http://en.wikipedia.org/wiki/Use_case_diagram','Use case diagram -- Wikipedia',NULL),(21,3,'http://www.omg.org/spec/UML/2.1.2/Superstructure/PDF','Unified Modeling Language, Superstructure, V2.1.2',NULL),(22,2,'http://www.virtualmachinery.com/sidebar2.htm','The Halstead metrics',NULL),(23,4,'http://www.inf.unibz.it/~franconi/teaching/2000/ct481/er-modelling/','Entity-relationship modelling',NULL),(24,4,'','',7),(25,4,'http://db.grussell.org/section005.html','Entity Relationship Modelling - 2',NULL),(26,5,'http://www.scribd.com/doc/44970803/Domain-Analysis','Domain Analysis',NULL),(27,5,'http://www.sa-depot.com/?p=336','Domain Analysis Using Textual Analysis Approach ',NULL),(28,5,'http://en.wikipedia.org/wiki/Domain_model','Domain model',NULL),(29,5,'','',8),(30,5,'','',3),(31,5,'http://www.ecst.csuchico.edu/~broggio/8.DomainModeling(B027).ppt','Business Modeling – The Domain Model',NULL),(32,6,'http://www.agilemodeling.com/artifacts/stateMachineDiagram.htm','UML 2 State Machine Diagrams',NULL),(33,6,'http://www.omg.org/news/meetings/workshops/RT_2002_Workshop_Presentations/02-1_Douglass_Modeling_Behavior_with_UML_Interactions_and_Statecharts.pdf','Modeling Behavior with UML Interactions and Statecharts',NULL),(34,6,'http://www.agilemodeling.com/style/stateChartDiagram.htm','UML 2 State Machine Diagramming Guidelines',NULL),(35,6,'http://santos.cis.ksu.edu/771-Distribution/Reading/uml-section3.73-94.pdf','Statechart Diagram',NULL),(36,6,'http://plantuml.sourceforge.net/index.html','PlantUML (Open-Source tool in Java to draw UML Diagram)',NULL),(37,6,'http://plantuml.sourceforge.net/state.html','PlantUML : State Diagram',NULL),(38,6,'http://en.wikipedia.org/wiki/Activity_diagram','Activity Diagram',NULL),(39,6,'http://www.tutorialspoint.com/uml/uml_activity_diagram.htm','UML Activity Diagram',NULL),(40,6,'http://www.agilemodeling.com/artifacts/activityDiagram.htm','UML 2 Activity Diagrams',NULL),(41,6,'http://www.uml-diagrams.org/activity-diagrams.html','Activity Diagrams',NULL),(42,1,'http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=720574&userType=inst','IEEE Recommended Practice for Software Requirements Specifications',NULL),(43,10,'','',3),(44,10,'http://en.wikipedia.org/wiki/IEEE_829','Standards for software test documentation',1),(45,10,'http://www.junit.org/','JUnit frameworks',NULL),(46,10,'http://seleniumhq.org/','Selenium frameworks',NULL),(47,10,'http://shrivv.com/Technicle/QA_HP_Tutorial.pdf','HP Quality Center Tutorial',NULL),(48,10,'https://jazz.net/help-dev/clm/index.jsp?topic=%2Fcom.ibm.rational.test.qm.doc%2Ftopics%2Fc_testcase_overview.html','IBM Rational Software information Center',NULL),(49,3,'http://www.bredemeyer.com/pdf_files/functreq.pdf','\"Functional Requirements and Use Cases\", Ruth Malan and Dana Bredemeyer, Bredemeyer Consulting',NULL),(50,3,'http://www.bredemeyer.com/pdf_files/use_case.pdf','\"A Use Case Template: draft for discussion\", Derek Coleman, Hewlett-Packard Software Initiative',NULL),(51,3,'http://ieeexplore.ieee.org/ielx5/5445539/5445587/05445616.pdf?tp=&arnumber=5445616&isnumber=5445587','X. J. Zheng, X. Liu, & S. Liu. (2010). Use Case and Non-functional Scenario Template-Based Approach to Identify Aspects. Computer Engineering and Applications ICCEA 2010 Second International Conference on (Vol. 2, pp. 89-93)',NULL),(52,3,'http://publib.boulder.ibm.com/infocenter/rtnlhelp/v6r0m0/index.jsp?topic=%2Fcom.ibm.xtools.modeler.doc%2Ftopics%2Fcextend.html','Extend relationships',NULL),(53,1,'http://www.jiludwig.com/reiber/requirements_trace.html','Requirements Trace-ability and Use Cases',NULL),(54,3,'http://www.jiludwig.com/reiber/requirements_trace.html','Requirements Trace-ability and Use Cases',NULL),(55,3,'http://www.andrew.cmu.edu/course/90-754/umlucdfaq.html','UML Use Case Diagrams: Tips and FAQ',NULL),(56,2,'','',2),(57,2,'http://nptel.iitm.ac.in/courses/Webcourse-contents/IIT%20Kharagpur/Soft%20Engg/New_index1.html','Software Engineering, National Program on Technology Enhanced Learning',NULL),(58,2,'http://www.verifysoft.com/en_halstead_metrics.html','Halstead Metrics, Verifysoft Technology',NULL),(59,10,'http://www.doqs.com/pdf/DOQSTestPlanning.pdf','Developing Test Plans',NULL),(60,5,'http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.94.1778&rep=rep1&type=pdf&ei=_5KtTqPLN8XMrQeZltG7DA&usg=AFQjCNFVBf-jL2ZUfyuldbJmjST1zFsrig&sig2=HRfe_1TUy4Q9UB66xduKtw&cad=rja','I. Y. Song, K. Yano, J. Trujillo, and S. Luján-Mora. \"A Taxonomic Class Modeling Methodology for Object-Oriented Analysis\", In Information Modeling Methods and Methodologies, Advanced Topics in Databases Series, Ed. (J Krostige, T. Halpin, K. Siau), Idea Group Publishing, 2004, pp. 216-240.',NULL),(61,7,'http://en.wikipedia.org/wiki/Class_diagram','Class diagram',NULL),(62,7,'http://www.objectmentor.com/resources/articles/umlClassDiagrams.pdf','UML Tutorial: Part 1 -- Class Diagrams',NULL),(64,9,'https://engineering.purdue.edu/~milind/ece573/2011spring/lecture-11.pdf','Control flow graphs and loop optimizations - Purdue Engineering',NULL),(65,9,'http://www.cs.wright.edu/~tkprasad/courses/cs781/L31CFA.pdf','Control Flow Analysis',NULL),(66,9,'http://www.cs.arizona.edu/~collberg/Teaching/453/2009/Handouts/Handout-15.pdf','Basic Blocks and Flow Graphs',NULL),(67,9,'','',9),(68,9,'http://lecturer.ukdw.ac.id/willysr/rpl2-ti/measuring_complexity.pdf','Measuring Structures (Complexity)',NULL),(69,9,'http://dl.acm.org/citation.cfm?id=807712','Thomas J. McCabe, \"A Complexity Measure,\" in Proceedings of the 2nd International Conference on Software Engineering (ICSE \'76). IEEE Computer Society Press, Los Alamitos, CA, USA, 407-, 1976.',NULL),(70,9,'http://www.sei.cmu.edu/reports/97hb001.pdf','\"C4 Software Technology Reference Guide\", Software Engineering Institute (SEI)',NULL),(71,9,'http://onjava.com/onjava/2004/06/16/ccunittest.html','Cyclomatic Complexity',NULL),(72,9,'http://www.aivosto.com/project/help/pm-complexity.html','Complexity Metrics',NULL),(73,9,'http://dl.acm.org/citation.cfm?id=631131','S. R. Chidamber and C. F. Kemerer, \"A Metrics Suite for Object Oriented Design,\" in IEEE Trans. Softw. Eng. 20, 6, 476-493. Jun 1994.',NULL),(74,9,'http://leepoint.net/notes-java/principles_and_practices/complexity/complexity-java-method.html','Java: Method Cyclomatic Complexity',NULL),(75,9,'http://www.jot.fm/issues/issue_2005_11/article1/','M. Genero, M Piattini, and C. Calero: “A Survey of Metrics for UML Class Diagrams,” in Journal of Object Technology, vol. 4, no. 9, November-December 2005, pp. 59-92.',NULL),(76,7,'','',3),(77,8,'','',2),(78,7,'http://www.docstoc.com/docs/33368785/The-UML','Synchronous messages The UML',NULL),(79,7,'http://www.tracemodeler.com/articles/a_quick_introduction_to_uml_sequence_diagrams/','Asynchronous message , UML sequence diagram',NULL),(80,7,'','',10),(81,8,'http://nptel.iitm.ac.in/courses/Webcourse-contents/IISc-BANG/System%20Analysis%20and%20Design/pdf/Lecture_Notes/LNm5.pdf','NPTEL course material - System Analysis and Design',NULL),(82,8,'/8/simulation/','Software Engineering Virtual Lab - Simulation',NULL),(83,8,'/8/case_study/','Software Engineering Virtual Lab - Case Study',NULL),(84,8,'','',3);
/*!40000 ALTER TABLE `isad_reference` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `isad_selfevaluation`
--

DROP TABLE IF EXISTS `isad_selfevaluation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `isad_selfevaluation` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `theory_id` int(11) NOT NULL,
  `question_num` int(11) NOT NULL,
  `question` longtext NOT NULL,
  `option1` varchar(100) NOT NULL,
  `option2` varchar(100) NOT NULL,
  `option3` varchar(100) DEFAULT NULL,
  `option4` varchar(100) DEFAULT NULL,
  `answer` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `isad_selfevaluation_453a65b7` (`theory_id`),
  CONSTRAINT `theory_id_refs_id_4c303a0` FOREIGN KEY (`theory_id`) REFERENCES `isad_theory` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=69 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `isad_selfevaluation`
--

LOCK TABLES `isad_selfevaluation` WRITE;
/*!40000 ALTER TABLE `isad_selfevaluation` DISABLE KEYS */;
INSERT INTO `isad_selfevaluation` VALUES (2,9,2,'A set of paths are said to be linearly independent if','Each of them is distinct','No paths have a common node','No two paths have a common node','All the paths are pairwise distinct',1),(3,9,1,'What does CFG of a program describe?','Sequence of function calls','Sequence of statements executed','Contents of the stack','There\'s nothing called CFG!',2),(4,9,3,'According to McCabe\'s Cyclomatic complexity, V(G) = E - N + 2. Here, N is','No. of statements in the program','No. of unique operators used','No. of nodes in the CFG','No. of edges in the CFG',3),(5,2,1,'According to the COCOMO model, a project can be categorized into','3 types','5 types','5 types','No such categorization',1),(6,2,2,'In Intermediate COCOMO model, Effort Adjustment Factor (EAF) is derived from the effort multipliers by','Adding them','Multiplying them','Taking their weighted average','Considering their maximum',2),(7,2,3,'Project metrics are estimated during which phase?','Feasibility study','Planning','Design','Development',2),(8,3,1,'What does a use case diagram represent?','A set of actions','Time sequence of statements executed','How to use a particular module','Dont know',1),(9,2,4,'According to Halsetad\'s metrics, program length is given by the ','Sum of total number of operators and operands','Sum of number of unique operators and operands','Total number of operators','Total number of operands',1),(10,2,5,'Complete COCOMO considers a software as a','Homogeneous system','Heterogeneous system','','',2),(12,1,2,'A good requirement specification is one, which is','Consistent','Complete','Unambiguous','All of the above',4),(13,1,4,'Functional requirements of a system are related to','Using the system (by users) to get some meaningful work done','How the system functions under different constraints','Whether they adhere to the organization policies','',1),(14,3,2,'In a use case diagram, relationships between different actors are normally shown','True','False','','',2),(15,3,3,'Generalization relationship exists between two use cases when','A use case derives from a base use case','A use case derives from a base use case and specializes some of its inherited functionality','A use case includes functionality of another use case','No two use cases can be related',2),(16,3,4,'A college has an online Library Management System. Who\'s the primary actor here?','Librarian','Director of the college','Teacher','Student',4),(17,3,5,'Use cases can be used for testing, which includes','Validation','Verification','Both','None',3),(18,1,3,'Requirement specification is done','After requirements are determined','Before requirements are determined','Simultaneously with requirements determination','Independent of requirements determination',1),(19,1,1,'When is feasibility study done?','After requirements specifications have been finalized','During the period when requirements specifications are prepared','Before the final requirements specifications are done','Could be done at eny time',3),(20,1,5,'SRS refers to','Software Requirements Specification','System Resources Statement','Statement of Reliability of System','Standard Requirements Statement',1),(21,1,6,'The main objective behind preparing a SRS  is to','Let client and developers agree that they understand each other','Formally note down the requirements ','Estimate the cost of development','To judge whether the project could be undertaken',1),(22,4,1,'Entity Relationship model is used to represent the database at a ','Logical level','Physical level','','',1),(23,4,2,'In ER model an entity is usually related to another entity. The relationship is indicated by a','Rectangle','Ellipse','Triangle','Diamond',4),(24,4,3,'An entity set could be related to itself','True','False','','',1),(25,4,4,'A prime attributes is indicated by','Underline inside an ellipse','Double ellipse','Dotted ellipse','Dotted rectangle',1),(26,4,5,'Students study in schools -- this is a','1:1 mapping','1:N mapping','M:1 mapping','M:N mapping',3),(27,5,1,'Domain Object Model is used to ','Build concept','Build the databases','Construct the logical operations','',1),(28,5,2,'Classes contain the same type objects – here the same type means','Coming from the same sources','They are of same data type','They are using the same attributes and methods','',3),(29,5,3,'List of potential objects can be made from a narrative problem statement by marking the','Verbs from the problem statement','Adjective from the problem statement','Nouns from the problem statement','None of the above',3),(30,5,4,'All the potential objects we get by using noun method must be into the scope of solution space','True','False','','',2),(31,5,5,'My pet, Jimmy is ','A specialization of class Pet','An instance of class Pet','None of the above','',2),(32,6,1,'What does an entry action of a state indicate?','Action performed after the system moves into the given state','Action performed before system moves into the given state','An optional action performed when system moves into the given state','None of the above',1),(33,6,2,'What does the guard condition depicted over the transition between any two states indicate?','A condition that must be true for the transition to happen','A condition that must be false for the transition to occur','An indicator that this transition should not happen','An event that might happen as result of the transition',1),(34,6,3,'A state can contain one or more sub-state(s) within it','True','False','','',1),(35,6,4,'What does forking of several activities from a synchronization point indicate?','All those activities should get executed one after another','The activities can be performed in parallel','One or more activities could be skipped','',2),(36,5,5,'What does merging of parallel activities indicate?','At least one of the acitivities should be completed before doing the next activity','At most one activity could be left over before proceeding with the next activity','All the parallel activities must be completed before performing the next activity','None of the above',3),(37,6,5,'A decision point in an activity diagram is a control where','Multiple parallel activities merge','Decision is taken whether a transition should happen','A condition is checked and decided which activity should be performed next','There is no such control',3),(38,10,1,'Software testing is the process of','Demonstrating that errors are not present','Establishing confidence that a program does what it is supposed to do','Executing a program to show that it is working as per specifications','Executing a program with the intent of finding errors',4),(39,10,2,'Alpha testing is done by','Customer','Tester','Developer','All of the above',3),(40,10,3,'Test suite is','Set of test cases','Set of inputs','Set of outputs','None of the above',1),(41,10,4,'Regression testing is primarily related to ','Functional testing','Data flow testing','Development testing','Maintenance testing',4),(42,10,5,'Acceptance testing is done by','Developers','Customers','Testers','All of the above',2),(43,10,6,'Testing the software is basically','Verification','Validation','Verification and Validation','None of the above',3),(44,10,7,'Functionality of a software is tested by','White box testing','Black box testing','Regression testing','None of the above',2),(45,10,8,'Top down approach is used for','Development','Identification of faults','Validation','Functional testing',2),(46,10,9,'Testing of software with actual data and in the actual environment is called','Alpha testing','Beta testing','Regression testing','None of the above',2),(47,10,10,'During the development phase, which of the following testing approach is not adopted','Unit testing','Bottom up testing','Integration testing','Acceptance testing',4),(48,10,11,'Beta testing is carried out by','Users','Developers','Testers','All of the above',1),(49,10,12,'Equivalence class partitioning is related to','Structural testing','Black box testing','Mutation testing','All of the above',2),(50,10,13,'During the software validation:','Process is checked','Product is checked','Developers\' performance is evaluated','The customer checks the product',4),(51,10,14,'Software mistakes during coding are known as:','Failures','Ddefects','Bbugs','Errors',3),(52,10,15,'Which is not a functional testing technique ?','Boundary value analysis','Decission table','Regression testing','None of the above',3),(53,7,1,'A class is a','Blueprint','Specific instance of an object','Category of user requirement','None of the above',1),(54,7,2,'In class diagrams, a class is represented with a','Rectangle','Human stick figure','Ellipse','Diamond',1),(55,7,3,'From a class diagram it is evident that','All classes work in isolation','Each class is related with every other class','Most of the classes are related','Class diagram show object interactions',3),(56,7,4,'Inheritance among classes are represented by a','Solid line from the extending to the extended class','Line with an unfilled arrow head from the extending to the extended class','Line with a filled diamond from the extending to the extended class','Dotted line with extend stereotype from the extending to the extended class',2),(57,7,5,'Private members (or methods) in a class are indicated with a','Hash (#) sign','Minus (-) sign','Plus (+) sign','Tilde (~) sign',2),(58,7,6,'What does a sequence diagram represent?','Workflow in the system','How classes are related to each other','Sequence of events flow to achieve a target','Sequence of activities to be performed before moving to next state',3),(59,7,7,'In UML 2.0 a synchronous message is represented with a','Solid arrow with filled arrowhead','Solid arrow with empty arrowhead','Dotted arrow with filled arrowhead','Dotted arrow with empty arrowhead',1),(61,7,9,'An object can send a synchronous message and multiple asynchronous message in parallel','True','False','','',1),(62,7,10,'In context of Web, which of the following represent an asynchronous message passing?','HTTP GET request','HTTP POST request','AJAX calls','All of the above',3),(63,2,6,'Consider you are developing a web application, which would make use of a lot of web services provided by Facebook, Google, Flickr. Would it be wise to make estimates for this project using COCOMO?','Yes, of course','Not at all','','',2),(64,8,1,'A DFD represents','Flow of control','Flow of data','Both the above','Neither one',2),(65,8,2,'Which is not a component of a DFD?','Data flow','Decision','Process','Data store',2),(66,8,3,'How many processes are present in level-0 or context diagram?','0','1','2','3',2),(67,8,4,'External entities can appear in a DFD','At any level','Only at level-0','Only at level-1','Either at level-0 or at level-1',2),(68,8,5,'Data flow in a DFD is not possible in between','Two processes','Data store and process','External entity and data store','Process and external entity',3);
/*!40000 ALTER TABLE `isad_selfevaluation` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `isad_simulation`
--

DROP TABLE IF EXISTS `isad_simulation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `isad_simulation` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `theory_id` int(11) NOT NULL,
  `problem` longtext NOT NULL,
  `video_url` varchar(120) DEFAULT NULL,
  `discussion` longtext,
  `type` varchar(6) NOT NULL,
  `html_inline` varchar(120) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `isad_simulation_453a65b7` (`theory_id`),
  CONSTRAINT `theory_id_refs_id_3f2745a5` FOREIGN KEY (`theory_id`) REFERENCES `isad_theory` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `isad_simulation`
--

LOCK TABLES `isad_simulation` WRITE;
/*!40000 ALTER TABLE `isad_simulation` DISABLE KEYS */;
INSERT INTO `isad_simulation` VALUES (1,9,'<h2>Code for GCD computation by Euclid\'s method</h2><pre style=\"text-align: left;\" class=\"brush: c;\">while (x != y) {      if (x &gt; y)             x = x - y;      else             y = y - x; }return x;</pre>','cfg1_gcd.swf','<h2>Determining McCabe\'s Cyclomatic Complexity</h2>                                                               <p><strong>Method #1</strong><br /> N = No. of nodes = 7 <br /> E = No. of edges = 8 <br /> V(G) = E - N + 2 = 8 - 7 + 2 = 3 <br />     </p>                                    <p> <strong>Method #2</strong> <br />                                         V(G) = Total no. of non overlapping areas + 1 = 2 + 1 = 3<br /> </p>                                  <p> <strong>Method #3</strong> V(G) = Total no. of decision statements and loops + 1 = 1 + 1 + 1 = 3<br /> </p>                                  ','flash',''),(2,2,'<h2>Using Basic COCOMO model to estimate project parameters</h2><p>Use the simulator on the right hand side to understand how project type and size affects the different parameters estimated.</p><p><em>Quick glance at the formulae:</em></p><ul><li><strong>Effort</strong>: a * (Size)<sup>b</sup> person-month</li><li><strong>Time for development</strong>: 2.5 * (Effort)<sup>c</sup> month</li></ul><p>Drag the slider to change the project size. Note: select the nearest discrete value corresponding to the actual size.</p>','','<p>As evident from the simulation parameters, size of a semi-detached project is larger than that of an organic project, and size of an embedded project is larger than that of a semi-detached, and thereby affecting factors like effort and development time.</p>','html',''),(3,3,'<h2>From the following problem statement, identify the actors and use cases</h2><p>An automated teller machine (ATM) lets customers to withdraw cash anytime from anywhere without requiring involvement of any banking clerk or representative. Customer must insert his ATM card into he machine and authenticate himself by typing in his personal identification number (PIN). He cannot avail any of the facilities if the PIN entered is wrong. Authenticated customers can also change their PIN. They can deposit cash to their account with the bank. Also they can transfer funds to any other account. The ATM also provides options to the user to pay electricity or phone bill. Everyday morning the stock of cash in the ATM machine is replenished by a representative from the bank. Also, if the machine stops working, then it is fixed by a maintenance guy.</p>','use_case.swf','For a given problem at first we identify the actors. This can be by following the steps as mentioned in the theory section. Once actors have been identified, we they make use of the system and thus, identify the use cases.','flash',''),(4,1,'<h3> We show here how to extract functional requirements when a problem statement is given. The case under study is a online voting system.</h3><p>Internet has led to discussion of e-democracy and online voting. Many peoples think that the internet could replace representative democracy, enabling everyone to vote on everything and anything by online voting .Online voting could reduce cost and make voting more convenient. This type of voting can be done for e-democracy, or it may beused for finalizing a solution, if many alternatives are present. Online voting make’s use of authentication, hence it needs security, and the system must be able to address obtaining, marking, delivering and counting ballots via computer. Advantage of online voting is it could increase voter turnout because of convenience, and it helps to reduce fraud voting.</p>','requirements_identification.swf','A few of the functional requirements have been shown here. There could be others like email notifications, error handling and so on. Similarly, one has to identify the non functional requirements also. For example, the system must remain accessible to thousands of users at a time.','flash',''),(5,4,'<h3>Draw an ER diagram for a School Management System based on the following information.</h3><p>You have been asked to implement a database for a school management system (SMS). This primarily consists of maintaining students\' information like name, address, date of birth, roll number, department, and so on. Details about the school to be stored includes school\'s name, location. Although it is unlikely that there would be two schools at the same place with same name, but our SMS would like to accomodate this possibility.</p><p>Faculty members works in the school. They teaches the students. A faculty member normally teaches multiple students at a time. Also, he can teach multiple courses to the students.</p>','erd.swf','','flash',''),(6,5,'<h3>From the following problem statement, identify the domain classes</h3><p>An automated teller machine (ATM) lets customers to withdraw cash anytime from anywhere without requiring involvement of any banking clerk or representative. Customer must insert his ATM card into he machine and authenticate himself by typing in his personal identification number (PIN). He cannot avail any of the facilities if the PIN entered is wrong. Authenticated customers can also change their PIN. They can deposit cash to their account with the bank. Also they can transfer funds to any other account. The ATM also provides options to the user to pay electricity or phone bill. Everyday morning the stock of cash in the ATM machine is replenished by a representative from the bank. Also, if the machine stops working, then it is fixed by a maintenance guy.</p>','domain_class.swf','<p>-</p>','flash',''),(7,7,'<h2>Simplified class diagram and sequence diagram of a web browser.</h2><p>A web browser is a software that helps to access a resource (web page) available on the World Wide Web and identified by a URL. Whenever a user types in the URL of a web page in the browser\'s address bar and clicks the \"Go\" button, the browser sends a HTTP request to the concerned web server. If the requested resource is available and accessible, the web server sends back a HTTP response to the requesting web browser. In case of any error, a HTTP response is sent indicating the error.</p><p>When the web browser receives a HTTP response, it displays the web page to the user. In very simple terms a web browser can be thought of consisting the following sub-components<strong>: rendering engine</strong>, and <strong>browser control</strong>.</p><p>Once a HTTP response has been obtained from the server, the rendering engine decides the layout of the contents and actually displays the requested page. This is done keeping in mind the different HTML elements that are present in the page, and corresponding CSS rules, if any.</p><p>The browser control provides facilities like navigating across pages (by following hyperlinks), reload a page, and handles other events related to the window display, for example, resizing the browser window.</p>','class_diagram.swf','','flash',''),(8,6,'<h3>Drawing statechart diagram from a problem statement</h3><p>Consider the development of a medium-scale software in, say, C++. In a software development life cycle typically four phased could be observed. It begins with planning and design, after which the development work starts. Once the required features have been implemented, the software is tested. If testing is successful, the software is released. If there is even a single failure, that is to be fixed, and tested again. However, certain bugs might  become apparent only after someone uses the software in real scenario. As such, the software again enters into development phase, followed by testing, and then another release. </p>','statechart_diagram.swf','','flash',''),(9,10,'<p>Exhaustive testing of a software is required to determine it is working as per expectations and requirements. Developers often do not have enough time (or at times interest) to test their codes thoroughly. To handle such scenarios, most projects usually have a dedicated testing team. However, unit testing, at least, is done by the developers. </p><p>Irrespective of who performs testing, or what is being tested, testing usually involve some generic steps. In this simulation we provide a broad overview of the testing process.</p>','testing_steps.swf','','flash',''),(10,8,'<p>A DFD provides an easy mechanism to identify  the flow of data in any information system. The adjoining simulation illustrates the generic steps to draw a DFD, and some thumb rules to keep in mind while drawing it.</p>','dfd_steps.swf','','flash','');
/*!40000 ALTER TABLE `isad_simulation` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `isad_solution`
--

DROP TABLE IF EXISTS `isad_solution`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `isad_solution` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `exercise_id` int(11) NOT NULL,
  `graph` longtext,
  `image_url` varchar(120) DEFAULT NULL,
  `other` longtext,
  PRIMARY KEY (`id`),
  KEY `isad_solution_2799bae2` (`exercise_id`),
  CONSTRAINT `exercise_id_refs_id_4042e60b` FOREIGN KEY (`exercise_id`) REFERENCES `isad_exercise` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `isad_solution`
--

LOCK TABLES `isad_solution` WRITE;
/*!40000 ALTER TABLE `isad_solution` DISABLE KEYS */;
INSERT INTO `isad_solution` VALUES (1,2,'','exp9_ex2.png','<p>The linearly independent paths for the above shown CFG are:<ul>    <li>2 - 7 - 8 - 9</li>    <li>2 - 7 - 3 - 5 - 6 - 7 - 8 - 9</li>    <li>2 - 7 - 3 - 5 - 4 - 5 - 6 - 7 - 8 - 9</li></ul></p>'),(2,1,'','exp9_ex1.png','<p>The figure above shows the CFG of the program whose basic blocks are as follows:</p><pre>;; Function main (main)Merging blocks 5 and 6main (int argc, char * * argv){  int n;  int sum;  int i;  int D.1710;  const char * restrict D.1709;&lt;bb 2&gt;:  n = 10;  sum = 0;  i = 1;  goto &lt;bb 4&gt;;&lt;bb 3&gt;:  sum = sum + i;  i = i + 1;&lt;bb 4&gt;:  if (i &leq; n)    goto &lt;bb 3&gt;;  else    goto &lt;bb 5&gt;;&lt;bb 5&gt;:  D.1709 = (const char * restrict) \"Sum of first %d natural numbers is: %d\\n\";  printf (D.1709, n, sum);  D.1710 = 0;  return D.1710;}</pre><p>To determine McCabe\'s cyclomatic complexity, we observe that</p><ul>    <li><strong>E</strong> = # of edges = 7</li>    <li><strong>N</strong> = # of nodes = 7 (including the ENTRY and EXIT nodes)</li></ul><p>So, the cyclomatic complexity becomes:</p><pre>V(G) = E - N + 2     = 7 - 7 + 2     = 2</pre>'),(3,3,'','exp9_ex3.png','<p>From the above CFG we find that</p><ul>    <li>N = # of nodes = 15</li>    <li>E = # of edges = 19</li></ul>    <p>So, the cyclomatic complexity becomes</p><pre>V(G) = E - N + 2     = 19 - 15 + 2     = 6</pre><p>Since V(G) is less than 10, the concerned program could be categorized as simple in terms of its complexity.</p>'),(4,4,'{\"nodes\":\"[{\\\"label\\\":\\\"member\\\",\\\"config\\\":{\\\"category\\\":\\\"Actor\\\",\\\"xtype\\\":\\\"WireIt.MyImageContainer\\\"}},{\\\"label\\\":\\\"issue book\\\",\\\"config\\\":{\\\"category\\\":\\\"UseCase\\\",\\\"xtype\\\":\\\"WireIt.MyImageContainer\\\"}},{\\\"label\\\":\\\"return book\\\",\\\"config\\\":{\\\"category\\\":\\\"UseCase\\\",\\\"xtype\\\":\\\"WireIt.MyImageContainer\\\"}},{\\\"label\\\":\\\"verify credentials\\\",\\\"config\\\":{\\\"category\\\":\\\"UseCase\\\",\\\"xtype\\\":\\\"WireIt.MyImageContainer\\\"}},{\\\"label\\\":\\\"librarian\\\",\\\"config\\\":{\\\"category\\\":\\\"Actor\\\",\\\"xtype\\\":\\\"WireIt.MyImageContainer\\\"}}]\",\"edges\":\"[{\\\"src\\\":{\\\"moduleId\\\":\\\"member\\\"},\\\"tgt\\\":{\\\"moduleId\\\":\\\"issue book\\\"},\\\"label\\\":\\\" \\\",\\\"xtype\\\":\\\"WireIt.Wire\\\"},{\\\"src\\\":{\\\"moduleId\\\":\\\"member\\\"},\\\"tgt\\\":{\\\"moduleId\\\":\\\"return book\\\"},\\\"label\\\":\\\" \\\",\\\"xtype\\\":\\\"WireIt.Wire\\\"},{\\\"src\\\":{\\\"moduleId\\\":\\\"issue book\\\"},\\\"tgt\\\":{\\\"moduleId\\\":\\\"verify credentials\\\"},\\\"label\\\":\\\"include\\\",\\\"xtype\\\":\\\"WireIt.Wire\\\"},{\\\"src\\\":{\\\"moduleId\\\":\\\"librarian\\\"},\\\"tgt\\\":{\\\"moduleId\\\":\\\"issue book\\\"},\\\"label\\\":\\\" \\\",\\\"xtype\\\":\\\"WireIt.Wire\\\"},{\\\"src\\\":{\\\"moduleId\\\":\\\"librarian\\\"},\\\"tgt\\\":{\\\"moduleId\\\":\\\"return book\\\"},\\\"label\\\":\\\" \\\",\\\"xtype\\\":\\\"WireIt.Wire\\\"}]\"}','xs3_1.png','As per the problem statement, a member can issue and return book. However, while issusing a book, credentials of the member must be verified. This is shown by the include relationship between the two use cases \'Issue book\' and \'Verify credentials\'.'),(5,7,'{\"operators\":\"int, main, char, *, (), {}, =, ;, +, printf, ,, return\",\"operands\":\"argc, argv, x, 10, y, 20, sum, \\\"Sum of %d and %d is: %d\\\\n\\\", 0\"}','transparent_2x2.png','<p><strong>The operators are:</strong><ul><li>int</li> <li>main</li> <li>char</li><li>*</li> <li>()</li> <li>{}</li> <li>=</li> <li>;</li> <li>+</li> <li>printf</li> <li>,</li> <li>return</li></ul><strong>The operands are:</strong><ul><li>argc</li> <li>argv</li> <li>x</li> <li>10</li> <li>y</li> <li>20</li> <li>sum</li> <li>\"Sum of %d and %d is: %d\\n\"</li><li>0</li></ul></p>'),(7,5,'{\"nodes\":\"[{\\\"label\\\":\\\"customer\\\",\\\"config\\\":{\\\"category\\\":\\\"Actor\\\",\\\"xtype\\\":\\\"WireIt.MyImageContainer\\\"}},{\\\"label\\\":\\\"make booking\\\",\\\"config\\\":{\\\"category\\\":\\\"UseCase\\\",\\\"xtype\\\":\\\"WireIt.MyImageContainer\\\"}},{\\\"label\\\":\\\"book hotel\\\",\\\"config\\\":{\\\"category\\\":\\\"UseCase\\\",\\\"xtype\\\":\\\"WireIt.MyImageContainer\\\"}},{\\\"label\\\":\\\"book flight\\\",\\\"config\\\":{\\\"category\\\":\\\"UseCase\\\",\\\"xtype\\\":\\\"WireIt.MyImageContainer\\\"}},{\\\"label\\\":\\\"get journey details\\\",\\\"config\\\":{\\\"category\\\":\\\"UseCase\\\",\\\"xtype\\\":\\\"WireIt.MyImageContainer\\\"}},{\\\"label\\\":\\\"get address\\\",\\\"config\\\":{\\\"category\\\":\\\"UseCase\\\",\\\"xtype\\\":\\\"WireIt.MyImageContainer\\\"}},{\\\"label\\\":\\\"make payment\\\",\\\"config\\\":{\\\"category\\\":\\\"UseCase\\\",\\\"xtype\\\":\\\"WireIt.MyImageContainer\\\"}},{\\\"label\\\":\\\"pay by cash\\\",\\\"config\\\":{\\\"category\\\":\\\"UseCase\\\",\\\"xtype\\\":\\\"WireIt.MyImageContainer\\\"}},{\\\"label\\\":\\\"pay by card\\\",\\\"config\\\":{\\\"category\\\":\\\"UseCase\\\",\\\"xtype\\\":\\\"WireIt.MyImageContainer\\\"}},{\\\"label\\\":\\\"cancel booking\\\",\\\"config\\\":{\\\"category\\\":\\\"UseCase\\\",\\\"xtype\\\":\\\"WireIt.MyImageContainer\\\"}},{\\\"label\\\":\\\"get refund\\\",\\\"config\\\":{\\\"category\\\":\\\"UseCase\\\",\\\"xtype\\\":\\\"WireIt.MyImageContainer\\\"}},{\\\"label\\\":\\\"cancel flight\\\",\\\"config\\\":{\\\"category\\\":\\\"UseCase\\\",\\\"xtype\\\":\\\"WireIt.MyImageContainer\\\"}},{\\\"label\\\":\\\"cancel hotel\\\",\\\"config\\\":{\\\"category\\\":\\\"UseCase\\\",\\\"xtype\\\":\\\"WireIt.MyImageContainer\\\"}},{\\\"label\\\":\\\"travel agent\\\",\\\"config\\\":{\\\"category\\\":\\\"Actor\\\",\\\"xtype\\\":\\\"WireIt.MyImageContainer\\\"}}]\",\"edges\":\"[{\\\"src\\\":{\\\"moduleId\\\":\\\"book flight\\\"},\\\"tgt\\\":{\\\"moduleId\\\":\\\"make booking\\\"},\\\"label\\\":\\\" \\\",\\\"xtype\\\":\\\"WireIt.Wire\\\"},{\\\"src\\\":{\\\"moduleId\\\":\\\"book hotel\\\"},\\\"tgt\\\":{\\\"moduleId\\\":\\\"make booking\\\"},\\\"label\\\":\\\" \\\",\\\"xtype\\\":\\\"WireIt.Wire\\\"},{\\\"src\\\":{\\\"moduleId\\\":\\\"customer\\\"},\\\"tgt\\\":{\\\"moduleId\\\":\\\"make booking\\\"},\\\"label\\\":\\\" \\\",\\\"xtype\\\":\\\"WireIt.Wire\\\"},{\\\"src\\\":{\\\"moduleId\\\":\\\"book flight\\\"},\\\"tgt\\\":{\\\"moduleId\\\":\\\"get journey details\\\"},\\\"label\\\":\\\"include\\\",\\\"xtype\\\":\\\"WireIt.Wire\\\"},{\\\"src\\\":{\\\"moduleId\\\":\\\"book flight\\\"},\\\"tgt\\\":{\\\"moduleId\\\":\\\"get address\\\"},\\\"label\\\":\\\"include\\\",\\\"xtype\\\":\\\"WireIt.Wire\\\"},{\\\"src\\\":{\\\"moduleId\\\":\\\"book hotel\\\"},\\\"tgt\\\":{\\\"moduleId\\\":\\\"get address\\\"},\\\"label\\\":\\\"include\\\",\\\"xtype\\\":\\\"WireIt.Wire\\\"},{\\\"src\\\":{\\\"moduleId\\\":\\\"customer\\\"},\\\"tgt\\\":{\\\"moduleId\\\":\\\"make payment\\\"},\\\"label\\\":\\\" \\\",\\\"xtype\\\":\\\"WireIt.Wire\\\"},{\\\"src\\\":{\\\"moduleId\\\":\\\"pay by cash\\\"},\\\"tgt\\\":{\\\"moduleId\\\":\\\"make payment\\\"},\\\"label\\\":\\\" \\\",\\\"xtype\\\":\\\"WireIt.Wire\\\"},{\\\"src\\\":{\\\"moduleId\\\":\\\"pay by card\\\"},\\\"tgt\\\":{\\\"moduleId\\\":\\\"make payment\\\"},\\\"label\\\":\\\" \\\",\\\"xtype\\\":\\\"WireIt.Wire\\\"},{\\\"src\\\":{\\\"moduleId\\\":\\\"customer\\\"},\\\"tgt\\\":{\\\"moduleId\\\":\\\"cancel booking\\\"},\\\"label\\\":\\\" \\\",\\\"xtype\\\":\\\"WireIt.Wire\\\"},{\\\"src\\\":{\\\"moduleId\\\":\\\"cancel booking\\\"},\\\"tgt\\\":{\\\"moduleId\\\":\\\"get refund\\\"},\\\"label\\\":\\\"include\\\",\\\"xtype\\\":\\\"WireIt.Wire\\\"},{\\\"src\\\":{\\\"moduleId\\\":\\\"cancel hotel\\\"},\\\"tgt\\\":{\\\"moduleId\\\":\\\"cancel booking\\\"},\\\"label\\\":\\\" \\\",\\\"xtype\\\":\\\"WireIt.Wire\\\"},{\\\"src\\\":{\\\"moduleId\\\":\\\"cancel flight\\\"},\\\"tgt\\\":{\\\"moduleId\\\":\\\"cancel booking\\\"},\\\"label\\\":\\\" \\\",\\\"xtype\\\":\\\"WireIt.Wire\\\"},{\\\"src\\\":{\\\"moduleId\\\":\\\"travel agent\\\"},\\\"tgt\\\":{\\\"moduleId\\\":\\\"make booking\\\"},\\\"label\\\":\\\" \\\",\\\"xtype\\\":\\\"WireIt.Wire\\\"},{\\\"src\\\":{\\\"moduleId\\\":\\\"travel agent\\\"},\\\"tgt\\\":{\\\"moduleId\\\":\\\"make payment\\\"},\\\"label\\\":\\\" \\\",\\\"xtype\\\":\\\"WireIt.Wire\\\"},{\\\"src\\\":{\\\"moduleId\\\":\\\"travel agent\\\"},\\\"tgt\\\":{\\\"moduleId\\\":\\\"cancel booking\\\"},\\\"label\\\":\\\" \\\",\\\"xtype\\\":\\\"WireIt.Wire\\\"}]\"}','use_case/travel_agency.png','While booking a flight or hotel customer has to provide his permanent address. So, the two use concerned cases includes the use case \'Get address\'. <br />Payment could be made either by cash or card. So, each of those use cases extends the \'Make payment\' use case. Customer makes the payment while travel agent receives it. Therefore both customer and travel agent are associated with the use case \'Make payment\'. '),(11,12,'','xs4_1.jpg','A sample solution is shown above.'),(12,13,'','xs4_2.jpg','A sample solution is shown above.'),(13,18,'','activity/ex2_code_chkout.png','The join operation represents that testing with both the web browsers must be successful in order to accept the changes in code.'),(14,16,'','statechart/statechart_ex1.png','The above represents a typical statechart diagram for the given problem statement. Please note that there is possibly no unique solution to designing problems. Your diagram might vary based on how you model the system.'),(15,8,'','project_metrics/x2.png','<p>The operators are:</p><pre>intmain()int,char*{}int=;printf(),,()area;return;floatarea()float{}return**/;</pre><p>The operands are:</p><pre>argcargvradius12.34\"Area of the circle with radius %f is: %f\\n\"radiusradius0r22rr7</pre>'),(16,6,'','project_metrics/x1.png','<pre>Applications experience (high): 0.91Programming language experience (high): 0.95Application of software engineering methods (high): 0.91Use of software tools (high): 0.91</pre><p>Other cost drivers have nominal values (= 1). So, EAF = 0.91 * 0.95 * 0.91 * 0.91 = 0.70</p>'),(17,15,'','','<p>From the given problem statement we can identify the following nouns and noun phrases:</p><ul><li>Mr Bose</li><li>boss</li><li>agency</li><li>Cabs</li><li>drivers</li><li>AC</li><li>service</li><li>Kolkata</li><li>passenger</li><li>booking receipt</li><li>home</li><li>office</li><li>place</li><li>landmark</li><li>Payments</li><li>cheque</li><li>branch</li><li>At Your Risk Bank</li><li>finances</li><li>business</li><li>bank</li><li>Mr Roy</li><li>morning</li><li>everyday</li><li>son</li><li>school</li><li>persons</li><li>locality</li><li>plan</li><li>Drop to school</li><li>neighbour</li></ul><p>Let us put the above into different categories.</p><table class=\"techno\" cellpadding=\"0\" cellspacing=\"0\" id=\"CategoryList\">                <thead>                    <tr>                        <th>&nbsp;People&nbsp;&nbsp;</th>                        <th>&nbsp;Places&nbsp;&nbsp;</th>                        <th>&nbsp;Things&nbsp;&nbsp;</th>						<th>&nbsp;Organizations&nbsp;&nbsp;</th>                        <th>&nbsp;Concepts&nbsp;&nbsp;</th>                        <th>&nbsp;Events&nbsp;&nbsp;</th>												                    </tr>                </thead>                <tbody class=\"tbodyForCategoryList\">                    <tr><td>        <ul>            <li>Mr Bose</li>			<li>boss</li>			<li>drivers</li>			<li>passenger</li>			<li>Mr Roy</li>			<li>son</li>			<li>persons</li>			<li>neighbour</li>        </ul>    </td>	<td>        <ul>            <li>Kolkata</li>			<li>home</li>			<li>office</li>			<li>place</li>			<li>landmark</li>			<li>branch</li>			<li>locality</li>            </ul>    </td>	<td>        <ul>                <li>Cabs</li>			<li>AC</li>			<li>booking receipt</li>			<li>cheque</li>        </ul>     </td>	<td>        <ul>            <li>agency</li>			<li>At Your Risk Bank</li>			<li>bank</li>			<li>school</li>        </ul>     </td>	<td>        <ul>            <li>service</li>			<li>Payments</li>			<li>finances</li>			<li>business</li>			<li>plan</li>			        </ul>    </td>	<td>        <ul>            <li>morning</li>			<li>everyday</li>			<li>Drop to school</li>        </ul>    </td> 	</tr> 	</tbody>	</table>   <p>The nouns and noun phrases in the problem statement gives us a list of 31 potential classes. However, all of them may not be relevant. For example, \'Moning\' is not something related to the Cab Management System. And so is \'Everyday\'. In a similar way, \'Service\', \'Plan\', \'Agency\', \'AC\', \'Locality\', and \'Business\' doesn\'t seem to be potential classes in this context. So, we may avoid to assign any attributes for those entries.</p><p>We need to assign some attributes for rest of the potential classes. For example, \'Mr Roy\' may assigned attributes \'Adress\', \'Height\', \'Name\', and \'Weight\'.In addition to these, \'Customer id\', may be consider as an attribute for \'Mr Roy\', as, Mr Roy may be treated as a potential Customer for our Cab Management System.Similarly, we can assign attribute \'Employee id\' with \'Adress\', \'Height\', \'Name\', and \'Weight\' for the potential class \'Drivers\'. </p><p>These are the probable classes with their associated properties</p><table class=\"techno\" cellpadding=\"0\" cellspacing=\"0\" id=\"ClassList\">                <thead>                    <tr>                        <th>&nbsp;Person&nbsp;&nbsp;</th>                        <th>&nbsp;Employee&nbsp;&nbsp;</th>                        <th>&nbsp;Customer&nbsp;&nbsp;</th>						<th>&nbsp;Place&nbsp;&nbsp;</th>                        <th>&nbsp;Cab&nbsp;&nbsp;</th>                        <th>&nbsp;Booking&nbsp;&nbsp;</th>						<th>&nbsp;Bank&nbsp;&nbsp;</th>						                    </tr>                </thead>                <tbody class=\"tbodyForClassList\">                    <tr>                        <td>                            <ul>                                <li>Address</li>								<li>Height</li>								<li>Name</li>								<li>Weight</li>                            </ul>                        </td>                        <td>                            <ul>                                <li>Address</li>								<li>Height</li>								<li>Name</li>								<li>Weight</li>								<li>Emlpoyee id</li>                            </ul>                        </td>                        <td>                            <ul>                                <li>Address</li>								<li>Height</li>								<li>Name</li>								<li>Weight</li>								<li>Customer id</li>                            </ul>                        </td>						<td>                            <ul>                                <li>Address</li>								                            </ul>                        </td>												<td>                            <ul>                                <li>Color</li>								<li>Cost</li>								<li>Has AC</li>								<li>Weight</li>								                            </ul>                        </td>						<td>                            <ul>                                <li>Time</li>								<li>Customer</li>								<li>Starting Place</li>								<li>Destination</li>								                            </ul>                        </td>						 <td>                            <ul>                                <li>Address</li>								<li>branch</li>								<li>Name</li>								                            </ul>                        </td>						                    </tr>                </tbody>            </table><p>According to the properties assigned to \'Mr Roy\' and \'Drivers\', Mr Roy will be an object of \'Customer\' class and \'Drivers\' will be an object of \'Emloyee\' class. </p><p>Although not explicitly mentioned in the problem statement, based on knowledge in related area one may point out few other potential classes with their following properties:</p><table class=\"techno\" cellpadding=\"0\" cellspacing=\"0\" id=\"ClassList\">                <thead>                    <tr>                        						<th>&nbsp;Transaction&nbsp;&nbsp;</th>						<th>&nbsp;Payment&nbsp;&nbsp;</th>                    </tr>                </thead>				                <tbody>				<tr>				<td>                            <ul>                                <li>Transaction id</li>								<li>Parties involved</li>								<li>Time</li>								                            </ul>                        </td>						<td>                            <ul>                                <li>Amount</li>								<li>Name of Payee</li>								<li>Serial number</li>								                            </ul>                        </td>                    </tr>                </tbody>            </table><p>For the given problem related to Cab Management System, one may conclude the final list of classes as ::</p> <ul>											<li>&nbsp;Person&nbsp;&nbsp;</li>                        <li>&nbsp;Employee&nbsp;&nbsp;</li>                        <li>&nbsp;Customer&nbsp;&nbsp;</li>						<li>&nbsp;Place&nbsp;&nbsp;</li>                        <li>&nbsp;Cab&nbsp;&nbsp;</li>                        <li>&nbsp;Booking&nbsp;&nbsp;</li>						<li>&nbsp;Bank&nbsp;&nbsp;</li>						<li>&nbsp;Transaction&nbsp;&nbsp;</li>						<li>&nbsp;Payment&nbsp;&nbsp;</li></ul>'),(18,21,'','sequence/tcp3way_handshake.png','Note that in real life there will be a time delay between a message sent at one end and received at the other end. Such time delay couldn\'t be represented here.'),(19,22,'','sequence/web_normal.png','<p>The figure above shows how &quot;traditional&quot; Web typically works. &quot;Reource1&quot; and &quot;Resource2&quot; represent two resources, which could be accessed only after an user has authenticated himself. As seen in the picture, the &quot;Web Browser&quot;sends a synchronous &quot;HTTP Request&quot; to the server for transferring any information from the web browser to the web server.The &quot;Web Server&quot; in turn sends back any information by encapsulating it in a &quot;HTTP Response&quot; object. The point to note here is that the message sent by web browser is synchronous. The web browser has to wait for a response, and update it\'s display whenit arrives. Only after then the web browser could send out a request for any other resource.</p><p>The scenario changes when AJAX is being used. The corresponding sequence diagram is shown in the figure below. (The user login sequence has not been shown here.)</p><center>    <img src=\"_STATIC_URL_isad/images/__solutions/sequence/web_ajax.png\" class=\"diagram\" alt=\"Web with AJAX\">    <br>    Figure: Web with AJAX</center><p>Here, the &quot;Web Browser&quot; sends out asynchronous &quot;XmlHttpRequest&quot; to the &quot;Web Server&quot;. As such, it doesn\'t have to wait for a response to arrive from the web server. Instead say, as a result of the user clicking on two buttons, the web browser can simply send out two &quot;XmlHttpRequests&quot;. It updates the display as and when a response arrives from the web server.</p>'),(20,17,'','class/web_browser.jpg','<p>The existence of a &quot;RenderingEngine&quot; is not dependent on the &quot;WebBrowser&quot;. In fact, several web browsers could use the same rendering engine. However, browser control operations are specific for a web browser.</p>'),(21,20,'','test_suite/code_with_negatives_fixed.png','<p>The code shown above in the textarea is the code against which we have to create our test cases. The displayed code is a modified version, which returns -1 whenever any dimension of a shape is specified as negative. Once this code is ready, we can create a test suite and add test cases as shown below.<img src=\"_STATIC_URL_isad/images/__solutions/test_suite/ts_negatives_fixed.png\" alt=\"Test suite with test cases\" class=\"diagram\" width=\"891\" height=\"516\"></p><p>The result of execution of this test suite is displayed below:<img src=\"_STATIC_URL_isad/images/__solutions/test_suite/ts_negative_fixed_output.png\" alt=\"Test suite execution result\" class=\"diagram\" width=\"884\" height=\"581\">Note that the call to &quot;circle( -14 )&quot; returns -1 as expected. However, one of the test cases, &quot;rectangle( 5.5, 10 )&quot; fails. We can verify from the &quot;Actual Output&quot; column that this function didn\'t return the correct value. This is a bug.</p><p>To identify the source of this bug, we look at the &quot;rectnagle( side1, side2 )&quot; function in our code base. After observing minutely we find that the code in line #8 should have returned &quot;side1 * side2&quot; instead of &quot;side1 * side1&quot;. We fix this bug, and run the test suite again. We get the following output where the entire test suite passes.<img src=\"_STATIC_URL_isad/images/__solutions/test_suite/ts_bug_fixed_output.png\" alt=\"Test suite execution result after bug fixing\" class=\"diagram\" width=\"884\" height=\"586\"></p>'),(22,23,'','dfd/dfd_1.jpg',''),(23,24,'','dfd/dfd_2.jpg','');
/*!40000 ALTER TABLE `isad_solution` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `isad_theory`
--

DROP TABLE IF EXISTS `isad_theory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `isad_theory` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(100) NOT NULL,
  `content` longtext NOT NULL,
  `objectives` longtext,
  `time_required` decimal(4,2) NOT NULL,
  `extra` longtext,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `isad_theory`
--

LOCK TABLES `isad_theory` WRITE;
/*!40000 ALTER TABLE `isad_theory` DISABLE KEYS */;
INSERT INTO `isad_theory` VALUES (1,'Identifying the Requirements from Problem Statements','<h2>Requirements</h2><p>Sommerville defines &quot;requirement&quot;  <a href="/1/references/">[1]</a> as a specification of what should be implemented. Requirements specify how the target system should behave. It specifies what to do, but not how to do. Requirements engineering refers to the process of understanding what a customer expects from the system to be developed, and to document them in a standard and easily readable and understandable format. This documentation will serve as reference for the subsequent design, implementation and verification of the system.</p><p>It is necessary and important that before we start planning, design and implementation of the software system for our client, we are clear about it\'s requirements. If we don\'t have a clear vision of what is to be developed and what all features are expected, there would be serious problems, and customer dissatisfaction as well.</p><h2>Characteristics of Requirements</h2><p>Requirements gathered for any new system to be developed should exhibit the following three properties:</p><ul>    <li>    <strong>Unambiguity:</strong> There should not be any ambiguity what a    system to be developed should do. For example, consider you are developing a web     application for your client. The client requires that enough number of people     should be able to access the application simultaneously. What\'s the &quot;enough     number of people&quot;? That could mean 10 to you, but, perhaps, 100 to the client.    There\'s an ambiguity.    </li>    <li>    <strong>Consistency:</strong> To illustrate this, consider the automation     of a nuclear plant. Suppose one of the clients say that it the radiation level     inside the plant exceeds R1, all reactors should be shut down. However, another    person from the client side suggests that the threshold radiation level should    be R2. Thus, there is an inconsistency between the two end users regarding what    they consider as threshold level of radiation.    </li>    <li>    <strong>Completeness:</strong> A particular requirement for a system     should specify what the system should do and also what it should not. For     example, consider a software to be developed for ATM. If a customer enters an     amount greater than the maximum permissible withdrawal amount, the ATM should     display an error message, and it should not dispense any cash.    </li></ul><h2>Categorization of Requirements</h2><p>Based on the target audience or subject matter, requirements can be classified into different types, as stated below:</p><ul>    <li>    <strong>User requirements: </strong>They are written in natural language    so that both customers can verify their requirements have been correctly    identified    </li>    <li>    <strong>System requirements: </strong>They are written involving technical     terms and/or specifications, and are meant for the development or testing     teams    </li></ul><p>Requirements can be classified into two groups based on what they describe:</p><ul>    <li>    <strong>Functional requirements (FRs): </strong>These describe the     functionality of a system -- how a system should react to a particular set     of inputs and what should be the corresponding output.    </li>    <li>    <strong>Non-functional requirements (NFRs): </strong>They are not directly     related what functionalities are expected from the system. However, NFRs     could typically define how the system should behave under certain situations.     For example, a NFR could say that the system should work with 128MB RAM.     Under such condition, a NFR could be more critical than a FR.    </li></ul><p>Non-functional requirements could be further classified into different types like:</p><ul>    <li>    <strong>Product requirements:</strong> For example, a specification that     the web application should use only plain HTML, and no frames    </li>    <li>    <strong>Performance requirements:</strong> For example, the system should     remain available 24x7    </li>    <li>    <strong>Organizational requirements:</strong> The development process should     comply to SEI CMM level 4    </li></ul><h2>Functional Requirements</h2><h3>Identifying Functional Requirements</h3><p>Given a problem statement, the functional requirements could be identified by focusing on the following points:</p><ul>    <li>    Identify the high level functional requirements simply from the conceptual     understanding of the problem. For example, a Library Management System, apart    from anything else, should be able to issue and return books.    </li>    <li>    Identify the cases where an end user gets some meaningful work done by using     the system. For example, in a digital library a user might use     the &quot;Search Book&quot; functionality to obtain information about the books of his     interest.    </li>    <li>    If we consider the system as a black box, there would be some inputs to it,    and some output in return. This black box defines the functionalities of the    system. For example, to search for a book, user gives title of the book as     input and get the book details and location as the output.    </li>    <li>    Any high level requirement identified could have different sub-requirements.    For example, &quot;Issue Book&quot; module could behave differently for    different class of users, or for a particular user who has issued the book    thrice consecutively.    </li></ul><h2>Preparing Software Requirements Specifications</h2><p>Once all possible FRs and non-FRs have been identified, which are complete, consistent, and non-ambiguous, the Software Requirements Specification (SRS) is to be prepared. IEEE provides a template  <a href="/1/references/">[iv]</a>, also available <a href=&quot;http://www.cse.msu.edu/~cse870/IEEEXplore-SRS-template.pdf&quot;>here</a>, which could be used for this purpose. The SRS is prepared by the service provider, and verified by its client. This document serves as a legal agreement between the client and the service provider. Once the concerned system has been developed and deployed, and a proposed feature was not found to be present in the system, the client can point this out from the SRS. Also, if after delivery, the client says a new feature is required, which was not mentioned in the SRS, the service provider can again point to the SRS. The scope of the current experiment, however, doesn\'t cover writing a SRS.</p>','<ul><li>Identify ambiguities, inconsistencies and incompleteness from a requirements specification</li><li>Identify and state functional requirements</li><li>Identify and state non-functional requirements</li></ul>','3.00','<p>Requirements identification is the first step of any software development project.  Until the requirements of a client have been clearly identified, and verified, no other task (design, coding, testing) could begin. Usually business analysts having domain knowledge on the subject matter discuss with clients and decide what features are to be implemented.</p><p>In this experiment we will learn how to identify functional and non-functional requirements from a given problem statement. Functional and non-functional requirements are the primary components of a Software Requirements Specification.</p>'),(2,'Estimation of Project Metrics','<h2>Project Estimation Techniques</h2><p>A software project is not just about writing a few hundred lines of source code to achieve a particular objective. The scope of a software project is comparatively <i>quite large</i>, and such a project could take several years to complete. However, the phrase &quot;quite large&quot; could only give some (possibly vague) qualitative information. As in any other science and engineering discipline, one would be interested to <i>measure</i> how complex a project is. One of the major activities of the project planning phase, therefore, is to estimate various project parameters in order to take proper decisions. Some important project parameters that are estimated include:   <ul>    <li>    <strong>Project size:</strong> What would be the size of the code written     say, in number of lines, files, modules?    </li>    <li>    <strong>Cost:</strong> How much would it cost to develop a software? A    software may be just pieces of code, but one has to pay to the managers,    developers, and other project personnel.    </li>    <li>    <strong>Duration:</strong> How long would it be before the software is    delivered to the clients?    </li>    <li>    <strong>Effort:</strong> How much effort from the team members would be     required to create the software?    </li>  </ul></p><p>In this experiment we will focus on two methods for estimating project metrics: COCOMO and Halstead\'s method.</p><h2>COCOMO</h2><p>COCOMO (Constructive Cost Model) was proposed by Boehm. According to him, there could be three categories of software projects: organic, semidetached, and embedded. The classification is done considering the characteristics of the software, the development team and environment. These product classes typically correspond to application, utility and system programs, respectively. Data processing programs could be considered as application programs. Compilers, linkers, are examples of utility programs. Operating systems, real-time system programs are examples of system programs. One could easily apprehend that it would take much more time and effort to develop an OS than an attendance management system.</p><p>The concept of organic, semidetached, and embedded systems are described below.<ul><li><strong>Organic:</strong> A development project is said to be of organic type, if   <ul style=\"font-size: 0.9em;\">    <li>The project deals with developing a well understood application</li>    <li>The development team is small</li>    <li>The team members have prior experience in working with similar types of     projects</li>  </ul></li><li><strong>Semidetached:</strong> A development project can be categorized as semidetached type, if   <ul style=\"font-size: 0.9em;\">    <li>The team consists of some experienced as well as inexperienced     staff</li>    <li>Team members may have some experience on the type of system to be     developed</li>  </ul></li><li><strong>Embedded:</strong> Embedded type of development project are those, which  <ul style=\"font-size: 0.9em;\">    <li>Aims to develop a software strongly related to machine hardware</li>    <li>Team size is usually large</li>  </ul></li></p><p>                                                    Boehm suggested that estimation of project parameters should be done through three stages: Basic COCOMO, Intermediate COCOMO, and Complete COCOMO.</p><h3>Basic COCOMO Model</h3><p>The basic COCOMO model helps to obtain a rough estimate of the project parameters. It estimates effort and time required for development in the following way: <br>                                <span class=\"contentEquation\">Effort = a * (KDSI)<sup>b</sup> PM </span>                                                   <span class=\"contentEquation\">Tdev = 2.5 * (Effort)<sup>c</sup> Months </span>                        where<ul>  <li>KDSI is the estimated size of the software expressed in Kilo Delivered   Source Instructions</li>  <li>a, b, c are constants determined by the category of software project</li>  <li>Effort denotes the total effort required for the software development,   expressed in person months (PMs)</li>  <li>Tdev denotes the estimated time required to develop the software   (expressed in months)</li>  </ul></p><p>The value of the constants a, b, c are given below: <br> <br><table class=\"data\"><thead><tr><th>Software project</th><th><i>a</i></th><th><i>b</i></th><th><i>c</i></th></tr></thead><tbody><tr><td style=\"text-align: left;\">Organic</td><td>2.4</td><td>1.05</td><td>0.38</td></tr><tr><td style=\"text-align: left;\">Semi-detached</td><td>3.0</td><td>1.12</td><td>0.35</td></tr><tr><td style=\"text-align: left;\">Embedded</td><td>3.6</td><td>1.20</td><td>0.32</td></tr></tbody></table></p><h3>Intermediate COCOMO Model</h3><p>The basic COCOMO model considers that effort and development time depends only on the size of the software. However, in real life there are many other project parameters that influence the development process. The intermediate COCOMO take those other factors into consideration by defining a set of 15 cost drivers (multipliers) as shown in the table below <a href="/2/references/">[i]</a>. Thus, any project that makes use of modern programming practices would have lower estimates in terms of effort and cost. Each of the 15 such attributes can be rated on a six-point scale ranging from \"very low\" to \"extra high\" in their relative order of importance. Each attribute has an effort multiplier fixed as per the rating. The product of effort multipliers of all the 15 attributes gives the <strong>Effort Adjustment Factor (EAF)</strong>. <br> <br><table class=\"data\" cellpadding=\"0\" cellspacing=\"0\"><caption>Cost drivers for INtermediate COCOMO (Source: <a href=\"http://en.wikipedia.org/wiki/COCOMO\">http://en.wikipedia.org/wiki/COCOMO</a>)</caption><thead><tr><th rowspan=\"2\" valign=\"bottom\">Cost Drivers</td><th colspan=\"6\">Ratings</th></tr><tr><th valign=\"bottom\" width=\"10%\" align=\"center\">Very Low</td><th valign=\"bottom\" width=\"10%\" align=\"center\">Low</td><th valign=\"bottom\" width=\"10%\" align=\"center\">Nominal</td><th valign=\"bottom\" width=\"10%\" align=\"center\">High</td><th valign=\"bottom\" width=\"10%\" align=\"center\">Very High</td><th valign=\"bottom\" width=\"10%\" align=\"center\">Extra High</td></tr></thead><tbody><tr><th align=\"left\" style=\"background-color: #dddddd;\">Product attributes</th></tr><tr><td style=\"text-align: left;\">Required software reliability</td><td align=\"center\">0.75</td><td align=\"center\">0.88</td><td align=\"center\">1.00</td><td align=\"center\">1.15</td><td align=\"center\">1.40</td><td align=\"center\"> </td></tr><tr><td style=\"text-align: left;\">Size of application database</td><td align=\"center\"> </td><td align=\"center\">0.94</td><td align=\"center\">1.00</td><td align=\"center\">1.08</td><td align=\"center\">1.16</td><td align=\"center\"> </td></tr><tr><td style=\"text-align: left;\">Complexity of the product</td><td align=\"center\">0.70</td><td align=\"center\">0.85</td><td align=\"center\">1.00</td><td align=\"center\">1.15</td><td align=\"center\">1.30</td><td align=\"center\">1.65</td></tr><tr><th align=\"left\" style=\"background-color: #dddddd;\">Hardware attributes</th></tr><tr><td style=\"text-align: left;\">Run-time performance constraints</td><td align=\"center\"> </td><td align=\"center\"> </td><td align=\"center\">1.00</td><td align=\"center\">1.11</td><td align=\"center\">1.30</td><td align=\"center\">1.66</td></tr><tr><td style=\"text-align: left;\">Memory constraints</td><td align=\"center\"> </td><td align=\"center\"> </td><td align=\"center\">1.00</td><td align=\"center\">1.06</td><td align=\"center\">1.21</td><td align=\"center\">1.56</td></tr><tr><td style=\"text-align: left;\">Volatility of the virtual machine environment</td><td align=\"center\"> </td><td align=\"center\">0.87</td><td align=\"center\">1.00</td><td align=\"center\">1.15</td><td align=\"center\">1.30</td><td align=\"center\"> </td></tr><tr><td style=\"text-align: left;\">Required turnabout time</td><td align=\"center\"> </td><td align=\"center\">0.87</td><td align=\"center\">1.00</td><td align=\"center\">1.07</td><td align=\"center\">1.15</td><td align=\"center\"> </td></tr><tr><th align=\"left\" style=\"background-color: #dddddd;\">Personnel attributes</th></tr><tr><td style=\"text-align: left;\">Analyst capability</td><td align=\"center\">1.46</td><td align=\"center\">1.19</td><td align=\"center\">1.00</td><td align=\"center\">0.86</td><td align=\"center\">0.71</td><td align=\"center\"> </td></tr><tr><td style=\"text-align: left;\">Applications experience</td><td align=\"center\">1.29</td><td align=\"center\">1.13</td><td align=\"center\">1.00</td><td align=\"center\">0.91</td><td align=\"center\">0.82</td><td align=\"center\"> </td></tr><tr><td style=\"text-align: left;\">Software engineer capability</td><td align=\"center\">1.42</td><td align=\"center\">1.17</td><td align=\"center\">1.00</td><td align=\"center\">0.86</td><td align=\"center\">0.70</td><td align=\"center\"> </td></tr><tr><td style=\"text-align: left;\">Virtual machine experience</td><td align=\"center\">1.21</td><td align=\"center\">1.10</td><td align=\"center\">1.00</td><td align=\"center\">0.90</td><td align=\"center\"> </td><td align=\"center\"> </td></tr><tr><td style=\"text-align: left;\">Programming language experience</td><td align=\"center\">1.14</td><td align=\"center\">1.07</td><td align=\"center\">1.00</td><td align=\"center\">0.95</td><td align=\"center\"> </td><td align=\"center\"> </td></tr><tr><th align=\"left\" style=\"background-color: #dddddd;\">Project attributes</th></tr><tr><td style=\"text-align: left;\">Application of software engineering methods</td><td align=\"center\">1.24</td><td align=\"center\">1.10</td><td align=\"center\">1.00</td><td align=\"center\">0.91</td><td align=\"center\">0.82</td><td align=\"center\"> </td></tr><tr><td style=\"text-align: left;\">Use of software tools</td><td align=\"center\">1.24</td><td align=\"center\">1.10</td><td align=\"center\">1.00</td><td align=\"center\">0.91</td><td align=\"center\">0.83</td><td align=\"center\"> </td></tr><tr><td style=\"text-align: left;\">Required development schedule</td><td align=\"center\">1.23</td><td align=\"center\">1.08</td><td align=\"center\">1.00</td><td align=\"center\">1.04</td><td align=\"center\">1.10</td></tr></tbody></table><br> <br>EAF is used to refine the estimates obtained by basic COCOMO as follows:<span class=\"contentEquation\">Effort|<sub>corrected</sub> = Effort * EAF</span><span class=\"contentEquation\">Tdev|<sub>corrected</sub> = 2.5 * (Effort|<sub>corrected</sub>) <sup>c</sup></span></p><h3>Complete COCOMO Model</h3><p>Both the basic and intermediate COCOMO models consider a software to be a single homogeneous entity -- an assumption, which is rarely true. In fact, many real life applications are made up of several smaller sub-systems. (One might not even develop all the sub-systems -- just use the available services). The complete COCOMO model takes these factors into account to provide a far more accurate estimate of project metrics.</p><p>To illustrate this, consider a very popular distributed application: the ticket booking system of the Indian Railways. There are computerized ticket counters in most of the railway stations of our country. Tickets can be booked / cancelled from any such counter. Reservations for future tickets, cancellation of reserved tickets could also be performed. On a high level, the ticket booking system has three main components:<ul>  <li>Database</li>  <li>Graphical User Interface (GUI)</li>  <li>Networking facilities</li></ul></p><p>Among these, development of the GUI is considered as an organic project type; the database module could be considered as a semi-detached software. The networking module can be considered as an embedded software. To obtain a realistic cost,one should estimate the costs for each component separately, and then add it up.</p><h2>Advantages of COCOMO</h2><p>COCOMO is a simple model, and should help one to understand the concept of project metrics estimation. </p><h2>Drawbacks of COCOMO</h2><p>COCOMO uses KDSI, which is not a proper measure of a program\'s size. Indeed, estimating the size of a software is a difficult task, and any slight miscalculation could cause a large deviation in subsequent project estimates. Moreover, COCOMO was proposed in 1981 keeping the waterfall model of project life cycle in mind <a href="/2/references/">[2]</a>. It fails to address other popular approaches like prototype, incremental, spiral, agile models. Moreover, in present day a software project may not necessarily consist of coding of every bit of functionality. Rather, existing software components are often used and glued together towards the development of a new software. COCOMO is not suitable in such cases.</p><p>COCOMO II was proposed later in 2000 to many of address these issues.</p><h2>Halstead\'s Complexity Metrics</h2><p>Halstead took a linguistic approach to determine the complexity of a program. According to him, a computer program consists of a collection of different operands and operators. The definition of operands and operators could, however,vary from one person to another and one programming language to other. Operands are usually the implementation variables or constants -- something upon which an operation could be performed. Operators are those symbols that affects the value of operands. Halstead\'s metrics are computed based on the operators and operands used in a computer program. Any given program has the following four parameters:<ul><li><strong>n1</strong>: Number of unique operators used in the program</li><li><strong>n2</strong>: Number of unique operands used in the program</li><li><strong>N1</strong>: Total number of operators used in the program</li><li><strong>N2</strong>: Total number of operands used in the program</li></ul>Using the above parameters one compute the following metrics:</p><ul><li><strong>Program Length</strong>: N = N1 + N2</li><li><strong>Program Vocabulary</strong>: n = n1 + n2</li><li><strong>Volume</strong>: V = N * lg n</li><li><strong>Difficulty</strong>: D = (n1 * N2) / (2 * n2)</li><li><strong>Effort</strong>: E = D * V</li><li><strong>Time to Implement</strong>: T = E / 18 (in seconds) <a href="/2/references/">[vi]</a></li></ul><p>The program volume V is the minimum number of bits needed to encode the program. It represents the size of the program while taking into account the programming language. <br>The difficulty metric indicates how difficult a program is to write or understand. <br>Effort denotes the \"mental effort\" required to develop the software, or to recreate the same in another programming language<a href="/2/references/">[iv]</a>.</p>','<ul>  <li>Categorize projects using COCOMO, and estimate effort and development time required for a project</li>  <li>Estimate the program complexity and effort required to recreate it using Halstead\'s metrics</li></ul>','3.00','<p>After gathering the entire requirements specific to software project usually we need to think about different solution strategy for the project. Expert business analysts are analyzing their benefits and as well as their shortcomings by means of cost, time and resources require to develop it. </p><p>In this experiment, we will learn how to estimate cost, effort and duration for a software project, and then select one solution approach which will be found suitable to fulfill the organizational goal. </p>'),(3,'Modeling UML Use Case Diagrams and Capturing Use Case Scenarios','<h2>Use case diagrams</h2><p>Use case diagrams belong to the category of behavioural diagram of UML diagrams.Use case diagrams aim to present a graphical overview of the functionality provided by the system. It consists of a set of actions (referred to as use cases) that the concerned system can perform, one or more actors, and dependencies among them. </p><h3>Actor</h3><p>An actor can be defined as <a href="/3/references/">[1]</a> an object or set of objects, external to the system, which interacts with the system to get some meaningful work done. Actors could be human, devices, or even other systems.</p><p>For example, consider the case where a customer <em>withdraws cash</em> from an ATM. Here, customer is a human actor.</p><p>Actors can be classified as below <a href="/3/references/">[2], [i]</a>:<ul>    <li>    <strong>Primary actor</strong>: They are principal users of the system, who    fulfill their goal by availing some service from the system. For example, a     customer uses an ATM to withdraw cash when he needs it. A customer is the     primary actor here.    </li>    <li>    <strong>Supporting actor</strong>: They render some kind of service to the     system. \"Bank representatives\", who replenishes the stock of cash, is such     an example. It may be noted that replenishing stock of cash in an ATM is not     the prime functionality of an ATM.    </li>    </ul></p><p>    In a use case diagram primary actors are usually drawn on the top left side of the diagram.</p><h3>Use Case</h3><p>A use case is simply <a href="/3/references/">[1]</a> a functionality provided by a system.</p><p>Continuing with the example of the ATM, <em>withdraw cash</em> is a functionality that the ATM provides. Therefore, this is a use case. Other possible use cases includes, <em>check balance</em>, <em>change PIN</em>, and so on. </p><p>Use cases include both successful and unsuccessful scenarios of user interactions with the system. For example, authentication of a customer by the ATM would fail if he enters wrong PIN. In such case, an error message is displayed on the screen of the ATM.</p><h3>Subject</h3><p>Subject is simply <a href="/3/references/">[iii]</a> the system under consideration. Use cases apply to a subject. For example, an ATM is a subject, having multiple use cases, and multiple actors interact with it.However, one should be careful of external systems interacting with the subject as actors.</p><h2>Graphical Representation</h2><p>An actor is represented by a stick figure and name of the actor is written below it. A use case is depicted by an ellipse and name of the use case is written inside it. The subject is shown by drawing a rectangle. Label for the system could be put inside it. Use cases are drawn inside the rectangle, and actors are drawn outside the rectangle, as shown in figure - 01.    <img class=\"diagram\" alt=\"Use case diagram\" style=\"display: block;\"    src=\"_STATIC_URL_isad/images/theory/03/use_case_1.png\">Figure - 01: A use case diagram for a book store</p><h2>Association between Actors and Use Cases</h2><p>A use case is triggered by an actor. Actors and use cases are connected through binary associations indicating that the two communicates through message passing.</p><p>An actor must be associated with at least one use case. Similarly, a given use case must be associated with at least one actor. Association among the actors are usually not shown. However, one can depict the class hierarchy among actors.</p><h2>Use Case Relationships</h2><p>Three types of relationships exist among use cases:<ul>    <li>Include relationship</li>    <li>Extend relationship</li>    <li>Use case generalization</li></ul></p><h3>Include Relationship</h3><p>Include relationships are used to depict common behaviour that are shared by multiple use cases. This could be considered analogous to writing functions in a program in order to avoid repetition of writing the same code. Such a function would be called from different points within the program.</p><h4>Example</h4><p>For example, consider an email application. A user can send a new mail, reply to an email he has received, or forward an email. However, in each of these three cases, the user must be logged in to perform those actions. Thus, we could have a <em>login</em> use case, which is included by <em>compose mail</em>, <em>reply</em>, and <em>forward email</em> use cases. The relationship is shown in figure - 02.<center>    <img class=\"diagram\" alt=\"Include relationship\"     src=\"_STATIC_URL_isad/images/theory/03/use_case_include.png\">Figure - 02: Include relationship between use cases</center></p><h4>Notation</h4><p>Include relationship is depicted by a dashed arrow with a &laquo;include&raquo; stereotype from the including use case to the included use case.</p><h3>Extend Relationship</h3><p>Use case extensions are used used to depict any variation to an existing use case. They are used to the specify the changes required when any assumption made by the existing use case becomes false <a href="/3/references/">[iv, v]</a>.</p><h4>Example</h4><p>Let\'s consider an online bookstore. The system allows an authenticated user to buy selected book(s). While the order is being placed, the system also allows to  specify any special shipping instructions <a href="/3/references/">[vii]</a>, for example, call the customer before delivery. This <em>Shipping Instructions</em> step is optional, and not a part of the main <em>Place Order</em> use case. Figure - 03 depicts such relationship.<center>    <img class=\"diagram\" alt=\"Extend relationship\"     src=\"_STATIC_URL_isad/images/theory/03/use.png\">Figure - 03: Extend relationship between use cases</center></p><h4>Notation</h4><p>Extend relationship is depicted by a dashed arrow with a &laquo;extend&raquo; stereotype from the extending use case to the extended use case.</p><h3>Generalization Relationship</h3><p>Generalization relationship are used to represent the inheritance between use cases. A derived use case specializes some functionality it has already inherited from the base use case.</p><h4>Example</h4><p>To illustrate this, consider a graphical application that allows users to draw polygons. We could have a use case <em>draw polygon</em>. Now, rectangle is a particular instance of polygon having four sides at right angles to each other. So, the use case <em>draw rectangle</em> inherits the properties of the use case <em>draw polygon</em> and overrides it\'s drawing method. This is an example of generalization relationship. Similarly, a generalization relationship exists between <em>draw rectangle</em> and <em>draw square</em> use cases. The relationship has been illustrated in figure - 04.<center>    <img class=\"diagram\" alt=\"Generalization relationship\"     src=\"_STATIC_URL_isad/images/theory/03/use_case_generalize.png\">Figure - 04: Generalization relationship among use cases</center></p><h4>Notation</h4><p>Generalization relationship is depicted by a solid arrow from the specialized (derived) use case to the more generalized (base) use case.</p><h2>Identifying Actors</h2><p>Given a problem statement, the actors could be identified by asking the following questions <a href="/3/references\">[2]</a>:<ul>    <li>Who gets most of the benefits from the system? (The answer would lead to    the identification of the primary actor)</li>    <li>Who keeps the system working?     (This will help to identify a list of potential users)</li>    <li>What other software / hardware does the system interact with?</li>    <li>Any interface (interaction) between the concerned system and any other     system?</li></ul></p><h2>Identifying Use cases</h2><p>Once the primary and secondary actors have been identified, we have to find out their goals i.e. what are the functionality they can obtain from the system. Any use case name should start with a verb like, &quot;Check balance&quot;.</p><h2>Guidelines for drawing Use Case diagrams</h2><p>Following general guidelines could be kept in mind while trying to draw a use case diagram <a href="/3/references/">[1]</a>:<ul>    <li>Determine the system boundary</li>    <li>Ensure that individual actors have well-defined purpose</li>    <li>Use cases identified should let some meaningful work done by the actors    </li>    <li>Associate the actors and use cases -- there should not be any     actor or use case floating without any connection</li>    <li>Use include relationship to encapsulate common behaviour among use cases    , if any</li></ul><p><p>Also look at <a href="/3/references/">[ix]</a> for further tips.</p>','<ul>  <li>How to identify different actors and use cases from a given problem statement</li>  <li>How to associate use cases with different types of relationships</li>  <li>How to draw a use-case diagram</li></ul>','3.00','<p>Use case diagram is a platform that can provide a common understanding for the end-users, developers and the domain experts. It is used to capture the basic functionality i.e. use cases, and the users of those available functionality, i.e. actors, from a given problem statement. </p><p>In this experiment, we will learn how use cases and actors can be captured and how different use cases are related in a system. </p>'),(4,'E-R Modeling from the Problem Statements','<h2>Entity Relationship Model</h2><p>Entity-Relationship model is used to represent a logical design of a database to be created. In ER model, real world objects (or concepts) are abstracted as entities, and different possible associations among them are modeled as relationships.</p><p>For example, student and school -- they are two entities. Students study in school. So, these two entities are associated with a relationship \"Studies in\".</p><p>As another example, consider a system where some job runs every night, which updates the database. Here, job and database could be two entities. They are associated with the relationship \"Updates\".</p><h2>Entity Set and Relationship Set</h2><p>An entity set is a collection of all similar entities. For example, \"Student\" is an entity set that abstracts all students. Ram, John are specific entities belonging to this set. Similarly, a \"Relationship\" set is a set of similar relationships.</p><h2>Attributes of Entity</h2><p>Attributes are the characteristics describing any entity belonging to an entity set. Any entity in a set can be described by zero or more attributes.</p><p>For example, any student has got a name, age, an address. At any given time a student can study only at one school. In the school he would have a roll number, and of course a grade in which he studies. These data are the attributes of the entity set Student. </p><h2>Keys</h2><p>One or more attribute(s) of an entity set can be used to define the following keys:</p><ul>    <li>    <strong>Super key:</strong> One or more attributes, which when taken     together, helps to uniquely identify an entity in an entity set. For     example, a school can have any number of students. However, if we know grade     and roll number, then we can uniquely identify a student in that school.    </li>    <li>    <strong>Candidate key:</strong> It is a minimal subset of a super key. In     other words, a super key might contain extraneous attributes, which do not    help in identifying an object uniquely. When such attributes are removed,     the key formed so is called a candidate key.    </li>    <li>    <strong>Primary key:</strong> A database might have more than one    candidate key. Any candidate key chosen for a particular implementation of     the database is called a primary key.    </li>    <li>    <strong>Prime attribute:</strong> Any attribute taking part in a super     key    </li></ul><h2>Weak Entity</h2><p>An entity set is said to be weak if it is dependent upon another entity set. A weak entity can\'t be uniquely identified only by it\'s attributes. In other words, it doesn\'t have a super key.</p><p>For example, consider a company that allows employees to have travel allowance for their immediate family. So, here we have two entity sets: employee and family, related by \"Can claim for\". However, family doesn\'t have a super key. Existence of a family is entirely dependent on the concerned employee. So, it is meaningful only with reference to employee.</p><h2>Entity Generalization and Specialization</h2><p>Once we have identified the entity sets, we might find some similarities among them. For example, multiple person interacts with a banking system. Most of them are customers, and rest employees or other service providers. Here, customers, employees are persons, but with certain specializations. Or in other way, person is the generalized form of customer and employee entity sets.</p><p>ER model uses the \"ISA\" hierarchy to depict specialization (and thus, generalization).</p><h2>Mapping Cardinalities</h2><p>One of the main tasks of ER modeling is to associate different entity sets. Let\'s consider two entity sets E1 and E2 associated by a relationship set R. Based on the number of entities in E1 and E2 are associated with, we can have the following four type of mappings:<ul>    <li>    <strong>One to one:</strong> An entity in E1 is related to at most a single    entity in E2, and vice versa    </li>    <li>    <strong>One to many:</strong> An entity in E1 could be related to zero or     more entities in E2. Any entity in E2 could be related to at most a single     entity in E1.    </li>    <li>    <strong>Many to one:</strong> Zero or more number of entities in E1 could be     associated to a single entity in E2. However, an entity in E2 could be     related to at most one entity in E1.    </li>    <li>    <strong>Many to many:</strong> Any number of entities could be related to     any number of entities in E2, including zero, and vice versa.    </li></ul></p>	<h2>ER Diagram</h2><p>From a given problem statement we identify the possible entity sets, their attributes, and relationships among different entity sets. Once we have these information, we represent them pictorially, called an entity-relationship (ER) diagram.</p><h2>Graphical Notations for ER Diagram</h2></p><table class=\"techno\" style=\"width: 800px;\"><thead>  <tr style=\"text-align: center;\">    <th>Term</th>    <th>Notation</th>    <th>Remarks</th>  </tr></thead><tbody style=\"text-align: left;\">  <tr>    <td>Entity set</td>    <td><img src=\"_STATIC_URL_isad/images/theory/04/entity.png\" alt=\"Entity\" >    </td>    <td>    Name of the set is written inside the rectangle    </td>  </tr>  <tr>    <td>Attribute</td>    <td><img src=\"_STATIC_URL_isad/images/theory/04/attribute.png\" alt=\"Attribute\" >    </td>    <td>    Name of the attribute is written inside the ellipse    </td>  </tr>  <tr>    <td>Entity with attributes</td>    <td><img src=\"_STATIC_URL_isad/images/theory/04/entity_attributes.png\"     alt=\"Entity with attributes\">    </td>    <td>Roll is the primary key; denoted with an underline</td>  </tr>  <tr>    <td>Weak entity set</td>    <td><img src=\"_STATIC_URL_isad/images/theory/04/weak_entity.png\"     alt=\"Weak entity\" >    </td>    <td></td>  </tr>  <tr>    <td>Relationship set</td>    <td><img src=\"_STATIC_URL_isad/images/theory/04/relationship.png\"     alt=\"Relationship\" >    </td>    <td>    Name of the relationship is written inside the diamond    </td>  </tr>  <tr>    <td>Related enity sets</td>    <td><img src=\"_STATIC_URL_isad/images/theory/04/entity_relationship.png\"     alt=\"Entity relationship\" >    </td>    <td></td>  </tr>  <tr>    <td>Relationship cardinality</td>    <td><img src=\"_STATIC_URL_isad/images/theory/04/relationship_cardinality.png\"     alt=\"Relationship cardinality\" >    </td>    <td>A person can own zero or more cars but no two persons can own the same     car</td>  </tr>  <tr>    <td>Relationship with weak entity set</td>    <td><img src=\"_STATIC_URL_isad/images/theory/04/weak_entity_relationship.png\"     alt=\"Weak entity relationship\" >    </td>    <td></td>  </tr></tbody></table><p><h2>Importance of ER modeling</h2><p>Figure - 01 shows the different steps involved in implementation of a (relational) database.<br><center><img src=\"_STATIC_URL_isad/images/theory/04/database_design_steps.png\" id=\"diagram\" alt=\"Database design steps\" >Figure - 01: Steps to implement a RDBMS</center></p><p>Given a problem statement, the first step is to identify the entities, attributes and relationships. We represent them using an ER diagram. Using this ER diagram, table structures are created, along with required constraints. Finally, these tables are normalized in order to remove redundancy and maintain data integrity. Thus, to have data stored efficiently, the ER diagram is to be drawn as much detailed and accurate as possible.</p>','<ul><li>Identify entity sets, their attributes, and various relationships</li><li>Represent the data model through ER diagram</li></ul>','3.00','<p>Developing databases is a very important task to develop a system. Before going to form exact database tables and establishing relationships between them, we conceptually or logically can model our database using ER diagrams. </p><p>In this experiment we will learn how to find the entities, its attributes and how the relationships between the entities can be established for a system. </p>'),(5,'Identifying Domain Classes from the Problem Statements','<h2>Domain Class</h2><p>In Object Oriented paradigm Domain Object Model has become subject of interest for its excellent problem comprehending capabilities towards the goal of designing a good software system. Domain Model, as a conceptual model gives proper understanding of problem description through its highly effective component – the Domain Classes. Domain classes are the abstraction of key entities, concepts or ideas presented in the problem statement <a href="/5/references/">[iv]</a>. As stated in <a href="/5/references/">[v]</a>, domain classes are used for representing business activities during the analysis phase. </p><p>Below we discuss some techniques that can be used to identify the domain classes.</p><h2>Traditional Techniques for Identification of Classes</h2><h3>Grammatical Approach Using Nouns</h3><p>This object identification technique was proposed by Russell J. Abbot, and Grady Booch made the technique popular <a href="/5/references/">[1]</a>. This technique involves grammatical analysis of the problem statement to identify list of potential classes. The logical steps are:<ol><li>Obtain the user requirements (problem statement) as a simple, descriptive English text. This basically corresponds to the use-case diagram for the problem statement. </li><li>Identify and mark the nouns, pronouns and noun phrases from the above problem statements</li><li>List of potential classes is obtained based on the category of the nouns (details given later). For example, nouns that direct refer to any person, place, or entity in general, correspond to different objects. And so does singular proper nouns.  On the other hand, plural nouns and common nouns are candidates that usually map into classes. </li></ol></p><h3>Advantages</h3><p>This is one of the simplest approaches that could be easily understood and applied by a larger section of the user base. The problem statement does not necessarily be in English, but in any other language.</p><h3>Disadvantages</h3><p>The problem statement always may not help towards correct identification of a class. At times it could give us redundant classes. At times the problem statement may use abbreviations for large systems or concepts, and therefore, the identified class may actually point to an aggregate of classes. In other words, it may not find all the objects.</p><h2>Using Generalization</h2><p>In this approach, all potential objects are classified into different groups based on some common behaviour. Classes are derived from these groups.</p><h2>Using Subclasses</h2><p>Here, instead of identifying objects one goes for identification of classes based on some similar characteristics. These are the specialized classes. Common characteristics are taken from them to form the higher level generalized classes.</p><h2>Steps to Identify Domain Classes from Problem Statement</h2><p>We now present the steps to identify domain classes from a given problem statement. This approach is mostly based on the “Grammatical approach using nouns” discussed above, with some insights from <a href="/5/references/">[i]</a>.<ol><li>Make a list of potential objects by finding out the nouns and noun phrases from narrative problem statement</li><li>Apply subject matter expertise (or domain knowledge) to identify additional classes</li><li>Filter out the redundant or irrelevant classes</li><li>Classify all potential objects based on categories. We follow the category table as described  by Ross (table 5-3, pg 88, <a href="/5/references/">[1]</a>)  <table class=\"data\">  <thead>  <tr>    <th>Categories</th>	                <th>Explanation</th>  </tr>  </thead>  <tbody>  <tr>    <td>People</td>    <td>Humans who carry out some function</td>  </tr>  <tr>    <td>Places</td>    <td>Areas set aside for people or things</td>  </tr>  <tr>    <td>Things</td>    <td>Physical objects</td>  </tr>  <tr>    <td>Organizations</td>    <td>Collection of people, resources, facilities and capabilities having a defined mission</td>  </tr>  <tr>    <td>Concepts</td>    <td>Principles or Ideas not tangible</td>  </tr>  <tr>    <td>Events</td>    <td>Things that happen (usually at a given date and time), or as a steps in an ordered sequence</td>  </tr>  </tbody>  </table></li><li>Group the objects based on similar attributes. While grouping we should remember that<ul><li>Different nouns (or noun phrases) can actually refer to the same thing (examples: house, home, abode) </li><li>Same nouns (or noun phrases) could refer to different things or concepts (example: I go to school every day / This school of thought agrees with the theory) </li></ul></li><li>Give related names to each group to generate the final list of top level classes</li><li>Iterate over to refine the list of classes</li></ol></p><h2>Advanced Concepts</h2><p>Identification of domain classes might not be a simple task for novices. It requires expertise and domain knowledge to identify business classes from plain English text. The concepts presented here have been kept simple in order to make a student familiarize with the subject. A lot of work has been done in this area, and various techniques have been proposed to identify domain classes. Interested readers may look at the following paper for an advanced treatment on this subject matter.<br><a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.94.1778&rep=rep1&type=pdf&ei=_5KtTqPLN8XMrQeZltG7DA&usg=AFQjCNFVBf-jL2ZUfyuldbJmjST1zFsrig&sig2=HRfe_1TUy4Q9UB66xduKtw&cad=rja\">I. Y. Song, K. Yano, J. Trujillo, and S. Luján-Mora. \"A Taxonomic Class Modeling Methodology for Object-Oriented Analysis\", In <em>Information Modeling Methods and Methodologies</em>, Advanced Topics in Databases Series, Ed. (J Krostige, T. Halpin, K. Siau), Idea Group Publishing, 2004, pp. 216-240.</a></p>','<ul>  <li>Understand the concept of domain classes  <li>Identify a list of potential domain classes from a given problem statement</li>  </ul>','3.00','<p>Same types of objects are typically implemented by class in object oriented programming.  As the structural unit of the system can be represented through the classes, so, it is very important to identify the classes before start implementing all the logical flows of the system. </p><p>In this experiment we will learn how to identify the classes from a given problem statement. </p>'),(6,'Statechart and Activity Modeling','<h2>Statechart Diagrams</h2><p>In case of Object Oriented Analysis and Design, a system is often abstracted by one or more classes with some well defined behaviour and states. A <em>statechart diagram</em> is a pictorial representation of such a system, with all it\'s states, and different events that lead transition from one state to another.</p><p>To illustrate this, consider a computer. Some possible states that it could have are: running, shutdown, hibernate. A transition from running state to shutdown state occur when user presses the \"Power off\" switch, or clicks on the \"Shut down\" button as displayed by the OS. Here, clicking on the shutdown button, or pressing the power off switch act as external events causing the transition.</p><p>Statechart diagrams are normally drawn to model the behaviour of a complex system. For simple systems this is optional.</p><h2>Building Blocks of a Statechart Diagram</h2><h3>State</h3><p>A state is any \"distinct\" stage that an object (system) passes through in it\'s lifetime. An object remains in a given state for finite time until \"something\" happens, which makes it to move to another state.&nbsp; All such states can be broadly categorized into following three types:</p><ul>    <li>    <strong>Initial</strong>: The state in which an object remain when created    </li>    <li>    <strong>Final</strong>: The state from which an object do not move to any     other state [optional]    </li>    <li>    <strong>Intermediate</strong>: Any state, which is neither initial, nor     final    </li></ul><p>As shown in figure-01, an initial state is represented by a circle filled with black. An intermediate state is depicted by a rectangle with rounded corners. A final state is represented by a unfilled circle with an inner black-filled circle.<img class=\"diagram\" src=\"_STATIC_URL_isad/images/theory/06/states_symbol.png\" alt=\"State\"> <span class=\"diagram-label\">Figure-01: Representation of initial, intermediate, and final states of a statechart diagram</span>Intermediate states usually have two compartments, separated by a horizontal line, called the name compartment and internal transitions compartment <a href="/6/references/">[iv]</a>. They are described below:</p><ul>    <li>    <strong>Name compartment</strong>: Contains the name of the state, which is     a short, simple, descriptive string    </li>    <li>    <strong>Internal transitions compartment</strong>: Contains a list of     internal activities performed as long as the system is in this state    </li></ul><p>The internal activities are indicated using the following syntax: <span class=\"syntax\">action-label / action-expression</span>. Action labels could be any condition indicator. There are, however, four special action labels:</p><ul>    <li><strong>Entry</strong>: Indicates activity performed when the system     enter this state</li>    <li><strong>Exit</strong>: Indicates activity performed when the system     exits this state</li>    <li><strong>Do</strong>: indicate any activity that is performed while the     system remain in this state or until the action expression results in a     completed computation</li>    <li><strong>Include</strong>: Indicates invocation of a sub-machine</li></ul><p>Any other action label identify the event (internal transition) as a result of which the corresponding action is triggered. Internal transition is almost similar to self transition, except that the former doesn\'t result in execution of entry and exit actions. That is, system doesn\'t exit or re-enter that state. Figure-02 shows the syntax for representing a typical (intermediate) state<img class=\"diagram\" src=\"_STATIC_URL_isad/images/theory/06/state.png\" alt=\"State\"><span class=\"diagram-label\">Figure-02: A typical state in a statechart diagram</span>States could again be either simple or composite (a state congaing other states). Here, however, we will deal only with simple states.</p><h3>Transition</h3><p>Transition is movement from one state to another state in response to an external stimulus (or any internal event). A transition is represented by a solid arrow from the current state to the next state. It is labeled by: <span class=\"syntax\">event [guard-condition]/[action-expression]</span>, where</p><ul>    <li><strong>Event</strong> is the what is causing the concerned transition     (mandatory) -- Written in past tense <a href="/6/references/">    [iii]</a></li>    <li><strong>Guard-condition</strong> is (are) precondition(s), which must be     true for the transition to happen [optional]</li>    <li><strong>Action-expression</strong> indicate action(s) to be performed as     a result of the transition [optional]</li></ul><p>It may be noted that if a transition is triggered with one or more guard-condition(s), which evaluate to false, the system will continue to stay in the present state. Also, not all transitions do result in a state change. For example, if a queue is full, any further attempt to append will fail until the delete method is invoked at least once. Thus, state of the queue doesn\'t change in this duration.</p><h3>Action</h3><p>As mentioned in <a href="/6/references/">[ii]</a>, actions represents behaviour of the system. While the system is performing any action for the current event, it doesn\'t accept or process any new event. The order in which different actions are executed, is given below:</p><ol>    <li>Exit actions of the present state</li>    <li>Actions specified for the transition</li>    <li>Entry actions of the next state</li></ol><p>Figure-03 shows a typical statechart diagram with all it\'s syntaxes.<img class=\"diagram\" src=\"_STATIC_URL_isad/images/theory/06/state_transition.png\" alt=\"State transition\"> <span class=\"diagram-label\">Figure-03: A statechart diagram showing transition from state A to B</span></p><h2>Guidelines for drawing Statechart Diagrams</h2><p>Following steps could be followed, as suggested in <a href="/6/references/">[i]</a> to draw a statechart diagram:</p><ul>    <li>For the system to developed, identify the distinct states that it passes     through</li>    <li>Identify the events (and any precondition) that cause the state     transitions. Often these would be the methods of a class as identified in a     class diagram.</li>    <li>Identify what activities are performed while the system remains in a     given state</li></ul><p>&nbsp;</p><h2>Activity Diagrams</h2><p>Activity diagrams fall under the category of behavioural diagrams in Unified Modeling Language. It is a high level diagram used to visually represent the flow of control in a system. It has similarities with traditional flow charts. However, it is more powerful than a simple flow chart since it can represent various other concepts like concurrent activities, their joining, and so on <a href="/6/references/">[vii, viii]</a>.</p><p>Activity diagrams, however, cannot depict the message passing among related objects. As such, it can\'t be directly translated into code. These kind of diagrams are suitable for confirming the logic to be implemented with the business users. These diagrams are typically used when the business logic is complex. In simple scenarios it can be avoided entirely <a href="/6/references/">[ix]</a>.</p><h2>Components of an Activity Diagram</h2><p>Below we describe the building blocks of an activity diagram.</p><h3>Activity</h3><p>An activity denotes a particular action taken in the logical flow of control. This could simply be invocation of a mathematical function, alter an object\'s properties and so on <a href="/6/references/">[x]</a>. An activity is represented with a rounded rectangle, as shown in table-01. A label inside the rectangle identifies the corresponding activity.</p><p>There are two special type of activity nodes: initial and final. They are represented with a filled circle, and a filled in circle with a border respectively (table-01). Initial node represents the starting point of a flow in an activity diagram. There could be multiple initial nodes, which means that invoking that particular activity diagram would initiate multiple flows.</p><p>A final node represents the end point of all activities. Like an initial node, there could be multiple final nodes. Any transition reaching a final node would stop all activities.</p><h3>Flow</h3><p>A flow (also termed as edge, or transition) is represented with a directed arrow. This is used to depict transfer of control from one activity to another, or to other types of components, as we will see below. A flow is often accompanied with a label, called the guard condition, indicating the necessary condition for the transition to happen. The syntax to depict it is <span class=\"syntax\">[guard condition]</span>.</p><h3>Decision</h3><p>A decision node, represented with a diamond, is a point where a single flow enters and two or more flows leave. The control flow can follow only one of the outgoing paths. The outgoing edges often have guard conditions indicating true-false or if-then-else conditions. However, they can be omitted in obvious cases. The input edge could also have guard conditions. Alternately, a note can be attached to the decision node indicating the condition to be tested.</p><h3>Merge</h3><p>This is represented with a diamond shape, with two or more flows entering, and a single flow leaving out. A merge node represents the point where at least a single control should reach before further processing could continue.</p><h3>Fork</h3><p>Fork is a point where parallel activities begin. For example, when a student has been registered with a college, he can in parallel apply for student ID card and library card. A fork is graphically depicted with a black bar, with a single flow entering and multiple flows leaving out.</p><h3>Join</h3><p>A join is depicted with a black bar, with multiple input flows, but a single output flow. Physically it represents the synchronization of all concurrent activities. Unlike a merge, in case of a join all of the incoming controls <strong>must be completed</strong> before any further progress could be made. For example, a sales order is closed only when the customer has receive the product, <strong>and</strong> the sales company has received it\'s payment.</p><h3>Note</h3><p>UML allows attaching a note to different components of a diagram to present some textual information. The information could simply be a comment or may be some constraint. A note can be attached to a decision point, for example, to indicate the branching criteria.</p><h3>Partition</h3><p>Different components of an activity diagram can be logically grouped into different areas, called partitions or swimlanes. They often correspond to different units of an organization or different actors. The drawing area can be partitioned into multiple compartments using vertical (or horizontal) parallel lines. Partitions in an activity diagram are not mandatory.</p><p>The following table shows commonly used components with a typical activity diagram.</p><table class=\"techno\" style=\"margin: 0 auto; width: 400px; text-align: center;\">   <thead>    <tr>      <th>Component</td>      <th>Graphical Notation</td>    </tr>  </thead>  <tbody>    <tr>        <td>Activity</td>        <td><img src=\"_STATIC_URL_isad/images/theory/06/activity/activity.png\" alt=\"Activity\"></td>    </tr>    <tr>        <td>Flow</td>        <td><img src=\"_STATIC_URL_isad/images/theory/06/activity/flow.png\" alt=\"Flow\"></td>    </tr>    <tr>        <td>Decision</td>        <td><img src=\"_STATIC_URL_isad/images/theory/06/activity/decision.png\" alt=\"Decision\"></td>    </tr>    <tr>        <td>Merge</td>        <td><img src=\"_STATIC_URL_isad/images/theory/06/activity/merge.png\" alt=\"Merge\"></td>    </tr>    <tr>        <td>Fork</td>        <td><img src=\"_STATIC_URL_isad/images/theory/06/activity/fork.png\" alt=\"Fork\"></td>    </tr>    <tr>        <td>Join</td>        <td><img src=\"_STATIC_URL_isad/images/theory/06/activity/join.png\" alt=\"Join\"></td>    </tr>    <tr>        <td>Note</td>        <td><img src=\"_STATIC_URL_isad/images/theory/06/activity/note.png\" alt=\"Note\"></td>    </tr>  </tbody></table><span class=\"diagram-label\">Table-01: Typical components used in an activity diagram</span></p><p>Apart from the above stated components, there are few other components as well (representing events, sending of signals, nested activity diagrams), which won\'t be discussed here. The reader is suggested to go through <a href="/6/references/">[x]</a> for further knowledge.</p><h3>A Simple Example</h3><p>Figure-04 shows a simple activity diagram with two activities. The figure depicts two stages of a form submission. At first a form is filled up with relevant and correct information. Once it is verified that there is no error in the form, it is then submitted. The two other symbols shown in the figure are the initial node (dark filled circle), and final node (outer hollow circle with inner filled circle). It may be noted that there could be zero or more final node(s) in an activity diagram <a href="/6/references/">[ix]</a>.<img src=\"_STATIC_URL_isad/images/theory/06/activity/sample_activity_dia.png\" alt=\"Activity diagram\" class=\"diagram\"><span class=\"diagram-label\">Figure-04: A simple activity diagram.</span></p><h2>Guidelines for drawing an Activity Diagram</h2><p>The following general guidelines could be followed to pictorially represent a complex logic.</p><ul>    <li>Identify tiny pieces of work being performed by the system</li>    <li>Identify the next logical activity that should be performed</li>    <li>Think about all those conditions that should be made, and all those     constraints that should be satisfied, before one can move to the next     activity</li>    <li>Put non-trivial guard conditions on the edges to avoid confusion</li></ul>','<ul><li>Identify the distinct states a system have</li><li>Identify the events causing transitions from one state to another</li><li>Represent the above information pictorially using simple states</li><li>Identify activities representing basic units of work, and represent their flow</li></ul>','3.00','<p>Capturing the dynamic view of a system is very important for a developer to develop the logic for a system. State chart diagrams and activity diagrams are two popular UML diagram to visualize the dynamic behavior of an information system. </p><p>In this experiment, we will learn about the different components of activity diagram and state chart diagram and how these can be used to represent the dynamic nature of an information system. </p>'),(7,'Modeling UML Class Diagrams and Sequence diagrams','<h2>Structural and Behavioral aspects</h2><p>Developing a software system in object oriented approach is very much dependent on understanding the problem. Some aspects and the respective models are used to describe problems and in context of those aspects the respective models give a clear idea regarding the problem to a designer. For developer, structural and behavioral aspects are two key aspects to see through a problem to design a solution for the same.</p><h2>Class diagram </h2><p>It is a graphical representation for describing a system in context of its static construction<a href="/7/references/">[1]</a>.</p><h2>Elements in class diagram </h2><p>Class diagram contains the system classes with its data members, operations and relationships between classes.</p><h2>Class</h2><p>A set of objects containing similar data members and member functions is described by a class. In UML syntax, class is identified by solid outline rectangle with three compartments which contain</p><ul><li><strong>Class name</strong></li><p>A class is uniquely identified in a system by its name. A textual string <a href="/7/references/">[2]</a>is taken as class name. It lies in the first compartment in class rectangle.</p><li><strong>Attributes</strong></li><p>Property shared by all instances of a class. It lies in the second compartment in class rectangle.</p><li><strong>Operations</strong></li><p>An execution of an action can be performed for any object of a class. It lies in the last compartment in class rectangle.</p><p><strong>Example</strong></p><p>To build a structural model for an Educational Organization, \'Course\' can be treated as a class which contains attributes \'courseName\' & \'courseID\' with the operations \'addCourse()\' & \'removeCourse()\' allowed to be performed for any object to that class. <center><img class=\"diagram\" src=\"_STATIC_URL_isad/images/theory/07/exp71.jpg\" alt=\"State\"> Figure-01: </center></p><li><strong>Generalization/Specialization</strong></li><p> It describes how one class is derived from another class. Derived class inherits the properties of its parent class. </p><p><strong>Example</strong><center><img class=\"diagram\" src=\"_STATIC_URL_isad/images/theory/07/exp72.jpg\" alt=\"State\"> Figure-02: </center></p><p>Geometric_Shapes is the class that describes how many sides a particular shape has. Triangle, Quadrilateral and Pentagon are the classes that inherit the property of the Geometric_Shapes class. So the relations among these classes are generalization. Now Equilateral_Triangle, Isosceles_Triangle and Scalene_Triangle, all these three classes inherit the properties of Triangle class as each one of them has three sides. So, these are specialization of Triangle class.</p></ul><h2>Relationships</h2><p>Existing relationships in a system describe legitimate connections between the classes in that system.</p><ul><li><strong>Association</strong></li><p>It is an instance level relationship<a href="/7/references/">[i]</a> that allows exchanging messages among the objects of both ends of association. A simple straight line connecting two class boxes represent an association. We can give a name to association and also at the both end we may indicate role names and multiplicity of the adjacent classes. Association may be uni-directional. </p><p><strong>Example</strong></p><p>In structure model for a system of an organization an employee (instance of \'Employee\' class) is always assigned to a particular department (instance of \'Department\' class) and the association can be shown by a line connecting the respective classes.<center><img class=\"diagram\" src=\"_STATIC_URL_isad/images/theory/07/exp73.jpg\" alt=\"State\"> Figure-03: </center></p><li><strong>Aggregation</strong></li><p>It is a special form of association which describes a part-whole<a href="/7/references/">[i]</a>  relationship between a pair of classes. It means, in a relationship, when a class holds some instances of related class, then that relationship can be designed as an aggregation.</p><p><strong>Example</strong></p><p>For a supermarket in a city, each branch runs some of the departments they have. So, the relation among the classes \'Branch\' and \'Department\' can be designed as an aggregation. In UML, it can be shown as in the fig. below<center><img class=\"diagram\" src=\"_STATIC_URL_isad/images/theory/07/exp74.jpg\" alt=\"State\"> Figure-04: </center></p><li></strong>Composition </strong><a href="/7/references/">[i]</a> </li><p>It is a strong from of aggregation which describes that whole is completely owns its part. Life cycle of the part depends on the whole.</p><p><strong>Example</strong></p><p>Let consider a shopping mall has several branches in different locations in a city. The existence of branches completely depends on the shopping mall as if it is not exist any branch of it will no longer exists in the city. This relation can be described as composition and can be shown as below<center><img class=\"diagram\" src=\"_STATIC_URL_isad/images/theory/07/exp75.jpg\" alt=\"State\"> Figure-05: </center></p><li><strong>Multiplicity</strong></li><p>It describes how many numbers of instances of one class is related to the number of instances of another class in an association.</p><p><strong>Notation for different types of multiplicity:</strong><center><img class=\"diagram\" src=\"_STATIC_URL_isad/images/theory/07/exp77.png\" alt=\"State\"> Figure-06: </center></p><p><strong>Example</strong></p><p>One vehicle may have two or more wheels<center><img class=\"diagram\" src=\"_STATIC_URL_isad/images/theory/07/exp76.jpg\" alt=\"State\"> Figure-07: </center></p><!--<li><strong>Dependency</strong></li><p>This relation is presented by dotted arrow and drawn to the independent class from the class which uses it<a href="/7/references/">[1]</a>.</p><p><strong>Example</strong> <a href="/7/references/">[1]</a> (Figure 7.27 Page-253) </p>--></ul><p>&nbsp;</p><h2>Sequence diagram</h2><p>It represents the behavioral aspects of a system<a href="/7/references/">[1]</a>. Sequence diagram shows the interactions between the objects<a href="/7/references/">[1]</a> by means of passing messages from one object to another with respect to time<a href="/7/references/">[2]</a> in a system.</p><h2>Elements in sequence diagram</h2><p>Sequence diagram contains the objects of a system and their life-line bar and the messages passing between them.</p><h2>Object</h2><p>Objects appear at the top portion of sequence diagram<a href="/7/references/">[1]</a>. Object is shown in a rectangle box. Name of object precedes a colon ‘:’ and the class name, from which the object is instantiated.  The whole string is underlined and appears in a rectangle box. Also, we may use only class name or only instance name.</p><!--<p><strong>Example</strong><center><img class=\"diagram\" src=\"_STATIC_URL_isad/images/theory/07/exp78.png\" alt=\"State\"> Figure-08: </center></p>--><p>Objects which are created at the time of execution of use case and are involved in message passing , are appear in diagram, at the point of their creation<a href="/7/references/">[1]</a>.</p><h2>Life-line bar</h2><p>A down-ward vertical line from object-box is shown as the life-line of the object. A rectangle bar on life-line indicates that it is active at that point of time<a href="/7/references/">[1]</a>.</p><h2>Messages</h2>Messages are shown as an arrow from the life-line of sender object to the life-line of receiver object and labeled with the message name. Chronological order of the messages passing throughout the objects life-line show the sequence in which they occur<a href="/7/references/">[1]</a> . There may exist some different types of messages :<ul><li><strong>Synchronous messages:</strong>Receiver start processing the message after receiving it and sender needs to wait until it is made<a href="/7/references/">[iii]</a>. A straight arrow with close and fill arrow-head from sender life-line bar to receiver end, represent a synchronous message<a href="/7/references/">[iii]</a>.</li><li><strong>Asynchronous messages:</strong>For asynchronous message sender needs not to wait for the receiver to process the message<a href="/7/references/">[iv]</a>. A function call that creates thread can be represented as an asynchronous message in sequence diagram<a href="/7/references/">[iv]</a>. A straight arrow with open arrow-head from sender life-line bar to receiver end, represent an asynchronous message<a href="/7/references/">[iii]</a>.</li><li><strong>Return message:</strong>For a function call when we need to return a value to the object, from which it was called, then we use return message. But, it is optional, and we are using it when we are going to model our system in much detail. A dashed arrow with open arrow-head from sender life-line bar to receiver end, represent that message.</li><li><strong>Response message:</strong>One object can send a message to self<a href="/7/references/">[iv]</a>.  We use this message when we need to show the interaction between the same object.</li><center><img class=\"diagram\" src=\"_STATIC_URL_isad/images/theory/07/exp79.png\" alt=\"State\"> Figure-08 </center>','<ul><li>Graphically represent a class, and associations among different classes</li><li>Identify the logical sequence of activities undergoing in a system, and represent them pictorially</li></ul>','3.00','<p>Classes are the structural units in object oriented system design approach, so it is essential to know all the relationships that exist between the classes, in a system.All objects in a system are also interacting to each other by means of passing messages from one object to another. Sequence diagram shows these interactions with time ordering of the messages. </p><p>In this Experiment, we will learn about the representation of class diagram and sequence diagram. We also learn about different relationships that exist among the classes, in a system. </p><p>From the experiment of sequence diagram, we will learn about different types of messages passing in between the objects and time ordering of those messages, in a system. </p>'),(8,'Modeling Data Flow Diagrams','<h2>Data Flow Diagram</h2><p>DFD provides the functional overview of a system. The graphical representation easily overcomes any gap between \'user and system analyst\' and \'analyst and system designer\' in understanding a system. Starting from an overview of the system it explores detailed design of a system through a hierarchy. DFD shows the external entities from which data flows into the process and also the other flows of data within a system. It also includes the transformations of data flow by the process and the data stores to read or write a data.</p><h2>Graphical notations for Data Flow Diagram</h2><table class=\"techno\" style=\"width: 800px ;\"> <thead> <tr style=\"text-align: center;\"><th>Term</th><th>Notation</th><th>Remarks</th></tr></thead> <tbody style=\"text-align: left;\"> <tr><td>External entity </td> <td><img alt=\" External entity \" src=\"_STATIC_URL_isad/images/theory/08/external_entity.png\"><!--_STATIC_URL_isad/images/theory/08/--></td><td> Name of the external entity is written inside the rectangle </td></tr> <tr><td>Process</td> <td><img alt=\" Process \" src=\"_STATIC_URL_isad/images/theory/08/process.png\"></td><td> Name of the process is written inside the circle </td></tr> <tr><td>Data store</td> <td><img alt=\" Data store \" src=\"_STATIC_URL_isad/images/theory/08/data_store.png\"></td><td>A left-right open rectangle is denoted as data store; name of the data store is written inside the shape </td></tr> <tr><td>Data flow</td> <td><img alt=\" Data flow \" src=\"_STATIC_URL_isad/images/theory/08/data_flow.png\"></td><td>Data flow is represented by a directed arc with its data name</td></tr></tbody></table><h2>Explanation of Symbols used in DFD</h2><p><ul><li><strong>Process</strong>:Processes are represented by circle. The name of the process is written into the circle. The name of the process is usually given in such a way that represents the functionality of the process. More detailed functionalities can be shown in the next Level if it is required. Usually it is better to keep the number of processes less than 7 <a href="/8/references/">[i]</a>. If we see that the number of processes becomes more than 7 then we should combine some the processes to a single one to reduce the number of processes and further decompose it to the next level<a href="/8/references/"> [2] </a>.</li><li><strong>External entity</strong>:External entities are only appear in context diagram<a href="/8/references/">[2]</a>. External entities are represented by a rectangle and the name of the external entity is written into the shape. These send data to be processed and again receive the processed data.</li><li><strong>Data store</strong>:Data stares are represented by a left-right open rectangle. Name of the data store is written in between two horizontal lines of the open rectangle. Data stores are used as repositories from which data can be flown in or flown out to or from a process.</li><li><strong>Data flow</strong>:Data flows are shown as a directed edge between two components of a Data Flow Diagram. Data can flow from external entity to process, data store to process, in between two processes and vice-versa.</li></ul></p><h2>Context diagram and leveling DFD  </h2>We start with a broad overview of a system represented in level 0 diagram. It is known as context diagram of the system. The entire system is shown as single process and also the interactions of external entities with the system are represented in context diagram.<br>Further we split the process in next levels into several numbers of processes to represent the detailed functionalities performed by the system. Data stores may appear in higher level DFDs.<br><strong>Numbering of processes : </strong>If process \'p\' in context diagram is split into 3 processes \'p1\', \'p2\' and  \'p3\' in next level then these are labeled as 0.1, 0.2 and 0.3 in level 1 respectively. Let the process \'p3\' is again split into three processes \'p31\', \'p32\' and \'p33\' in level 2, so, these are labeled as 0.3.1, 0.3.2 and 0.3.3 respectively and so on.<br><strong>Balancing DFD: </strong>The data that flow into the process and the data that flow out to the process need to be match when the process is split into in the next level<a href="/8/references/">[2]</a>. This is known as balancing a DFD.<br><br>See simulation<a href="/8/references/">[ii]</a> and case study<a href="/8/references/">[iii]</a> of the experiment to understand data flow diagram in more real context.<p><strong>Note : </strong></p><ol><li>External entities only appear in context diagram<a href="/8/references/">[2]</a> i.e, only at level 0.</li><li>Keep number of processes at each level less than 7<a href="/8/references/">[i]</a>.</li><li>Data flow is not possible in between two external entities and in between two data stores<a href="/8/references/">[i]</a>.</li><li>Data cannot flow from an External entity to a data store and vice-versa<a href="/8/references/">[i]</a>.</li></ol>','<ul><li>Identify external entities and functionalities of any system</li><li>Identify the flow of data across the system</li><li>Represent the flow with Data Flow Diagrams</li></ul>','3.00','<p>Information Systems (IS) help in managing and updating the vast business-related information. Before designing such an IS, it is helpful to identify the various stakeholders, and the information that they would be exchanging with the system. An IS, however, is a large software comprised of several modules, which, in turn, share the process the available data. These data are often stored in databases for further references. A Data Flow Diagram (DFD) is used to pictorially represent the functionalities of the ISs by focusing on the sources and destinations of the data flowing in the system.</p>'),(9,'Estimation of Test Coverage Metrics and Structural Complexity','<h2>Control Flow Graph</h2>    <p>A control flow graph (CFG) is a directed graph where the nodes represent different instructions of a program, and the edges define the sequence of execution of such instructions. Figure 1 shows a small snippet of code (compute the square of an integer) along with it\'s CFG. For simplicity, each node in the CFG has been labeled with the line numbers of the program containing the instructions. A directed edge from node #1 to node #2 in figure 1 implies that after execution of the first statement, the control of execution is transferred to the second instruction.</p><div style=\"padding: 5px; border: 1px solid #3399FF; width: 400px; margin: 0 auto;\">    <div style=\"display: inline; float left; height: 300px;\">        <pre style=\"text-align: left;\" class=\"brush: c;\">int x = 10, x_2 = 0;x_2 = x * x;return x_2;        </pre>        </div>        <div style=\"display: inline;\">        <img alt=\"A simple CFG\"         src=\"_STATIC_URL_isad/images/theory/09/t1_1_cfg_simple.png\">    </div>    Figure 1: A simple program and it\'s CFG</div>                                <p>A program, however, doesn\'t always consist of only sequential statements. There could be branching and looping involved in it as well. Figure 2 shows how a CFG would look like if there are sequential, selection and iteration kind of statements in order.<img class=\"diagram\" alt=\"CFG with branch and loop\" src=\"_STATIC_URL_isad/images/theory/09/t1_2_cfg_types.PNG\" style=\"width: 383px; height: 252px;\"><span class=\"diagram-label\">  Figure 2: CFG for different types of statements</span></p><p>A real life application seldom could be written in a few lines. In fact, it might consist of thousand of lines. A CFG for such a program is likely to become very large, and it would contain mostly straight-line connections. To simplify such a graph different sequential statements could be grouped together to forma <em>basic block</em>. A <strong>basic block</strong> is a <a href="/9/references/">[ii, iii]</a> maximal sequence of program instructions I<sub>1</sub>, I<sub>2</sub>, ..., I<sub>n</sub> such that for any two adjacent instructions I<sub>k</sub> and I<sub>k+1</sub>, the following holds true:</p><ul>    <li>I<sub>k</sub> is executed immediately before I<sub>k+1</sub></li>    <li>I<sub>k+1</sub> is executed immediately after I<sub>k</sub></li>  </ul><p>The size of a CFG could be reduced by representing each basic block with a node. To illustrate this, let\'s consider the following example.</p><pre class=\"brush: cpp;\">    sum = 0;    i = 1;    while (i &le; n) {        sum += i;        ++i;    }    printf(\"%d\", sum);    if (sum &gt; 0) {        printf(\"Positive\");    }</pre><p>The CFG with basic blocks is shown for the above code in figure 3.<img class=\"diagram\" alt=\"CFG with basic blocks\" src=\"_STATIC_URL_isad/images/theory/09/cfg_basic_blocks.png\">        <span class=\"diagram-label\">Figure 3: Basic blocks in a CFG</span>The first statement of a basic block is termed as <strong>leader</strong>. Any node <em>x</em> in a CFG is said to dominate another node <em>y</em> (written as <em>x dom y</em>) if all possible execution paths that goes through node <em>y</em> must pass through node <em>x</em>. The node <em>x</em> is said to be a <strong>dominator</strong> <a href="/9/references/">[ii]</a>. In the above example, line #s 1, 3, 4, 6, 7, 9, 10 are leaders. The node containing lines 7, 8 dominate the node containing line # 10. The block containing line #s 1, 2 is said to be the entry block; the block containing line # 10 is said to be the exit block.</p><p>If any block (or sub-graph) in a CFG is not connected with the sub-graph containing the entry block, that signifies the concerned block contains code, which is unreachable while the program is executed. Such unreachable code can be safely removed from the program. To illustrate this, let\'s consider a modified version of our previous code:</p><pre class=\"brush: cpp;\">    sum = 0;    i = 1;    while (i &le; n) {        sum += i;        ++i;    }    return sum;    if (sum &lt; 0) {        return 0;    }</pre><p>Figure 4 shows the corresponding CFG. The sub-graph containing line #s 8, 9, 10 is disconnected from the graph containing the entry block. The code in the disconnected sub-graph would never get executed, and, therefore, could be discarded.<img class=\"diagram\" alt=\"Unreachable blocks\" src=\"_STATIC_URL_isad/images/theory/09/cfg_unreachable_blocks.png\"><span class=\"diagram-label\">Figure 4: CFG with unreachable blocks</span></p><h2>Terminologies</h2><p>    <b>Path</b><br>    A path in a CFG is a sequence of nodes and edges that starts from the     initial node (or entry block) and ends at the terminal node. The CFG of a     program could have more than one terminal nodes.</p><p>    <b>Linearly Independent Path</b><br>    A linearly independent path is any path in the CFG of a program such that it     includes at least one new edge not present in any other linearly independent     path. A set of linearly independent paths give a clear picture of all     possible paths that a program can take during it\'s execution. Therefore,    path-coverage testing of a program would suffice by considering only the     linearly independent paths.    <br>    In figure 3 we can find four linearly independent paths:</p>    <pre>        1 - 3 - 6 - (7, 8) - 10        1 - 3 - 6 - (7, 8) - 9 - 10        1 - 3 - (4, 5) - 6 - (7, 8) - 10        1 - 3 - (4, 5) - 6 - (7, 8) - 9 - 10</pre>    <p>Note that 1 - 3 - (4, 5) - 3 - (4, 5) - 6 - (7,  8) - 10, for instance, won\'t qualify as a linearly independent path because there is no new edge not already present in any of the above four linearly independent paths.</p>            <h2>McCabe\'s Cyclomatic Complexity</h2><p>McCabe had applied graph-theoretic analysis to determine the complexity of a program module <a href="/9/references/">[vi]</a>. Cyclomatic complexity metric, as proposed by McCabe, provides an upper bound for the number of linearly independent paths that could exist through a given program module. Complexity of a module increases as the number of such paths in the module increase. Thus, if Cyclomatic complexity of any program module is 7, there could be up to seven linearly independent paths in the module. For a complete testing, each of those possible paths should be tested.</p><h3>Computing Cyclomatic Complexity</h3><p>Let <em>G</em> be a a given CFG. Let <em>E</em> denote the number of edges, and <em>N</em> denote the number of nodes. Let <em>V(G)</em> denote the Cyclomatic complexity for the CFG. <em>V(G)</em> can be obtained in either of the following three ways:</p><ul>    <li>        <b>Method #1:</b>        <span class=\"contentEquation\">V(G) = E - N + 2</em></span>    </li>        <li>        <b>Method #2:</b>      <em>V(G)</em> could be directly computed by a visual inspection of the       CFG:    <span class=\"contentEquation\">V(G) = Total number of bounded areas + 1    </span>    It may be noted here that structured programming would always lead to a     planar CFG.     </li>    <li>    <b>Method #3:</b>        If LN be the total number of loops and decision statements in a program,        then       <span class=\"contentEquation\">V(G) = LN + 1</span>    </li></ul>        <p>In case of object-oriented programming, the above equations apply to methods of a class <a href="/9/references/">[viii]</a>.Also, the value of V(G) so obtained is incremented by 1 considering the entry point of the method. A quick summary of how different types of statements affect V(G) could be found in <a href="/9/references/">[ix]</a>. Once the complexities of individual modules of a program are known, complexity of the program (or class) could be determined by <a href="/9/references/">[4], [ix]</a>:<span class=\"contentEquation\">V(G) = SUM( V(G<sub>i</sub>) ) - COUNT( V(G<sub>i</sub>) ) + 1</span>where <em>COUNT( V(G<sub>i</sub>) )</em> gives the total number of procedures (methods) in the program (class).</p><h3>Optimum Value of Cyclomatic Complexity</h3><p>A set of threshold values for Cyclomatic complexity has been presented in<a href="/9/references/">[vii]</a>, which we reproduce below.</p><center><table class=\"techno\"><thead>        <tr>        <th>V(G)</th>        <th>Module Category</th>        <th>Risk</th>    </tr></thead><tbody>    <tr>        <td>1-10</td>        <td>Simple</td>        <td>Low</td>    </tr>    <tr>        <td>11-20</td>        <td>More complex</td>        <td>Moderate</td>    </tr>    <tr>        <td>21-50</td>        <td>Complex</td>        <td>High</td>    </tr>    <tr>        <td>&gt; 50</td>        <td>Unstable</td>        <td>Very high</td>    </tr></tbody></table></center><p>It has been suggested that the Cyclomatic complexity of any module should not exceed 10 <a href="/9/references/">[vi], [4]</a>. Doing so would make a module difficult to understand for humans. If any module is found to have Cyclomatic complexity greater than 10, the module should be considered for redesign. Note that, a high value of V(G) is possible for a given module if it contains multiple <em>cases</em> in C like <em>switch-case</em> statements. McCabe had exempted such modules from the limit of V(G) as 10 <a href="/9/references/">[vi]</a>.</p>        <h3>Merits</h3><p>McCabe\'s Cyclomatic complexity has certain advantages:</p><ul>    <li>Independent of programming language</li>    <li>Helps in risk analysis during development or maintenance phase</li>    <li>Gives an idea about the maximum number of test cases to be executed     (hence, the required effort) for a given module</li></ul><h3>Demerits</h3><p>Cyclomatic complexity does not reflect on cohesion and coupling of modules.</p><p>McCabe\'s Cyclomatic complexity was originally proposed for procedural languages. One may look in <a href="/9/references/">[xi]</a> to get an idea of how the complexity calculation could be modified for object-oriented languages. In fact, one may also wish to make use of Chidamber-Kemerer metrics <a href="/9/references/">[x]</a> (or any other similar metric), which has been designed for object-oriented programming.</p>','<ul>  <li>Identify basic blocks in a program module, and draw it\'s control flow graph (CFG)</li>  <li>Identify the linearly independent paths from a CFG</li>  <li>Determine Cyclomatic complexity of a module in a program</li></ul>','3.00','<p>A visual representation of flow of control within a program may help the developer to perform static analysis of his code. One could break down his program into multiple <i>basic blocks</i>, and connect them with directed edges to draw a Control Flow Graph (CFG). A CFG of a program helps in identifying how complex a program is. It also helps to estimate the maximum number of test cases one might require to test the code.</p><p>In this experiment, we will learn about basic blocks and how to draw a CFG using them. We would look into paths and linearly independent paths in context of a CFG. Finally, we would learn about McCabe\'s cyclomatic complexity, and classify a given program based on that. </p>'),(10,'Designing Test Suites','<h2>Software Testing</h2><p>Testing software is an important part of the development life cycle of a software. It is an expensive activity. Hence, appropriate testing methods are necessary for ensuring the reliability of a program.According to the ANSI/IEEE 1059 standard, the definition of testing is the process of analyzing a software item, to detect the differences between existing and required conditions i.e. defects/errors/bugs and to evaluate the features of the software item. </p><p>The purpose of testing is to verify and validate a software and to find the defects present in a software. The purpose of finding those problems is to get them fixed. </p><p><ul><li><strong>Verification </strong>is the checking or we can say the testing of software for consistency and  conformance by evaluating the results against pre-specified requirements. </li><li><strong>Validation</strong> looks at the systems correctness, i.e. the process of checking that what has been specified is what the user actually wanted. </li><li><strong>Defect</strong> is a variance between the expected and actual result. The defect\'s ultimate source may be traced to a fault introduced in the specification, design, or development (coding) phases. </li></ul></p><h2>Standards for Software Test Documentation</h2><p> IEEE 829-1998 is known as the 829 Standard for Software Test Documentation. It is an IEEE standard that specifies the form of a set of documents for use in software testing  <a href="/10/references/">[i]</a>.There are other different standards discussed below.</p><p><ul><li>IEEE 1008, a standard for unit testing</li><li>IEEE 1012, a standard for Software Verification and Validation</li> <li>IEEE 1028, a standard for software inspections</li> <li>IEEE 1044, a standard for the classification of software anomalies</li><li>IEEE 1044-1, a guide to the classification of software anomalies</li><li>IEEE 830, a guide for developing system requirements specifications</li> <li>IEEE 730, a standard for software quality assurance plans</li> <li>IEEE 1061, a standard for software quality metrics and methodology</li> <li>IEEE 12207, a standard for software life cycle processes and life cycle data</li> <li>BS 7925-1, a vocabulary of terms used in software testing</li> <li>BS 7925-2, a standard for software component testing</li></ul></p><h2>Testing Frameworks</h2><p>Following are the different testing frameworks:</p><ul><li>jUnit - for Java unit test <a href="/10/references/">[ii]</a></li><li>Selenium - is a suite of tools for automating web applications for software testing purposes, plugin for Firefox <a href="/10/references/">[iii]</a><li>HP QC - is the HP Web-based test management tool. It familiarizes with the process of defining releases, specifying requirements, planning tests, executing tests, tracking defects, alerting on changes, and analyzing results. It also shows how to customize project  <a href="/10/references/">[iv]</a></li><li>IBM Rational -  Rational software has a solution to support business sector for designing, implementing and testing software <a href="/10/references/">[v]</a></li></ul><h2>Need for Software Testing</h2><p>There are many reasons for why we should test software, such as:</p><p><ul><li>Software testing identifies the software faults. The removal of faults helps reduce the number of system failures. Reducing failures improves the reliability and the quality of the systems. </li><li>Software testing can also improves the other system qualities such as maintainability, usability, and testability.</li><li>In order to meet the condition that the last few years of the 20th century systems had to be shown to be free from the ‘millennium bug’.</li><li>In order to meet the different legal requirements.</li><li>In order to meet industry specific standards such as the Aerospace, Missile and Railway Signaling standards.</li></ul></p><h2>Test Cases and Test Suite</h2><p>A test case describes an input descriptions and an expected output descriptions. Input are of two types: preconditions (circumstances that hold prior to test case execution) and the actual inputs that are identified by some testing methods. The set of test cases is called a test suite. We may have a test suite of all possible test cases.</p><h2>Types of Software Testing</h2><p>Testing is done in every stage of software development life cycle, but the testing done at each level of software  development is different in nature and has different objectives. There are different types of testing, such as stress testing, volume testing, configuration testing, compatibility testing, recovery testing, maintenance testing, documentation testing, and usability testing. Software testing are mainly of following types <a href="/10/references/">[1]</a></p><p><ol><li><strong>Unit Testing</strong></li><li><strong>Integration Testing</strong></li><li><strong>System Testing</strong></li></ol></p><h3>Unit Testing</h3><p>Unit testing is done at the lowest level. It tests the basic unit of software, that is the smallest  testable piece of software. The individual component or unit of a program are tested in unit testing. Unit testing are of two types.<ul><li><strong>Black box testing</strong>: This is also known as <strong>functional testing</strong> , where the test cases are designed based on input output values only. There are many types of Black Box Testing but following are the prominent ones.</li></ul></p><p>- <strong> Equivalence class partitioning</strong>: In this approach, the domain of input values to a program is divided into a set of equivalence classes.e.g. Consider a software program that computes whether an integer number is  even or not that is in the range of 0 to 10. Determine the equivalence class test suite.There are three equivalence classes for this program.- The set of negative integer- The integers in the range 0 to 10- The integer larger than 10</p><p>- <strong> Boundary value analysis </strong>: In this approach, while designing the test cases, the values at boundaries of different equivalence classes are taken into consideration.e.g. In the above given example as in equivalence class partitioning, a boundary values based test suite is { 0, -1, 10, 11 }</p><p><ul><li><strong>White box testing</strong>: It is also known as <strong>structural testing</strong>. In this testing, test cases are designed on the basis of examination of the code.This testing is performed based on the knowledge of how the system is implemented. It includes analyzing data flow, control flow, information flow, coding practices, exception and error handling within the system, to test the intended and unintended software behavior. White box testing can be performed to validate whether code implementation follows intended design, to validate implemented security functionality, and to uncover exploitable vulnerabilities.This testing requires access to the source code. Though white box testing can be performed any time in the life cycle after the code is developed, but it is a good practice to perform white box testing during the unit testing phase. </li></ul></p><h3>Integration Testing</h3><p>Integration testing is performed when two or more tested units are combined into a larger structure. The main objective of this testing is to check whether the different modules of a program interface with each other properly or not. This testing is mainly of two types:</p> <p><ul> <li><strong> Top-down approach</strong></li><li><strong>Bottom-up approach</strong></li></ul></p> <p>In bottom-up approach, each subsystem is tested separately and then the full system is tested. But the top-down integration testing starts with the main routine and one or two subordinate routines in the system. After the top-level ‘skeleton’ has been tested, the immediately subroutines of the ‘skeleton’ are combined with it and tested.</p><h3>System Testing</h3><p>System testing tends to affirm the end-to-end quality of the entire system. System testing is often based  on the functional / requirement specification of the system. Non-functional quality attributes, such as  reliability, security, and maintainability are also checked. There are three types of system testing</p><ul><li><strong>Alpha testing</strong> is done by the developers who develop the software. This testing is also done by the client or an outsider with the presence of developer or we can say tester.</li><li><strong>Beta testing</strong>is done by very few number of end users before the delivery, where the change requests are fixed, if the user gives any feedback or reports any type of defect.</li><li><strong>User Acceptance testing </strong>is also another level of the system testing process where the system is tested for acceptability. This test evaluates the system\'s compliance with the client requirements and assess whether it is acceptable for software delivery</ul></p><p>An error correction may introduce new errors. Therefore, after every round of error-fixing, another testing is carried out, i.e. called regression testing. Regression testing does not belong to either unit testing, integration testing, or system testing, instead, it is a separate dimension to these three forms of testing.</p><p><strong>Regression Testing</strong></p><p>The purpose of regression testing is to ensure that bug fixes and new functionality introduced in a software do not adversely affect the unmodified parts of the program <a href="/10/references/">[2]</a>. Regression testing is an important activity at both testing and maintenance phases. When a piece of software is modified, it is necessary to ensure that the quality of the software is preserved. To this end, regression testing is to retest the software using the test cases selected from the original test suite. </p><h3>Example</h3><p>Write a program to calculate the square of a number in the range 1-100 </p><p><pre class=\"brush: cpp;\">#include &lt;stdio.h&gt;int main()  {     int n, res;     printf(\"Enter a number: \");     scanf(\"%d\", &n);     if (n >= 1 && n <= 100)      { 	 res = n * n; 	 printf(\"\\n Square of %d is %d\\n\", n, res);     }     else if (n<= 0 || n > 100)    	 printf(\"Beyond the range\");      return 0; }</pre></p><p>Output</p><p><pre class=\"brush: bash;\"> Inputs               Outputs		I1 : -2		O1 :  Beyond the rangeI2 :  0 	O2 :  Beyond the range I3 :  1		O3 :  Square of 1 is 1I4 : 100	O4 :  Square of 100 is 10000I5 : 101    O5 :  Beyond the rangeI6 : 4      O6 :  Square of 4 is 16I7 : 62		O7 :  Square of 62 is 3844</pre></p><p>Test Cases</p><p><pre class=\"brush: bash;\">T1 : {I1 ,O1}T2 : {I2 ,O2}T3 : {I3, O3}T4 : {I4, O4}T5 : {I5, O5}T6 : {I6, O6}T7 : {I7, O7}</pre></p><h2>Some Remarks</h2><p>A prevalent misconception among the beginners is that one should be concerned with testing only after coding ends. Testing is, in fact, not a phase towards the end. It is rather a continuous process. The efforts for testing should begin in the form of preparation of test cases after the requirements have been finalized. The Software Requirements Specification (SRS) document captures all features to be expected from the system. The requirements so identified here should serve as a basis towards preparation of the test cases. Test cases should be designed in such a way that all target features could be verified. However,testing a software is not only about proving that it works correctly. Successful testing should also point out the bugs present in the system, if any.</p>','<ul><li>Learn about different techniques of testing a software</li><li>Design unit test cases to verify the functionality and locate bugs, if any </li></ul>','3.00','<p>Development of a new software, like any other product, remains incomplete until it subjected to exhaustive tests. The primary objective of testing is not to verify that all desired features have been implemented correctly. However, it also includes verification of the software behavior in case of &quot;bad inputs&quot;.</p><p>In this experiment we discuss in brief about different types of testing, and provide mechanisms to have hands-on experience on unit testing.</p>');
/*!40000 ALTER TABLE `isad_theory` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `isad_workspace`
--

DROP TABLE IF EXISTS `isad_workspace`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `isad_workspace` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `wtype` varchar(80) NOT NULL,
  `description` varchar(80) NOT NULL,
  `code` longtext NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `isad_workspace`
--

LOCK TABLES `isad_workspace` WRITE;
/*!40000 ALTER TABLE `isad_workspace` DISABLE KEYS */;
INSERT INTO `isad_workspace` VALUES (1,'Graph editor','WireIt Javascript library for drawing graphs','<iframe src =\"http://10.14.93.148/isad/wireit/\" style=\"width: 100%; height: 100%;\"                                    frameborder=\"0\" marginwidth=\"0\" id=\"ifWorkSpace\" name=\"ifWorkSpace\">                                    <p style=\"color: Red;\">                                        <b>Unable to load workspace! Your browser does not support iframes.</b>                                    </p></iframe>'),(3,'Blank','Nothing to be displayed','&nbsp;'),(4,'Inline','All HTML required is present here','<h1>Inline</h1>'),(5,'HelloMentor','Submit answer to mentor','<h3>Hi Mentor!</h3>');
/*!40000 ALTER TABLE `isad_workspace` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `post2mentor_postanswer`
--

DROP TABLE IF EXISTS `post2mentor_postanswer`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `post2mentor_postanswer` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `exercise_id` int(11) NOT NULL,
  `answer` longtext NOT NULL,
  `email` varchar(75) NOT NULL,
  `comment` longtext,
  `file` varchar(200) DEFAULT NULL,
  `post_date` datetime NOT NULL,
  `has_replied` tinyint(1) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `post2mentor_postanswer_2799bae2` (`exercise_id`),
  CONSTRAINT `exercise_id_refs_id_1b32756c` FOREIGN KEY (`exercise_id`) REFERENCES `isad_exercise` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- NOT Dumping data for table `post2mentor_postanswer`
--


/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2014-03-19 19:01:03
